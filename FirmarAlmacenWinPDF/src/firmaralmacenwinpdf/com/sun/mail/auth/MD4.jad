// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   MD4.java

package com.sun.mail.auth;


public final class MD4
{

    public MD4()
    {
        implReset();
    }

    public byte[] digest(byte in[])
    {
        implReset();
        engineUpdate(in, 0, in.length);
        byte out[] = new byte[16];
        implDigest(out, 0);
        return out;
    }

    private void implReset()
    {
        state[0] = 0x67452301;
        state[1] = 0xefcdab89;
        state[2] = 0x98badcfe;
        state[3] = 0x10325476;
        bufOfs = 0;
        bytesProcessed = 0L;
    }

    private void implDigest(byte out[], int ofs)
    {
        long bitsProcessed = bytesProcessed << 3;
        int index = (int)bytesProcessed & 0x3f;
        int padLen = index >= 56 ? 120 - index : 56 - index;
        engineUpdate(padding, 0, padLen);
        buffer[56] = (byte)(int)bitsProcessed;
        buffer[57] = (byte)(int)(bitsProcessed >> 8);
        buffer[58] = (byte)(int)(bitsProcessed >> 16);
        buffer[59] = (byte)(int)(bitsProcessed >> 24);
        buffer[60] = (byte)(int)(bitsProcessed >> 32);
        buffer[61] = (byte)(int)(bitsProcessed >> 40);
        buffer[62] = (byte)(int)(bitsProcessed >> 48);
        buffer[63] = (byte)(int)(bitsProcessed >> 56);
        implCompress(buffer, 0);
        for(int i = 0; i < state.length; i++)
        {
            int x = state[i];
            out[ofs++] = (byte)x;
            out[ofs++] = (byte)(x >> 8);
            out[ofs++] = (byte)(x >> 16);
            out[ofs++] = (byte)(x >> 24);
        }

    }

    private void engineUpdate(byte b[], int ofs, int len)
    {
        if(len == 0)
            return;
        if(ofs < 0 || len < 0 || ofs > b.length - len)
            throw new ArrayIndexOutOfBoundsException();
        if(bytesProcessed < 0L)
            implReset();
        bytesProcessed += len;
        if(bufOfs != 0)
        {
            int n = Math.min(len, 64 - bufOfs);
            System.arraycopy(b, ofs, buffer, bufOfs, n);
            bufOfs += n;
            ofs += n;
            len -= n;
            if(bufOfs >= 64)
            {
                implCompress(buffer, 0);
                bufOfs = 0;
            }
        }
        while(len >= 64) 
        {
            implCompress(b, ofs);
            len -= 64;
            ofs += 64;
        }
        if(len > 0)
        {
            System.arraycopy(b, ofs, buffer, 0, len);
            bufOfs = len;
        }
    }

    private static int FF(int a, int b, int c, int d, int x, int s)
    {
        a += (b & c | ~b & d) + x;
        return a << s | a >>> 32 - s;
    }

    private static int GG(int a, int b, int c, int d, int x, int s)
    {
        a += (b & c | b & d | c & d) + x + 0x5a827999;
        return a << s | a >>> 32 - s;
    }

    private static int HH(int a, int b, int c, int d, int x, int s)
    {
        a += (b ^ c ^ d) + x + 0x6ed9eba1;
        return a << s | a >>> 32 - s;
    }

    private void implCompress(byte buf[], int ofs)
    {
        for(int xfs = 0; xfs < x.length; xfs++)
        {
            x[xfs] = buf[ofs] & 0xff | (buf[ofs + 1] & 0xff) << 8 | (buf[ofs + 2] & 0xff) << 16 | (buf[ofs + 3] & 0xff) << 24;
            ofs += 4;
        }

        int a = state[0];
        int b = state[1];
        int c = state[2];
        int d = state[3];
        a = FF(a, b, c, d, x[0], 3);
        d = FF(d, a, b, c, x[1], 7);
        c = FF(c, d, a, b, x[2], 11);
        b = FF(b, c, d, a, x[3], 19);
        a = FF(a, b, c, d, x[4], 3);
        d = FF(d, a, b, c, x[5], 7);
        c = FF(c, d, a, b, x[6], 11);
        b = FF(b, c, d, a, x[7], 19);
        a = FF(a, b, c, d, x[8], 3);
        d = FF(d, a, b, c, x[9], 7);
        c = FF(c, d, a, b, x[10], 11);
        b = FF(b, c, d, a, x[11], 19);
        a = FF(a, b, c, d, x[12], 3);
        d = FF(d, a, b, c, x[13], 7);
        c = FF(c, d, a, b, x[14], 11);
        b = FF(b, c, d, a, x[15], 19);
        a = GG(a, b, c, d, x[0], 3);
        d = GG(d, a, b, c, x[4], 5);
        c = GG(c, d, a, b, x[8], 9);
        b = GG(b, c, d, a, x[12], 13);
        a = GG(a, b, c, d, x[1], 3);
        d = GG(d, a, b, c, x[5], 5);
        c = GG(c, d, a, b, x[9], 9);
        b = GG(b, c, d, a, x[13], 13);
        a = GG(a, b, c, d, x[2], 3);
        d = GG(d, a, b, c, x[6], 5);
        c = GG(c, d, a, b, x[10], 9);
        b = GG(b, c, d, a, x[14], 13);
        a = GG(a, b, c, d, x[3], 3);
        d = GG(d, a, b, c, x[7], 5);
        c = GG(c, d, a, b, x[11], 9);
        b = GG(b, c, d, a, x[15], 13);
        a = HH(a, b, c, d, x[0], 3);
        d = HH(d, a, b, c, x[8], 9);
        c = HH(c, d, a, b, x[4], 11);
        b = HH(b, c, d, a, x[12], 15);
        a = HH(a, b, c, d, x[2], 3);
        d = HH(d, a, b, c, x[10], 9);
        c = HH(c, d, a, b, x[6], 11);
        b = HH(b, c, d, a, x[14], 15);
        a = HH(a, b, c, d, x[1], 3);
        d = HH(d, a, b, c, x[9], 9);
        c = HH(c, d, a, b, x[5], 11);
        b = HH(b, c, d, a, x[13], 15);
        a = HH(a, b, c, d, x[3], 3);
        d = HH(d, a, b, c, x[11], 9);
        c = HH(c, d, a, b, x[7], 11);
        b = HH(b, c, d, a, x[15], 15);
        state[0] += a;
        state[1] += b;
        state[2] += c;
        state[3] += d;
    }

    private final int state[] = new int[4];
    private final int x[] = new int[16];
    private static final int blockSize = 64;
    private final byte buffer[] = new byte[64];
    private int bufOfs;
    private long bytesProcessed;
    private static final int S11 = 3;
    private static final int S12 = 7;
    private static final int S13 = 11;
    private static final int S14 = 19;
    private static final int S21 = 3;
    private static final int S22 = 5;
    private static final int S23 = 9;
    private static final int S24 = 13;
    private static final int S31 = 3;
    private static final int S32 = 9;
    private static final int S33 = 11;
    private static final int S34 = 15;
    private static final byte padding[];

    static 
    {
        padding = new byte[136];
        padding[0] = -128;
    }
}
