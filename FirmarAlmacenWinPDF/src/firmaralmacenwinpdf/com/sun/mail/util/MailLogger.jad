// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   MailLogger.java

package com.sun.mail.util;

import java.io.PrintStream;
import java.text.MessageFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.Session;

public final class MailLogger
{

    public MailLogger(String name, String prefix, boolean debug, PrintStream out)
    {
        logger = Logger.getLogger(name);
        this.prefix = prefix;
        this.debug = debug;
        this.out = out == null ? System.out : out;
    }

    public MailLogger(Class clazz, String prefix, boolean debug, PrintStream out)
    {
        String name = packageOf(clazz);
        logger = Logger.getLogger(name);
        this.prefix = prefix;
        this.debug = debug;
        this.out = out == null ? System.out : out;
    }

    public MailLogger(Class clazz, String subname, String prefix, boolean debug, PrintStream out)
    {
        String name = (new StringBuilder()).append(packageOf(clazz)).append(".").append(subname).toString();
        logger = Logger.getLogger(name);
        this.prefix = prefix;
        this.debug = debug;
        this.out = out == null ? System.out : out;
    }

    public MailLogger(String name, String prefix, Session session)
    {
        this(name, prefix, session.getDebug(), session.getDebugOut());
    }

    public MailLogger(Class clazz, String prefix, Session session)
    {
        this(clazz, prefix, session.getDebug(), session.getDebugOut());
    }

    public MailLogger getLogger(String name, String prefix)
    {
        return new MailLogger(name, prefix, debug, out);
    }

    public MailLogger getLogger(Class clazz, String prefix)
    {
        return new MailLogger(clazz, prefix, debug, out);
    }

    public MailLogger getSubLogger(String subname, String prefix)
    {
        return new MailLogger((new StringBuilder()).append(logger.getName()).append(".").append(subname).toString(), prefix, debug, out);
    }

    public MailLogger getSubLogger(String subname, String prefix, boolean debug)
    {
        return new MailLogger((new StringBuilder()).append(logger.getName()).append(".").append(subname).toString(), prefix, debug, out);
    }

    public void log(Level level, String msg)
    {
        ifDebugOut(msg);
        if(logger.isLoggable(level))
        {
            String frame[] = inferCaller();
            logger.logp(level, frame[0], frame[1], msg);
        }
    }

    public void log(Level level, String msg, Object param1)
    {
        if(debug)
        {
            msg = MessageFormat.format(msg, new Object[] {
                param1
            });
            debugOut(msg);
        }
        if(logger.isLoggable(level))
        {
            String frame[] = inferCaller();
            logger.logp(level, frame[0], frame[1], msg, param1);
        }
    }

    public void log(Level level, String msg, Object params[])
    {
        if(debug)
        {
            msg = MessageFormat.format(msg, params);
            debugOut(msg);
        }
        if(logger.isLoggable(level))
        {
            String frame[] = inferCaller();
            logger.logp(level, frame[0], frame[1], msg, params);
        }
    }

    public void log(Level level, String msg, Throwable thrown)
    {
        if(debug)
            if(thrown != null)
            {
                debugOut((new StringBuilder()).append(msg).append(", THROW: ").toString());
                thrown.printStackTrace(out);
            } else
            {
                debugOut(msg);
            }
        if(logger.isLoggable(level))
        {
            String frame[] = inferCaller();
            logger.logp(level, frame[0], frame[1], msg, thrown);
        }
    }

    public void config(String msg)
    {
        log(Level.CONFIG, msg);
    }

    public void fine(String msg)
    {
        log(Level.FINE, msg);
    }

    public void finer(String msg)
    {
        log(Level.FINER, msg);
    }

    public void finest(String msg)
    {
        log(Level.FINEST, msg);
    }

    public boolean isLoggable(Level level)
    {
        return debug || logger.isLoggable(level);
    }

    private final void ifDebugOut(String msg)
    {
        if(debug)
            debugOut(msg);
    }

    private final void debugOut(String msg)
    {
        if(prefix != null)
            out.println((new StringBuilder()).append(prefix).append(": ").append(msg).toString());
        else
            out.println(msg);
    }

    private String packageOf(Class clazz)
    {
        Package p = clazz.getPackage();
        if(p != null)
            return p.getName();
        String cname = clazz.getName();
        int i = cname.lastIndexOf('.');
        if(i > 0)
            return cname.substring(0, i);
        else
            return "";
    }

    private String[] inferCaller()
    {
        StackTraceElement stack[] = (new Throwable()).getStackTrace();
        int ix = 0;
        do
        {
            if(ix >= stack.length)
                break;
            StackTraceElement frame = stack[ix];
            String cname = frame.getClassName();
            if(isLoggerImplFrame(cname))
                break;
            ix++;
        } while(true);
        for(; ix < stack.length; ix++)
        {
            StackTraceElement frame = stack[ix];
            String cname = frame.getClassName();
            if(!isLoggerImplFrame(cname))
                return (new String[] {
                    cname, frame.getMethodName()
                });
        }

        return (new String[] {
            null, null
        });
    }

    private boolean isLoggerImplFrame(String cname)
    {
        return com/sun/mail/util/MailLogger.getName().equals(cname);
    }

    private final Logger logger;
    private final String prefix;
    private final boolean debug;
    private final PrintStream out;
}
