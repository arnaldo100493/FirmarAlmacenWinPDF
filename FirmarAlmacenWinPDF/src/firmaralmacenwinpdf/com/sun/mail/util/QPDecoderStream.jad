// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   QPDecoderStream.java

package com.sun.mail.util;

import java.io.*;

// Referenced classes of package com.sun.mail.util:
//            ASCIIUtility

public class QPDecoderStream extends FilterInputStream
{

    public QPDecoderStream(InputStream in)
    {
        super(new PushbackInputStream(in, 2));
        ba = new byte[2];
        spaces = 0;
    }

    public int read()
        throws IOException
    {
        if(spaces > 0)
        {
            spaces--;
            return 32;
        }
        int c = in.read();
        if(c == 32)
        {
            while((c = in.read()) == 32) 
                spaces++;
            if(c == 13 || c == 10 || c == -1)
            {
                spaces = 0;
            } else
            {
                ((PushbackInputStream)in).unread(c);
                c = 32;
            }
            return c;
        }
        if(c == 61)
        {
            int a = in.read();
            if(a == 10)
                return read();
            if(a == 13)
            {
                int b = in.read();
                if(b != 10)
                    ((PushbackInputStream)in).unread(b);
                return read();
            }
            if(a == -1)
                return -1;
            ba[0] = (byte)a;
            ba[1] = (byte)in.read();
            try
            {
                return ASCIIUtility.parseInt(ba, 0, 2, 16);
            }
            catch(NumberFormatException nex)
            {
                ((PushbackInputStream)in).unread(ba);
            }
            return c;
        } else
        {
            return c;
        }
    }

    public int read(byte buf[], int off, int len)
        throws IOException
    {
        int i = 0;
        do
        {
            if(i >= len)
                break;
            int c;
            if((c = read()) == -1)
            {
                if(i == 0)
                    i = -1;
                break;
            }
            buf[off + i] = (byte)c;
            i++;
        } while(true);
        return i;
    }

    public long skip(long n)
        throws IOException
    {
        long skipped;
        for(skipped = 0L; n-- > 0L && read() >= 0; skipped++);
        return skipped;
    }

    public boolean markSupported()
    {
        return false;
    }

    public int available()
        throws IOException
    {
        return in.available();
    }

    protected byte ba[];
    protected int spaces;
}
