// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   UUEncoderStream.java

package com.sun.mail.util;

import java.io.*;

public class UUEncoderStream extends FilterOutputStream
{

    public UUEncoderStream(OutputStream out)
    {
        this(out, "encoder.buf", 644);
    }

    public UUEncoderStream(OutputStream out, String name)
    {
        this(out, name, 644);
    }

    public UUEncoderStream(OutputStream out, String name, int mode)
    {
        super(out);
        bufsize = 0;
        wrotePrefix = false;
        this.name = name;
        this.mode = mode;
        buffer = new byte[45];
    }

    public void setNameMode(String name, int mode)
    {
        this.name = name;
        this.mode = mode;
    }

    public void write(byte b[], int off, int len)
        throws IOException
    {
        for(int i = 0; i < len; i++)
            write(b[off + i]);

    }

    public void write(byte data[])
        throws IOException
    {
        write(data, 0, data.length);
    }

    public void write(int c)
        throws IOException
    {
        buffer[bufsize++] = (byte)c;
        if(bufsize == 45)
        {
            writePrefix();
            encode();
            bufsize = 0;
        }
    }

    public void flush()
        throws IOException
    {
        if(bufsize > 0)
        {
            writePrefix();
            encode();
        }
        writeSuffix();
        out.flush();
    }

    public void close()
        throws IOException
    {
        flush();
        out.close();
    }

    private void writePrefix()
        throws IOException
    {
        if(!wrotePrefix)
        {
            PrintStream ps = new PrintStream(out, false, "utf-8");
            ps.println((new StringBuilder()).append("begin ").append(mode).append(" ").append(name).toString());
            ps.flush();
            wrotePrefix = true;
        }
    }

    private void writeSuffix()
        throws IOException
    {
        PrintStream ps = new PrintStream(out, false, "us-ascii");
        ps.println(" \nend");
        ps.flush();
    }

    private void encode()
        throws IOException
    {
        int i = 0;
        out.write((bufsize & 0x3f) + 32);
        while(i < bufsize) 
        {
            byte a = buffer[i++];
            byte b;
            byte c;
            if(i < bufsize)
            {
                b = buffer[i++];
                if(i < bufsize)
                    c = buffer[i++];
                else
                    c = 1;
            } else
            {
                b = 1;
                c = 1;
            }
            int c1 = a >>> 2 & 0x3f;
            int c2 = a << 4 & 0x30 | b >>> 4 & 0xf;
            int c3 = b << 2 & 0x3c | c >>> 6 & 3;
            int c4 = c & 0x3f;
            out.write(c1 + 32);
            out.write(c2 + 32);
            out.write(c3 + 32);
            out.write(c4 + 32);
        }
        out.write(10);
    }

    private byte buffer[];
    private int bufsize;
    private boolean wrotePrefix;
    protected String name;
    protected int mode;
}
