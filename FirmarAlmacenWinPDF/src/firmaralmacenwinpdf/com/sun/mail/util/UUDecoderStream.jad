// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   UUDecoderStream.java

package com.sun.mail.util;

import java.io.*;

// Referenced classes of package com.sun.mail.util:
//            LineInputStream, DecodingException, PropUtil

public class UUDecoderStream extends FilterInputStream
{

    public UUDecoderStream(InputStream in)
    {
        super(in);
        buffer = new byte[45];
        bufsize = 0;
        index = 0;
        gotPrefix = false;
        gotEnd = false;
        lin = new LineInputStream(in);
        ignoreErrors = PropUtil.getBooleanSystemProperty("mail.mime.uudecode.ignoreerrors", false);
        ignoreMissingBeginEnd = PropUtil.getBooleanSystemProperty("mail.mime.uudecode.ignoremissingbeginend", false);
    }

    public UUDecoderStream(InputStream in, boolean ignoreErrors, boolean ignoreMissingBeginEnd)
    {
        super(in);
        buffer = new byte[45];
        bufsize = 0;
        index = 0;
        gotPrefix = false;
        gotEnd = false;
        lin = new LineInputStream(in);
        this.ignoreErrors = ignoreErrors;
        this.ignoreMissingBeginEnd = ignoreMissingBeginEnd;
    }

    public int read()
        throws IOException
    {
        if(index >= bufsize)
        {
            readPrefix();
            if(!decode())
                return -1;
            index = 0;
        }
        return buffer[index++] & 0xff;
    }

    public int read(byte buf[], int off, int len)
        throws IOException
    {
        int i = 0;
        do
        {
            if(i >= len)
                break;
            int c;
            if((c = read()) == -1)
            {
                if(i == 0)
                    i = -1;
                break;
            }
            buf[off + i] = (byte)c;
            i++;
        } while(true);
        return i;
    }

    public boolean markSupported()
    {
        return false;
    }

    public int available()
        throws IOException
    {
        return (in.available() * 3) / 4 + (bufsize - index);
    }

    public String getName()
        throws IOException
    {
        readPrefix();
        return name;
    }

    public int getMode()
        throws IOException
    {
        readPrefix();
        return mode;
    }

    private void readPrefix()
        throws IOException
    {
        if(gotPrefix)
            return;
        mode = 438;
        name = "encoder.buf";
        do
        {
            String line = lin.readLine();
            if(line == null)
            {
                if(!ignoreMissingBeginEnd)
                    throw new DecodingException("UUDecoder: Missing begin");
                gotPrefix = true;
                gotEnd = true;
                break;
            }
            if(line.regionMatches(false, 0, "begin", 0, 5))
            {
                try
                {
                    mode = Integer.parseInt(line.substring(6, 9));
                }
                catch(NumberFormatException ex)
                {
                    if(!ignoreErrors)
                        throw new DecodingException((new StringBuilder()).append("UUDecoder: Error in mode: ").append(ex.toString()).toString());
                }
                if(line.length() > 10)
                    name = line.substring(10);
                else
                if(!ignoreErrors)
                    throw new DecodingException((new StringBuilder()).append("UUDecoder: Missing name: ").append(line).toString());
                gotPrefix = true;
                break;
            }
            if(!ignoreMissingBeginEnd || line.length() == 0)
                continue;
            int count = line.charAt(0);
            count = count - 32 & 0x3f;
            int need = (count * 8 + 5) / 6;
            if(need != 0 && line.length() < need + 1)
                continue;
            readAhead = line;
            gotPrefix = true;
            break;
        } while(true);
    }

    private boolean decode()
        throws IOException
    {
        if(gotEnd)
            return false;
        bufsize = 0;
        int count = 0;
        do
        {
            String line;
            do
            {
                do
                {
                    if(readAhead != null)
                    {
                        line = readAhead;
                        readAhead = null;
                    } else
                    {
                        line = lin.readLine();
                    }
                    if(line == null)
                        if(!ignoreMissingBeginEnd)
                        {
                            throw new DecodingException("UUDecoder: Missing end at EOF");
                        } else
                        {
                            gotEnd = true;
                            return false;
                        }
                    if(line.equals("end"))
                    {
                        gotEnd = true;
                        return false;
                    }
                } while(line.length() == 0);
                count = line.charAt(0);
                if(count >= 32)
                    break;
                if(!ignoreErrors)
                    throw new DecodingException("UUDecoder: Buffer format error");
            } while(true);
            count = count - 32 & 0x3f;
            if(count == 0)
            {
                line = lin.readLine();
                if((line == null || !line.equals("end")) && !ignoreMissingBeginEnd)
                {
                    throw new DecodingException("UUDecoder: Missing End after count 0 line");
                } else
                {
                    gotEnd = true;
                    return false;
                }
            }
            int need = (count * 8 + 5) / 6;
            if(line.length() < need + 1)
            {
                if(!ignoreErrors)
                    throw new DecodingException("UUDecoder: Short buffer error");
            } else
            {
                int i = 1;
                do
                {
                    if(bufsize >= count)
                        break;
                    byte a = (byte)(line.charAt(i++) - 32 & 0x3f);
                    byte b = (byte)(line.charAt(i++) - 32 & 0x3f);
                    buffer[bufsize++] = (byte)(a << 2 & 0xfc | b >>> 4 & 3);
                    if(bufsize < count)
                    {
                        a = b;
                        b = (byte)(line.charAt(i++) - 32 & 0x3f);
                        buffer[bufsize++] = (byte)(a << 4 & 0xf0 | b >>> 2 & 0xf);
                    }
                    if(bufsize < count)
                    {
                        a = b;
                        b = (byte)(line.charAt(i++) - 32 & 0x3f);
                        buffer[bufsize++] = (byte)(a << 6 & 0xc0 | b & 0x3f);
                    }
                } while(true);
                return true;
            }
        } while(true);
    }

    private String name;
    private int mode;
    private byte buffer[];
    private int bufsize;
    private int index;
    private boolean gotPrefix;
    private boolean gotEnd;
    private LineInputStream lin;
    private boolean ignoreErrors;
    private boolean ignoreMissingBeginEnd;
    private String readAhead;
}
