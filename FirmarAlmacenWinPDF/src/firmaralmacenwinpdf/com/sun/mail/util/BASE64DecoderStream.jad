// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   BASE64DecoderStream.java

package com.sun.mail.util;

import java.io.*;

// Referenced classes of package com.sun.mail.util:
//            DecodingException, PropUtil

public class BASE64DecoderStream extends FilterInputStream
{

    public BASE64DecoderStream(InputStream in)
    {
        super(in);
        buffer = new byte[3];
        bufsize = 0;
        index = 0;
        input_buffer = new byte[8190];
        input_pos = 0;
        input_len = 0;
        ignoreErrors = false;
        ignoreErrors = PropUtil.getBooleanSystemProperty("mail.mime.base64.ignoreerrors", false);
    }

    public BASE64DecoderStream(InputStream in, boolean ignoreErrors)
    {
        super(in);
        buffer = new byte[3];
        bufsize = 0;
        index = 0;
        input_buffer = new byte[8190];
        input_pos = 0;
        input_len = 0;
        this.ignoreErrors = false;
        this.ignoreErrors = ignoreErrors;
    }

    public int read()
        throws IOException
    {
        if(index >= bufsize)
        {
            bufsize = decode(buffer, 0, buffer.length);
            if(bufsize <= 0)
                return -1;
            index = 0;
        }
        return buffer[index++] & 0xff;
    }

    public int read(byte buf[], int off, int len)
        throws IOException
    {
        int off0 = off;
        for(; index < bufsize && len > 0; len--)
            buf[off++] = buffer[index++];

        if(index >= bufsize)
            bufsize = index = 0;
        int bsize = (len / 3) * 3;
        if(bsize > 0)
        {
            int size = decode(buf, off, bsize);
            off += size;
            len -= size;
            if(size != bsize)
                if(off == off0)
                    return -1;
                else
                    return off - off0;
        }
        do
        {
            if(len <= 0)
                break;
            int c = read();
            if(c == -1)
                break;
            buf[off++] = (byte)c;
            len--;
        } while(true);
        if(off == off0)
            return -1;
        else
            return off - off0;
    }

    public long skip(long n)
        throws IOException
    {
        long skipped;
        for(skipped = 0L; n-- > 0L && read() >= 0; skipped++);
        return skipped;
    }

    public boolean markSupported()
    {
        return false;
    }

    public int available()
        throws IOException
    {
        return (in.available() * 3) / 4 + (bufsize - index);
    }

    private int decode(byte outbuf[], int pos, int len)
        throws IOException
    {
        int pos0 = pos;
        while(len >= 3) 
        {
            int got = 0;
            int val;
            int i;
            for(val = 0; got < 4; val |= i)
            {
                i = getByte();
                if(i == -1 || i == -2)
                {
                    boolean atEOF;
                    if(i == -1)
                    {
                        if(got == 0)
                            return pos - pos0;
                        if(!ignoreErrors)
                            throw new DecodingException((new StringBuilder()).append("BASE64Decoder: Error in encoded stream: needed 4 valid base64 characters but only got ").append(got).append(" before EOF").append(recentChars()).toString());
                        atEOF = true;
                    } else
                    {
                        if(got < 2 && !ignoreErrors)
                            throw new DecodingException((new StringBuilder()).append("BASE64Decoder: Error in encoded stream: needed at least 2 valid base64 characters, but only got ").append(got).append(" before padding character (=)").append(recentChars()).toString());
                        if(got == 0)
                            return pos - pos0;
                        atEOF = false;
                    }
                    int size = got - 1;
                    if(size == 0)
                        size = 1;
                    got++;
                    val <<= 6;
                    for(; got < 4; got++)
                    {
                        if(!atEOF)
                        {
                            i = getByte();
                            if(i == -1)
                            {
                                if(!ignoreErrors)
                                    throw new DecodingException((new StringBuilder()).append("BASE64Decoder: Error in encoded stream: hit EOF while looking for padding characters (=)").append(recentChars()).toString());
                            } else
                            if(i != -2 && !ignoreErrors)
                                throw new DecodingException((new StringBuilder()).append("BASE64Decoder: Error in encoded stream: found valid base64 character after a padding character (=)").append(recentChars()).toString());
                        }
                        val <<= 6;
                    }

                    val >>= 8;
                    if(size == 2)
                        outbuf[pos + 1] = (byte)(val & 0xff);
                    val >>= 8;
                    outbuf[pos] = (byte)(val & 0xff);
                    pos += size;
                    return pos - pos0;
                }
                val <<= 6;
                got++;
            }

            outbuf[pos + 2] = (byte)(val & 0xff);
            val >>= 8;
            outbuf[pos + 1] = (byte)(val & 0xff);
            val >>= 8;
            outbuf[pos] = (byte)(val & 0xff);
            len -= 3;
            pos += 3;
        }
        return pos - pos0;
    }

    private int getByte()
        throws IOException
    {
        int c;
        do
        {
            if(input_pos >= input_len)
            {
                try
                {
                    input_len = in.read(input_buffer);
                }
                catch(EOFException ex)
                {
                    return -1;
                }
                if(input_len <= 0)
                    return -1;
                input_pos = 0;
            }
            c = input_buffer[input_pos++] & 0xff;
            if(c == 61)
                return -2;
            c = pem_convert_array[c];
        } while(c == -1);
        return c;
    }

    private String recentChars()
    {
        String errstr = "";
        int nc = input_pos <= 10 ? input_pos : 10;
        if(nc > 0)
        {
            errstr = (new StringBuilder()).append(errstr).append(", the ").append(nc).append(" most recent characters were: \"").toString();
            for(int k = input_pos - nc; k < input_pos; k++)
            {
                char c = (char)(input_buffer[k] & 0xff);
                switch(c)
                {
                case 13: // '\r'
                    errstr = (new StringBuilder()).append(errstr).append("\\r").toString();
                    break;

                case 10: // '\n'
                    errstr = (new StringBuilder()).append(errstr).append("\\n").toString();
                    break;

                case 9: // '\t'
                    errstr = (new StringBuilder()).append(errstr).append("\\t").toString();
                    break;

                case 11: // '\013'
                case 12: // '\f'
                default:
                    if(c >= ' ' && c < '\177')
                        errstr = (new StringBuilder()).append(errstr).append(c).toString();
                    else
                        errstr = (new StringBuilder()).append(errstr).append("\\").append(c).toString();
                    break;
                }
            }

            errstr = (new StringBuilder()).append(errstr).append("\"").toString();
        }
        return errstr;
    }

    public static byte[] decode(byte inbuf[])
    {
        int size = (inbuf.length / 4) * 3;
        if(size == 0)
            return inbuf;
        if(inbuf[inbuf.length - 1] == 61)
        {
            size--;
            if(inbuf[inbuf.length - 2] == 61)
                size--;
        }
        byte outbuf[] = new byte[size];
        int inpos = 0;
        int outpos = 0;
        for(size = inbuf.length; size > 0; size -= 4)
        {
            int osize = 3;
            int val = pem_convert_array[inbuf[inpos++] & 0xff];
            val <<= 6;
            val |= pem_convert_array[inbuf[inpos++] & 0xff];
            val <<= 6;
            if(inbuf[inpos] != 61)
                val |= pem_convert_array[inbuf[inpos++] & 0xff];
            else
                osize--;
            val <<= 6;
            if(inbuf[inpos] != 61)
                val |= pem_convert_array[inbuf[inpos++] & 0xff];
            else
                osize--;
            if(osize > 2)
                outbuf[outpos + 2] = (byte)(val & 0xff);
            val >>= 8;
            if(osize > 1)
                outbuf[outpos + 1] = (byte)(val & 0xff);
            val >>= 8;
            outbuf[outpos] = (byte)(val & 0xff);
            outpos += osize;
        }

        return outbuf;
    }

    private byte buffer[];
    private int bufsize;
    private int index;
    private byte input_buffer[];
    private int input_pos;
    private int input_len;
    private boolean ignoreErrors;
    private static final char pem_array[] = {
        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 
        'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 
        'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 
        'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 
        'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 
        'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', 
        '8', '9', '+', '/'
    };
    private static final byte pem_convert_array[];

    static 
    {
        pem_convert_array = new byte[256];
        for(int i = 0; i < 255; i++)
            pem_convert_array[i] = -1;

        for(int i = 0; i < pem_array.length; i++)
            pem_convert_array[pem_array[i]] = (byte)i;

    }
}
