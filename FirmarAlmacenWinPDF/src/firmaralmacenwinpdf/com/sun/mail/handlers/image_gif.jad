// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   image_gif.java

package com.sun.mail.handlers;

import java.awt.Image;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.io.*;
import javax.activation.*;

public class image_gif
    implements DataContentHandler
{

    public image_gif()
    {
    }

    protected ActivationDataFlavor getDF()
    {
        return myDF;
    }

    public DataFlavor[] getTransferDataFlavors()
    {
        return (new DataFlavor[] {
            getDF()
        });
    }

    public Object getTransferData(DataFlavor df, DataSource ds)
        throws IOException
    {
        if(getDF().equals(df))
            return getContent(ds);
        else
            return null;
    }

    public Object getContent(DataSource ds)
        throws IOException
    {
        InputStream is = ds.getInputStream();
        int pos = 0;
        byte buf[] = new byte[1024];
        do
        {
            int count;
            if((count = is.read(buf, pos, buf.length - pos)) == -1)
                break;
            pos += count;
            if(pos >= buf.length)
            {
                int size = buf.length;
                if(size < 0x40000)
                    size += size;
                else
                    size += 0x40000;
                byte tbuf[] = new byte[size];
                System.arraycopy(buf, 0, tbuf, 0, pos);
                buf = tbuf;
            }
        } while(true);
        Toolkit tk = Toolkit.getDefaultToolkit();
        return tk.createImage(buf, 0, pos);
    }

    public void writeTo(Object obj, String type, OutputStream os)
        throws IOException
    {
        if(!(obj instanceof Image))
            throw new IOException((new StringBuilder()).append("\"").append(getDF().getMimeType()).append("\" DataContentHandler requires Image object, ").append("was given object of type ").append(obj.getClass().toString()).toString());
        else
            throw new IOException((new StringBuilder()).append(getDF().getMimeType()).append(" encoding not supported").toString());
    }

    private static ActivationDataFlavor myDF = new ActivationDataFlavor(java/awt/Image, "image/gif", "GIF Image");

}
