// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   text_xml.java

package com.sun.mail.handlers;

import java.awt.datatransfer.DataFlavor;
import java.io.IOException;
import java.io.OutputStream;
import javax.activation.ActivationDataFlavor;
import javax.activation.DataSource;
import javax.mail.internet.ContentType;
import javax.xml.transform.*;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

// Referenced classes of package com.sun.mail.handlers:
//            text_plain

public class text_xml extends text_plain
{

    public text_xml()
    {
    }

    public DataFlavor[] getTransferDataFlavors()
    {
        return (DataFlavor[])(DataFlavor[])flavors.clone();
    }

    public Object getTransferData(DataFlavor df, DataSource ds)
        throws IOException
    {
        for(int i = 0; i < flavors.length; i++)
        {
            DataFlavor aFlavor = flavors[i];
            if(aFlavor.equals(df))
            {
                if(aFlavor.getRepresentationClass() == java/lang/String)
                    return super.getContent(ds);
                if(aFlavor.getRepresentationClass() == javax/xml/transform/stream/StreamSource)
                    return new StreamSource(ds.getInputStream());
                else
                    return null;
            }
        }

        return null;
    }

    public void writeTo(Object obj, String mimeType, OutputStream os)
        throws IOException
    {
        if(!isXmlType(mimeType))
            throw new IOException((new StringBuilder()).append("Invalid content type \"").append(mimeType).append("\" for text/xml DCH").toString());
        if(obj instanceof String)
        {
            super.writeTo(obj, mimeType, os);
            return;
        }
        if(!(obj instanceof DataSource) && !(obj instanceof Source))
            throw new IOException((new StringBuilder()).append("Invalid Object type = ").append(obj.getClass()).append(". XmlDCH can only convert DataSource or Source to XML.").toString());
        try
        {
            Transformer transformer = TransformerFactory.newInstance().newTransformer();
            StreamResult result = new StreamResult(os);
            if(obj instanceof DataSource)
                transformer.transform(new StreamSource(((DataSource)obj).getInputStream()), result);
            else
                transformer.transform((Source)obj, result);
        }
        catch(Exception ex)
        {
            throw new IOException((new StringBuilder()).append("Unable to run the JAXP transformer on a stream ").append(ex.getMessage()).toString());
        }
    }

    private boolean isXmlType(String type)
    {
        try
        {
            ContentType ct = new ContentType(type);
            return ct.getSubType().equals("xml") && (ct.getPrimaryType().equals("text") || ct.getPrimaryType().equals("application"));
        }
        catch(Exception ex)
        {
            return false;
        }
    }

    private final DataFlavor flavors[] = {
        new ActivationDataFlavor(java/lang/String, "text/xml", "XML String"), new ActivationDataFlavor(java/lang/String, "application/xml", "XML String"), new ActivationDataFlavor(javax/xml/transform/stream/StreamSource, "text/xml", "XML"), new ActivationDataFlavor(javax/xml/transform/stream/StreamSource, "application/xml", "XML")
    };
}
