// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Protocol.java

package com.sun.mail.pop3;

import com.sun.mail.util.*;
import java.io.*;
import java.net.Socket;
import java.net.SocketException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.*;
import java.util.logging.Level;
import javax.net.ssl.SSLSocket;

// Referenced classes of package com.sun.mail.pop3:
//            Status, Response

class Protocol
{

    Protocol(String host, int port, MailLogger logger, Properties props, String prefix, boolean isSSL)
        throws IOException
    {
        boolean enableAPOP;
        boolean disableCapa;
        apopChallenge = null;
        capabilities = null;
        noauthdebug = true;
        this.host = host;
        this.props = props;
        this.prefix = prefix;
        this.logger = logger;
        traceLogger = logger.getSubLogger("protocol", null);
        noauthdebug = !PropUtil.getBooleanProperty(props, "mail.debug.auth", false);
        enableAPOP = getBoolProp(props, (new StringBuilder()).append(prefix).append(".apop.enable").toString());
        disableCapa = getBoolProp(props, (new StringBuilder()).append(prefix).append(".disablecapa").toString());
        Response r;
        if(port == -1)
            port = 110;
        if(logger.isLoggable(Level.FINE))
            logger.fine((new StringBuilder()).append("connecting to host \"").append(host).append("\", port ").append(port).append(", isSSL ").append(isSSL).toString());
        socket = SocketFetcher.getSocket(host, port, props, prefix, isSSL);
        initStreams();
        r = simpleCommand(null);
        break MISSING_BLOCK_LABEL_234;
        IOException ioe;
        ioe;
        socket.close();
        throw ioe;
        Exception exception;
        exception;
        throw ioe;
        if(r.ok)
            break MISSING_BLOCK_LABEL_271;
        socket.close();
        throw new IOException("Connect failed");
        Exception exception1;
        exception1;
        throw new IOException("Connect failed");
        if(enableAPOP)
        {
            int challStart = r.data.indexOf('<');
            int challEnd = r.data.indexOf('>', challStart);
            if(challStart != -1 && challEnd != -1)
                apopChallenge = r.data.substring(challStart, challEnd + 1);
            logger.log(Level.FINE, "APOP challenge: {0}", apopChallenge);
        }
        if(!disableCapa)
            setCapabilities(capa());
        pipelining = hasCapability("PIPELINING") || PropUtil.getBooleanProperty(props, (new StringBuilder()).append(prefix).append(".pipelining").toString(), false);
        if(pipelining)
            logger.config("PIPELINING enabled");
        return;
    }

    private final synchronized boolean getBoolProp(Properties props, String prop)
    {
        boolean val = PropUtil.getBooleanProperty(props, prop, false);
        if(logger.isLoggable(Level.CONFIG))
            logger.config((new StringBuilder()).append(prop).append(": ").append(val).toString());
        return val;
    }

    private void initStreams()
        throws IOException
    {
        boolean quote = PropUtil.getBooleanProperty(props, "mail.debug.quote", false);
        traceInput = new TraceInputStream(socket.getInputStream(), traceLogger);
        traceInput.setQuote(quote);
        traceOutput = new TraceOutputStream(socket.getOutputStream(), traceLogger);
        traceOutput.setQuote(quote);
        input = new DataInputStream(new BufferedInputStream(traceInput));
        output = new PrintWriter(new BufferedWriter(new OutputStreamWriter(traceOutput, "iso-8859-1")));
    }

    protected void finalize()
        throws Throwable
    {
        super.finalize();
        if(socket != null)
            quit();
    }

    synchronized void setCapabilities(InputStream in)
    {
        BufferedReader r;
        if(in == null)
        {
            capabilities = null;
            return;
        }
        capabilities = new HashMap(10);
        r = null;
        try
        {
            r = new BufferedReader(new InputStreamReader(in, "us-ascii"));
        }
        catch(UnsupportedEncodingException ex)
        {
            if(!$assertionsDisabled)
                throw new AssertionError();
        }
        String s;
        try
        {
            while((s = r.readLine()) != null) 
            {
                String cap = s;
                int i = cap.indexOf(' ');
                if(i > 0)
                    cap = cap.substring(0, i);
                capabilities.put(cap.toUpperCase(Locale.ENGLISH), s);
            }
        }
        catch(IOException ex)
        {
            try
            {
                in.close();
            }
            // Misplaced declaration of an exception variable
            catch(IOException ex) { }
            break MISSING_BLOCK_LABEL_159;
        }
        try
        {
            in.close();
        }
        catch(IOException ex) { }
        break MISSING_BLOCK_LABEL_159;
        Exception exception;
        exception;
        try
        {
            in.close();
        }
        catch(IOException ex) { }
        throw exception;
    }

    synchronized boolean hasCapability(String c)
    {
        return capabilities != null && capabilities.containsKey(c.toUpperCase(Locale.ENGLISH));
    }

    synchronized Map getCapabilities()
    {
        return capabilities;
    }

    synchronized String login(String user, String password)
        throws IOException
    {
        boolean batch = pipelining && (socket instanceof SSLSocket);
        Response r;
        String s1;
        if(noauthdebug && isTracing())
        {
            logger.fine("authentication command trace suppressed");
            suspendTracing();
        }
        String dpw = null;
        if(apopChallenge != null)
            dpw = getDigest(password);
        if(apopChallenge != null && dpw != null)
        {
            r = simpleCommand((new StringBuilder()).append("APOP ").append(user).append(" ").append(dpw).toString());
            break MISSING_BLOCK_LABEL_330;
        }
        if(!batch)
            break MISSING_BLOCK_LABEL_250;
        String cmd = (new StringBuilder()).append("USER ").append(user).toString();
        batchCommandStart(cmd);
        issueCommand(cmd);
        cmd = (new StringBuilder()).append("PASS ").append(password).toString();
        batchCommandContinue(cmd);
        issueCommand(cmd);
        r = readResponse();
        if(r.ok)
            break MISSING_BLOCK_LABEL_238;
        String err = r.data == null ? "USER command failed" : r.data;
        r = readResponse();
        batchCommandEnd();
        s1 = err;
        resumeTracing();
        return s1;
        r = readResponse();
        batchCommandEnd();
        break MISSING_BLOCK_LABEL_330;
        String s;
        r = simpleCommand((new StringBuilder()).append("USER ").append(user).toString());
        if(r.ok)
            break MISSING_BLOCK_LABEL_306;
        s = r.data == null ? "USER command failed" : r.data;
        resumeTracing();
        return s;
        r = simpleCommand((new StringBuilder()).append("PASS ").append(password).toString());
        if(noauthdebug && isTracing())
            logger.log(Level.FINE, "authentication command {0}", r.ok ? "succeeded" : "failed");
        if(r.ok)
            break MISSING_BLOCK_LABEL_402;
        s = r.data == null ? "login failed" : r.data;
        resumeTracing();
        return s;
        s = null;
        resumeTracing();
        return s;
        Exception exception;
        exception;
        resumeTracing();
        throw exception;
    }

    private String getDigest(String password)
    {
        String key = (new StringBuilder()).append(apopChallenge).append(password).toString();
        byte digest[];
        try
        {
            MessageDigest md = MessageDigest.getInstance("MD5");
            digest = md.digest(key.getBytes("iso-8859-1"));
        }
        catch(NoSuchAlgorithmException nsae)
        {
            return null;
        }
        catch(UnsupportedEncodingException uee)
        {
            return null;
        }
        return toHex(digest);
    }

    private static String toHex(byte bytes[])
    {
        char result[] = new char[bytes.length * 2];
        int index = 0;
        int i = 0;
        for(; index < bytes.length; index++)
        {
            int temp = bytes[index] & 0xff;
            result[i++] = digits[temp >> 4];
            result[i++] = digits[temp & 0xf];
        }

        return new String(result);
    }

    synchronized boolean quit()
        throws IOException
    {
        boolean ok = false;
        Response r = simpleCommand("QUIT");
        ok = r.ok;
        socket.close();
        socket = null;
        input = null;
        output = null;
        break MISSING_BLOCK_LABEL_110;
        Exception exception;
        exception;
        socket = null;
        input = null;
        output = null;
        throw exception;
        Exception exception1;
        exception1;
        socket.close();
        socket = null;
        input = null;
        output = null;
        break MISSING_BLOCK_LABEL_107;
        Exception exception2;
        exception2;
        socket = null;
        input = null;
        output = null;
        throw exception2;
        throw exception1;
        return ok;
    }

    synchronized Status stat()
        throws IOException
    {
        Response r = simpleCommand("STAT");
        Status s = new Status();
        if(!r.ok)
            throw new IOException((new StringBuilder()).append("STAT command failed: ").append(r.data).toString());
        if(r.data != null)
            try
            {
                StringTokenizer st = new StringTokenizer(r.data);
                s.total = Integer.parseInt(st.nextToken());
                s.size = Integer.parseInt(st.nextToken());
            }
            catch(Exception e) { }
        return s;
    }

    synchronized int list(int msg)
        throws IOException
    {
        Response r = simpleCommand((new StringBuilder()).append("LIST ").append(msg).toString());
        int size = -1;
        if(r.ok && r.data != null)
            try
            {
                StringTokenizer st = new StringTokenizer(r.data);
                st.nextToken();
                size = Integer.parseInt(st.nextToken());
            }
            catch(Exception e) { }
        return size;
    }

    synchronized InputStream list()
        throws IOException
    {
        Response r = multilineCommand("LIST", 128);
        return r.bytes;
    }

    synchronized InputStream retr(int msg, int size)
        throws IOException
    {
        boolean batch = size == 0 && pipelining;
        Response r;
        if(batch)
        {
            String cmd = (new StringBuilder()).append("LIST ").append(msg).toString();
            batchCommandStart(cmd);
            issueCommand(cmd);
            cmd = (new StringBuilder()).append("RETR ").append(msg).toString();
            batchCommandContinue(cmd);
            issueCommand(cmd);
            r = readResponse();
            if(r.ok && r.data != null)
                try
                {
                    StringTokenizer st = new StringTokenizer(r.data);
                    st.nextToken();
                    size = Integer.parseInt(st.nextToken());
                    if(size > 0x40000000 || size < 0)
                    {
                        size = 0;
                    } else
                    {
                        if(logger.isLoggable(Level.FINE))
                            logger.fine((new StringBuilder()).append("pipeline message size ").append(size).toString());
                        size += 128;
                    }
                }
                catch(Exception e) { }
            r = readResponse();
            if(r.ok)
                r.bytes = readMultilineResponse(size + 128);
            batchCommandEnd();
        } else
        {
            String cmd = (new StringBuilder()).append("RETR ").append(msg).toString();
            multilineCommandStart(cmd);
            issueCommand(cmd);
            r = readResponse();
            if(!r.ok)
            {
                multilineCommandEnd();
                return null;
            }
            if(size <= 0 && r.data != null)
                try
                {
                    StringTokenizer st = new StringTokenizer(r.data);
                    String s = st.nextToken();
                    String octets = st.nextToken();
                    if(octets.equals("octets"))
                    {
                        size = Integer.parseInt(s);
                        if(size > 0x40000000 || size < 0)
                        {
                            size = 0;
                        } else
                        {
                            if(logger.isLoggable(Level.FINE))
                                logger.fine((new StringBuilder()).append("guessing message size: ").append(size).toString());
                            size += 128;
                        }
                    }
                }
                catch(Exception e) { }
            r.bytes = readMultilineResponse(size);
            multilineCommandEnd();
        }
        if(r.ok && size > 0 && logger.isLoggable(Level.FINE))
            logger.fine((new StringBuilder()).append("got message size ").append(r.bytes.available()).toString());
        return r.bytes;
    }

    synchronized boolean retr(int msg, OutputStream os)
        throws IOException
    {
        String cmd = (new StringBuilder()).append("RETR ").append(msg).toString();
        multilineCommandStart(cmd);
        issueCommand(cmd);
        Response r = readResponse();
        if(!r.ok)
        {
            multilineCommandEnd();
            return false;
        }
        Throwable terr = null;
        int lastb = 10;
        int b;
        try
        {
            do
            {
                if((b = input.read()) < 0)
                    break;
                if(lastb == 10 && b == 46)
                {
                    b = input.read();
                    if(b == 13)
                    {
                        b = input.read();
                        break;
                    }
                }
                if(terr == null)
                    try
                    {
                        os.write(b);
                    }
                    catch(IOException ex)
                    {
                        logger.log(Level.FINE, "exception while streaming", ex);
                        terr = ex;
                    }
                    catch(RuntimeException ex)
                    {
                        logger.log(Level.FINE, "exception while streaming", ex);
                        terr = ex;
                    }
                lastb = b;
            } while(true);
        }
        catch(InterruptedIOException iioex)
        {
            try
            {
                socket.close();
            }
            catch(IOException cex) { }
            throw iioex;
        }
        if(b < 0)
            throw new EOFException("EOF on socket");
        if(terr != null)
        {
            if(terr instanceof IOException)
                throw (IOException)terr;
            if(terr instanceof RuntimeException)
                throw (RuntimeException)terr;
            if(!$assertionsDisabled)
                throw new AssertionError();
        }
        multilineCommandEnd();
        return true;
    }

    synchronized InputStream top(int msg, int n)
        throws IOException
    {
        Response r = multilineCommand((new StringBuilder()).append("TOP ").append(msg).append(" ").append(n).toString(), 0);
        return r.bytes;
    }

    synchronized boolean dele(int msg)
        throws IOException
    {
        Response r = simpleCommand((new StringBuilder()).append("DELE ").append(msg).toString());
        return r.ok;
    }

    synchronized String uidl(int msg)
        throws IOException
    {
        Response r = simpleCommand((new StringBuilder()).append("UIDL ").append(msg).toString());
        if(!r.ok)
            return null;
        int i = r.data.indexOf(' ');
        if(i > 0)
            return r.data.substring(i + 1);
        else
            return null;
    }

    synchronized boolean uidl(String uids[])
        throws IOException
    {
        Response r = multilineCommand("UIDL", 15 * uids.length);
        if(!r.ok)
            return false;
        LineInputStream lis = new LineInputStream(r.bytes);
        String line = null;
        do
        {
            if((line = lis.readLine()) == null)
                break;
            int i = line.indexOf(' ');
            if(i >= 1 && i < line.length())
            {
                int n = Integer.parseInt(line.substring(0, i));
                if(n > 0 && n <= uids.length)
                    uids[n - 1] = line.substring(i + 1);
            }
        } while(true);
        try
        {
            r.bytes.close();
        }
        catch(IOException ex) { }
        return true;
    }

    synchronized boolean noop()
        throws IOException
    {
        Response r = simpleCommand("NOOP");
        return r.ok;
    }

    synchronized boolean rset()
        throws IOException
    {
        Response r = simpleCommand("RSET");
        return r.ok;
    }

    synchronized boolean stls()
        throws IOException
    {
        Response r;
        if(socket instanceof SSLSocket)
            return true;
        r = simpleCommand("STLS");
        if(!r.ok)
            break MISSING_BLOCK_LABEL_118;
        socket = SocketFetcher.startTLS(socket, host, props, prefix);
        initStreams();
        break MISSING_BLOCK_LABEL_118;
        IOException ioex;
        ioex;
        socket.close();
        socket = null;
        input = null;
        output = null;
        break MISSING_BLOCK_LABEL_100;
        Exception exception;
        exception;
        socket = null;
        input = null;
        output = null;
        throw exception;
        IOException sioex = new IOException("Could not convert socket to TLS");
        sioex.initCause(ioex);
        throw sioex;
        return r.ok;
    }

    synchronized boolean isSSL()
    {
        return socket instanceof SSLSocket;
    }

    synchronized InputStream capa()
        throws IOException
    {
        Response r = multilineCommand("CAPA", 128);
        if(!r.ok)
            return null;
        else
            return r.bytes;
    }

    private Response simpleCommand(String cmd)
        throws IOException
    {
        simpleCommandStart(cmd);
        issueCommand(cmd);
        Response r = readResponse();
        simpleCommandEnd();
        return r;
    }

    private void issueCommand(String cmd)
        throws IOException
    {
        if(socket == null)
            throw new IOException("Folder is closed");
        if(cmd != null)
        {
            cmd = (new StringBuilder()).append(cmd).append("\r\n").toString();
            output.print(cmd);
            output.flush();
        }
    }

    private Response readResponse()
        throws IOException
    {
        String line = null;
        try
        {
            line = input.readLine();
        }
        catch(InterruptedIOException iioex)
        {
            try
            {
                socket.close();
            }
            catch(IOException cex) { }
            throw new EOFException(iioex.getMessage());
        }
        catch(SocketException ex)
        {
            try
            {
                socket.close();
            }
            catch(IOException cex) { }
            throw new EOFException(ex.getMessage());
        }
        if(line == null)
        {
            traceLogger.finest("<EOF>");
            throw new EOFException("EOF on socket");
        }
        Response r = new Response();
        if(line.startsWith("+OK"))
            r.ok = true;
        else
        if(line.startsWith("-ERR"))
            r.ok = false;
        else
            throw new IOException((new StringBuilder()).append("Unexpected response: ").append(line).toString());
        int i;
        if((i = line.indexOf(' ')) >= 0)
            r.data = line.substring(i + 1);
        return r;
    }

    private Response multilineCommand(String cmd, int size)
        throws IOException
    {
        multilineCommandStart(cmd);
        issueCommand(cmd);
        Response r = readResponse();
        if(!r.ok)
        {
            multilineCommandEnd();
            return r;
        } else
        {
            r.bytes = readMultilineResponse(size);
            multilineCommandEnd();
            return r;
        }
    }

    private InputStream readMultilineResponse(int size)
        throws IOException
    {
        SharedByteArrayOutputStream buf = new SharedByteArrayOutputStream(size);
        int lastb = 10;
        int b;
        try
        {
            do
            {
                if((b = input.read()) < 0)
                    break;
                if(lastb == 10 && b == 46)
                {
                    b = input.read();
                    if(b == 13)
                    {
                        b = input.read();
                        break;
                    }
                }
                buf.write(b);
                lastb = b;
            } while(true);
        }
        catch(InterruptedIOException iioex)
        {
            try
            {
                socket.close();
            }
            catch(IOException cex) { }
            throw iioex;
        }
        if(b < 0)
            throw new EOFException("EOF on socket");
        else
            return buf.toStream();
    }

    protected boolean isTracing()
    {
        return traceLogger.isLoggable(Level.FINEST);
    }

    private void suspendTracing()
    {
        if(traceLogger.isLoggable(Level.FINEST))
        {
            traceInput.setTrace(false);
            traceOutput.setTrace(false);
        }
    }

    private void resumeTracing()
    {
        if(traceLogger.isLoggable(Level.FINEST))
        {
            traceInput.setTrace(true);
            traceOutput.setTrace(true);
        }
    }

    private void simpleCommandStart(String s)
    {
    }

    private void simpleCommandEnd()
    {
    }

    private void multilineCommandStart(String s)
    {
    }

    private void multilineCommandEnd()
    {
    }

    private void batchCommandStart(String s)
    {
    }

    private void batchCommandContinue(String s)
    {
    }

    private void batchCommandEnd()
    {
    }

    private Socket socket;
    private String host;
    private Properties props;
    private String prefix;
    private DataInputStream input;
    private PrintWriter output;
    private TraceInputStream traceInput;
    private TraceOutputStream traceOutput;
    private MailLogger logger;
    private MailLogger traceLogger;
    private String apopChallenge;
    private Map capabilities;
    private boolean pipelining;
    private boolean noauthdebug;
    private boolean traceSuspended;
    private static final int POP3_PORT = 110;
    private static final String CRLF = "\r\n";
    private static final int SLOP = 128;
    private static char digits[] = {
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 
        'a', 'b', 'c', 'd', 'e', 'f'
    };
    static final boolean $assertionsDisabled = !com/sun/mail/pop3/Protocol.desiredAssertionStatus();

}
