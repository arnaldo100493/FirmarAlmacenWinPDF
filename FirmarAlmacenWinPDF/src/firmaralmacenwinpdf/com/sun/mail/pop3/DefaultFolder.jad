// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   DefaultFolder.java

package com.sun.mail.pop3;

import javax.mail.*;

// Referenced classes of package com.sun.mail.pop3:
//            POP3Store

public class DefaultFolder extends Folder
{

    DefaultFolder(POP3Store store)
    {
        super(store);
    }

    public String getName()
    {
        return "";
    }

    public String getFullName()
    {
        return "";
    }

    public Folder getParent()
    {
        return null;
    }

    public boolean exists()
    {
        return true;
    }

    public Folder[] list(String pattern)
        throws MessagingException
    {
        Folder f[] = {
            getInbox()
        };
        return f;
    }

    public char getSeparator()
    {
        return '/';
    }

    public int getType()
    {
        return 2;
    }

    public boolean create(int type)
        throws MessagingException
    {
        return false;
    }

    public boolean hasNewMessages()
        throws MessagingException
    {
        return false;
    }

    public Folder getFolder(String name)
        throws MessagingException
    {
        if(!name.equalsIgnoreCase("INBOX"))
            throw new MessagingException("only INBOX supported");
        else
            return getInbox();
    }

    protected Folder getInbox()
        throws MessagingException
    {
        return getStore().getFolder("INBOX");
    }

    public boolean delete(boolean recurse)
        throws MessagingException
    {
        throw new MethodNotSupportedException("delete");
    }

    public boolean renameTo(Folder f)
        throws MessagingException
    {
        throw new MethodNotSupportedException("renameTo");
    }

    public void open(int mode)
        throws MessagingException
    {
        throw new MethodNotSupportedException("open");
    }

    public void close(boolean expunge)
        throws MessagingException
    {
        throw new MethodNotSupportedException("close");
    }

    public boolean isOpen()
    {
        return false;
    }

    public Flags getPermanentFlags()
    {
        return new Flags();
    }

    public int getMessageCount()
        throws MessagingException
    {
        return 0;
    }

    public Message getMessage(int msgno)
        throws MessagingException
    {
        throw new MethodNotSupportedException("getMessage");
    }

    public void appendMessages(Message msgs[])
        throws MessagingException
    {
        throw new MethodNotSupportedException("Append not supported");
    }

    public Message[] expunge()
        throws MessagingException
    {
        throw new MethodNotSupportedException("expunge");
    }
}
