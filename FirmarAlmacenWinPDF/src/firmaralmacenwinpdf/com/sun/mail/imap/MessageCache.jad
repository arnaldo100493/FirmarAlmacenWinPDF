// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   MessageCache.java

package com.sun.mail.imap;

import com.sun.mail.util.MailLogger;
import java.util.*;
import java.util.logging.Level;
import javax.mail.Message;

// Referenced classes of package com.sun.mail.imap:
//            IMAPMessage, IMAPFolder, IMAPStore

public class MessageCache
{

    MessageCache(IMAPFolder folder, IMAPStore store, int size)
    {
        this.folder = folder;
        logger = folder.logger.getSubLogger("messagecache", "DEBUG IMAP MC", store.getMessageCacheDebug());
        if(logger.isLoggable(Level.CONFIG))
            logger.config((new StringBuilder()).append("create cache of size ").append(size).toString());
        ensureCapacity(size, 1);
    }

    MessageCache(int size, boolean debug)
    {
        folder = null;
        logger = new MailLogger(getClass(), "messagecache", "DEBUG IMAP MC", debug, System.out);
        if(logger.isLoggable(Level.CONFIG))
            logger.config((new StringBuilder()).append("create DEBUG cache of size ").append(size).toString());
        ensureCapacity(size, 1);
    }

    public int size()
    {
        return size;
    }

    public IMAPMessage getMessage(int msgnum)
    {
        if(msgnum < 1 || msgnum > size)
            throw new ArrayIndexOutOfBoundsException((new StringBuilder()).append("message number (").append(msgnum).append(") out of bounds (").append(size).append(")").toString());
        IMAPMessage msg = messages[msgnum - 1];
        if(msg == null)
        {
            if(logger.isLoggable(Level.FINE))
                logger.fine((new StringBuilder()).append("create message number ").append(msgnum).toString());
            msg = folder.newIMAPMessage(msgnum);
            messages[msgnum - 1] = msg;
            if(seqnumOf(msgnum) <= 0)
            {
                logger.fine("it's expunged!");
                msg.setExpunged(true);
            }
        }
        return msg;
    }

    public IMAPMessage getMessageBySeqnum(int seqnum)
    {
        int msgnum = msgnumOf(seqnum);
        if(msgnum < 0)
        {
            if(logger.isLoggable(Level.FINE))
                logger.fine((new StringBuilder()).append("no message seqnum ").append(seqnum).toString());
            return null;
        } else
        {
            return getMessage(msgnum);
        }
    }

    public void expungeMessage(int seqnum)
    {
        int msgnum = msgnumOf(seqnum);
        if(msgnum < 0)
        {
            if(logger.isLoggable(Level.FINE))
                logger.fine((new StringBuilder()).append("expunge no seqnum ").append(seqnum).toString());
            return;
        }
        IMAPMessage msg = messages[msgnum - 1];
        if(msg != null)
        {
            if(logger.isLoggable(Level.FINE))
                logger.fine((new StringBuilder()).append("expunge existing ").append(msgnum).toString());
            msg.setExpunged(true);
        }
        if(seqnums == null)
        {
            logger.fine("create seqnums array");
            seqnums = new int[messages.length];
            for(int i = 1; i < msgnum; i++)
                seqnums[i - 1] = i;

            seqnums[msgnum - 1] = 0;
            for(int i = msgnum + 1; i <= seqnums.length; i++)
                seqnums[i - 1] = i - 1;

        } else
        {
            seqnums[msgnum - 1] = 0;
            for(int i = msgnum + 1; i <= seqnums.length; i++)
            {
                if(!$assertionsDisabled && seqnums[i - 1] == 1)
                    throw new AssertionError();
                if(seqnums[i - 1] > 0)
                    seqnums[i - 1]--;
            }

        }
    }

    public IMAPMessage[] removeExpungedMessages()
    {
        logger.fine("remove expunged messages");
        List mlist = new ArrayList();
        int oldnum = 1;
        int newnum = 1;
        for(; oldnum <= size; oldnum++)
        {
            if(seqnumOf(oldnum) <= 0)
            {
                IMAPMessage m = getMessage(oldnum);
                mlist.add(m);
                continue;
            }
            if(newnum != oldnum)
            {
                messages[newnum - 1] = messages[oldnum - 1];
                if(messages[newnum - 1] != null)
                    messages[newnum - 1].setMessageNumber(newnum);
            }
            newnum++;
        }

        seqnums = null;
        shrink(newnum, oldnum);
        IMAPMessage rmsgs[] = new IMAPMessage[mlist.size()];
        if(logger.isLoggable(Level.FINE))
            logger.fine((new StringBuilder()).append("return ").append(rmsgs.length).toString());
        mlist.toArray(rmsgs);
        return rmsgs;
    }

    public IMAPMessage[] removeExpungedMessages(Message msgs[])
    {
        logger.fine("remove expunged messages");
        List mlist = new ArrayList();
        int mnum[] = new int[msgs.length];
        for(int i = 0; i < msgs.length; i++)
            mnum[i] = msgs[i].getMessageNumber();

        Arrays.sort(mnum);
        int oldnum = 1;
        int newnum = 1;
        int mnumi = 0;
        boolean keepSeqnums = false;
        for(; oldnum <= size; oldnum++)
        {
            if(mnumi < mnum.length && oldnum == mnum[mnumi] && seqnumOf(oldnum) <= 0)
            {
                IMAPMessage m = getMessage(oldnum);
                mlist.add(m);
                for(; mnumi < mnum.length && mnum[mnumi] <= oldnum; mnumi++);
                continue;
            }
            if(newnum != oldnum)
            {
                messages[newnum - 1] = messages[oldnum - 1];
                if(messages[newnum - 1] != null)
                    messages[newnum - 1].setMessageNumber(newnum);
                if(seqnums != null)
                    seqnums[newnum - 1] = seqnums[oldnum - 1];
            }
            if(seqnums != null && seqnums[newnum - 1] != newnum)
                keepSeqnums = true;
            newnum++;
        }

        if(!keepSeqnums)
            seqnums = null;
        shrink(newnum, oldnum);
        IMAPMessage rmsgs[] = new IMAPMessage[mlist.size()];
        if(logger.isLoggable(Level.FINE))
            logger.fine((new StringBuilder()).append("return ").append(rmsgs.length).toString());
        mlist.toArray(rmsgs);
        return rmsgs;
    }

    private void shrink(int newend, int oldend)
    {
        size = newend - 1;
        if(logger.isLoggable(Level.FINE))
            logger.fine((new StringBuilder()).append("size now ").append(size).toString());
        if(size == 0)
        {
            messages = null;
            seqnums = null;
        } else
        if(size > 64 && size < messages.length / 2)
        {
            logger.fine("reallocate array");
            IMAPMessage newm[] = new IMAPMessage[size + 64];
            System.arraycopy(messages, 0, newm, 0, size);
            messages = newm;
            if(seqnums != null)
            {
                int news[] = new int[size + 64];
                System.arraycopy(seqnums, 0, news, 0, size);
                seqnums = news;
            }
        } else
        {
            if(logger.isLoggable(Level.FINE))
                logger.fine((new StringBuilder()).append("clean ").append(newend).append(" to ").append(oldend).toString());
            for(int msgnum = newend; msgnum < oldend; msgnum++)
            {
                messages[msgnum - 1] = null;
                if(seqnums != null)
                    seqnums[msgnum - 1] = 0;
            }

        }
    }

    public void addMessages(int count, int newSeqNum)
    {
        if(logger.isLoggable(Level.FINE))
            logger.fine((new StringBuilder()).append("add ").append(count).append(" messages").toString());
        ensureCapacity(size + count, newSeqNum);
    }

    private void ensureCapacity(int newsize, int newSeqNum)
    {
        if(messages == null)
            messages = new IMAPMessage[newsize + 64];
        else
        if(messages.length < newsize)
        {
            if(logger.isLoggable(Level.FINE))
                logger.fine((new StringBuilder()).append("expand capacity to ").append(newsize).toString());
            IMAPMessage newm[] = new IMAPMessage[newsize + 64];
            System.arraycopy(messages, 0, newm, 0, messages.length);
            messages = newm;
            if(seqnums != null)
            {
                int news[] = new int[newsize + 64];
                System.arraycopy(seqnums, 0, news, 0, seqnums.length);
                for(int i = size; i < news.length; i++)
                    news[i] = newSeqNum++;

                seqnums = news;
                if(logger.isLoggable(Level.FINE))
                    logger.fine((new StringBuilder()).append("message ").append(newsize).append(" has sequence number ").append(seqnums[newsize - 1]).toString());
            }
        } else
        if(newsize < size)
        {
            if(logger.isLoggable(Level.FINE))
                logger.fine((new StringBuilder()).append("shrink capacity to ").append(newsize).toString());
            for(int msgnum = newsize + 1; msgnum <= size; msgnum++)
            {
                messages[msgnum - 1] = null;
                if(seqnums != null)
                    seqnums[msgnum - 1] = -1;
            }

        }
        size = newsize;
    }

    public int seqnumOf(int msgnum)
    {
        if(seqnums == null)
            return msgnum;
        if(logger.isLoggable(Level.FINE))
            logger.fine((new StringBuilder()).append("msgnum ").append(msgnum).append(" is seqnum ").append(seqnums[msgnum - 1]).toString());
        return seqnums[msgnum - 1];
    }

    private int msgnumOf(int seqnum)
    {
        if(seqnums == null)
            return seqnum;
        if(seqnum < 1)
        {
            if(logger.isLoggable(Level.FINE))
                logger.fine((new StringBuilder()).append("bad seqnum ").append(seqnum).toString());
            return -1;
        }
        int msgnum = seqnum;
        do
        {
            if(msgnum > size)
                break;
            if(seqnums[msgnum - 1] == seqnum)
                return msgnum;
            if(seqnums[msgnum - 1] > seqnum)
                break;
            msgnum++;
        } while(true);
        return -1;
    }

    private IMAPMessage messages[];
    private int seqnums[];
    private int size;
    private IMAPFolder folder;
    private MailLogger logger;
    private static final int SLOP = 64;
    static final boolean $assertionsDisabled = !com/sun/mail/imap/MessageCache.desiredAssertionStatus();

}
