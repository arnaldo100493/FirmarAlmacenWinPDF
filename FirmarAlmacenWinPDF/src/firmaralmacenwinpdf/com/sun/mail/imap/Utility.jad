// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Utility.java

package com.sun.mail.imap;

import com.sun.mail.imap.protocol.MessageSet;
import com.sun.mail.imap.protocol.UIDSet;
import java.util.Vector;
import javax.mail.Message;

// Referenced classes of package com.sun.mail.imap:
//            IMAPMessage

public final class Utility
{
    public static interface Condition
    {

        public abstract boolean test(IMAPMessage imapmessage);
    }


    private Utility()
    {
    }

    public static MessageSet[] toMessageSet(Message msgs[], Condition cond)
    {
        Vector v = new Vector(1);
        for(int i = 0; i < msgs.length; i++)
        {
            IMAPMessage msg = (IMAPMessage)msgs[i];
            if(msg.isExpunged())
                continue;
            int current = msg.getSequenceNumber();
            if(cond != null && !cond.test(msg))
                continue;
            MessageSet set = new MessageSet();
            set.start = current;
            for(i++; i < msgs.length; i++)
            {
                msg = (IMAPMessage)msgs[i];
                if(msg.isExpunged())
                    continue;
                int next = msg.getSequenceNumber();
                if(cond != null && !cond.test(msg))
                    continue;
                if(next == current + 1)
                {
                    current = next;
                    continue;
                }
                i--;
                break;
            }

            set.end = current;
            v.addElement(set);
        }

        if(v.isEmpty())
        {
            return null;
        } else
        {
            MessageSet sets[] = new MessageSet[v.size()];
            v.copyInto(sets);
            return sets;
        }
    }

    public static UIDSet[] toUIDSet(Message msgs[])
    {
        Vector v = new Vector(1);
        for(int i = 0; i < msgs.length; i++)
        {
            IMAPMessage msg = (IMAPMessage)msgs[i];
            if(msg.isExpunged())
                continue;
            long current = msg.getUID();
            UIDSet set = new UIDSet();
            set.start = current;
            for(i++; i < msgs.length; i++)
            {
                msg = (IMAPMessage)msgs[i];
                if(msg.isExpunged())
                    continue;
                long next = msg.getUID();
                if(next == current + 1L)
                {
                    current = next;
                    continue;
                }
                i--;
                break;
            }

            set.end = current;
            v.addElement(set);
        }

        if(v.isEmpty())
        {
            return null;
        } else
        {
            UIDSet sets[] = new UIDSet[v.size()];
            v.copyInto(sets);
            return sets;
        }
    }
}
