// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   DefaultFolder.java

package com.sun.mail.imap;

import com.sun.mail.iap.ProtocolException;
import com.sun.mail.imap.protocol.IMAPProtocol;
import javax.mail.*;

// Referenced classes of package com.sun.mail.imap:
//            IMAPFolder, IMAPStore

public class DefaultFolder extends IMAPFolder
{

    protected DefaultFolder(IMAPStore store)
    {
        super("", '\uFFFF', store, null);
        exists = true;
        type = 2;
    }

    public synchronized String getName()
    {
        return fullName;
    }

    public Folder getParent()
    {
        return null;
    }

    public synchronized Folder[] list(final String pattern)
        throws MessagingException
    {
        com.sun.mail.imap.protocol.ListInfo li[] = null;
        li = (com.sun.mail.imap.protocol.ListInfo[])(com.sun.mail.imap.protocol.ListInfo[])doCommand(new IMAPFolder.ProtocolCommand() {

            public Object doCommand(IMAPProtocol p)
                throws ProtocolException
            {
                return p.list("", pattern);
            }

            final String val$pattern;
            final DefaultFolder this$0;

            
            {
                this$0 = DefaultFolder.this;
                pattern = s;
                super();
            }
        }
);
        if(li == null)
            return new Folder[0];
        IMAPFolder folders[] = new IMAPFolder[li.length];
        for(int i = 0; i < folders.length; i++)
            folders[i] = ((IMAPStore)store).newIMAPFolder(li[i]);

        return folders;
    }

    public synchronized Folder[] listSubscribed(final String pattern)
        throws MessagingException
    {
        com.sun.mail.imap.protocol.ListInfo li[] = null;
        li = (com.sun.mail.imap.protocol.ListInfo[])(com.sun.mail.imap.protocol.ListInfo[])doCommand(new IMAPFolder.ProtocolCommand() {

            public Object doCommand(IMAPProtocol p)
                throws ProtocolException
            {
                return p.lsub("", pattern);
            }

            final String val$pattern;
            final DefaultFolder this$0;

            
            {
                this$0 = DefaultFolder.this;
                pattern = s;
                super();
            }
        }
);
        if(li == null)
            return new Folder[0];
        IMAPFolder folders[] = new IMAPFolder[li.length];
        for(int i = 0; i < folders.length; i++)
            folders[i] = ((IMAPStore)store).newIMAPFolder(li[i]);

        return folders;
    }

    public boolean hasNewMessages()
        throws MessagingException
    {
        return false;
    }

    public Folder getFolder(String name)
        throws MessagingException
    {
        return ((IMAPStore)store).newIMAPFolder(name, '\uFFFF');
    }

    public boolean delete(boolean recurse)
        throws MessagingException
    {
        throw new MethodNotSupportedException("Cannot delete Default Folder");
    }

    public boolean renameTo(Folder f)
        throws MessagingException
    {
        throw new MethodNotSupportedException("Cannot rename Default Folder");
    }

    public void appendMessages(Message msgs[])
        throws MessagingException
    {
        throw new MethodNotSupportedException("Cannot append to Default Folder");
    }

    public Message[] expunge()
        throws MessagingException
    {
        throw new MethodNotSupportedException("Cannot expunge Default Folder");
    }
}
