// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   SearchSequence.java

package com.sun.mail.imap.protocol;

import com.sun.mail.iap.Argument;
import java.io.IOException;
import java.util.*;
import javax.mail.*;
import javax.mail.search.*;

public class SearchSequence
{

    public SearchSequence()
    {
        cal = new GregorianCalendar();
    }

    public Argument generateSequence(SearchTerm term, String charset)
        throws SearchException, IOException
    {
        if(term instanceof AndTerm)
            return and((AndTerm)term, charset);
        if(term instanceof OrTerm)
            return or((OrTerm)term, charset);
        if(term instanceof NotTerm)
            return not((NotTerm)term, charset);
        if(term instanceof HeaderTerm)
            return header((HeaderTerm)term, charset);
        if(term instanceof FlagTerm)
            return flag((FlagTerm)term);
        if(term instanceof FromTerm)
        {
            FromTerm fterm = (FromTerm)term;
            return from(fterm.getAddress().toString(), charset);
        }
        if(term instanceof FromStringTerm)
        {
            FromStringTerm fterm = (FromStringTerm)term;
            return from(fterm.getPattern(), charset);
        }
        if(term instanceof RecipientTerm)
        {
            RecipientTerm rterm = (RecipientTerm)term;
            return recipient(rterm.getRecipientType(), rterm.getAddress().toString(), charset);
        }
        if(term instanceof RecipientStringTerm)
        {
            RecipientStringTerm rterm = (RecipientStringTerm)term;
            return recipient(rterm.getRecipientType(), rterm.getPattern(), charset);
        }
        if(term instanceof SubjectTerm)
            return subject((SubjectTerm)term, charset);
        if(term instanceof BodyTerm)
            return body((BodyTerm)term, charset);
        if(term instanceof SizeTerm)
            return size((SizeTerm)term);
        if(term instanceof SentDateTerm)
            return sentdate((SentDateTerm)term);
        if(term instanceof ReceivedDateTerm)
            return receiveddate((ReceivedDateTerm)term);
        if(term instanceof MessageIDTerm)
            return messageid((MessageIDTerm)term, charset);
        else
            throw new SearchException("Search too complex");
    }

    public static boolean isAscii(SearchTerm term)
    {
        if((term instanceof AndTerm) || (term instanceof OrTerm))
        {
            SearchTerm terms[];
            if(term instanceof AndTerm)
                terms = ((AndTerm)term).getTerms();
            else
                terms = ((OrTerm)term).getTerms();
            for(int i = 0; i < terms.length; i++)
                if(!isAscii(terms[i]))
                    return false;

        } else
        {
            if(term instanceof NotTerm)
                return isAscii(((NotTerm)term).getTerm());
            if(term instanceof StringTerm)
                return isAscii(((StringTerm)term).getPattern());
            if(term instanceof AddressTerm)
                return isAscii(((AddressTerm)term).getAddress().toString());
        }
        return true;
    }

    public static boolean isAscii(String s)
    {
        int l = s.length();
        for(int i = 0; i < l; i++)
            if(s.charAt(i) > '\177')
                return false;

        return true;
    }

    protected Argument and(AndTerm term, String charset)
        throws SearchException, IOException
    {
        SearchTerm terms[] = term.getTerms();
        Argument result = generateSequence(terms[0], charset);
        for(int i = 1; i < terms.length; i++)
            result.append(generateSequence(terms[i], charset));

        return result;
    }

    protected Argument or(OrTerm term, String charset)
        throws SearchException, IOException
    {
        SearchTerm terms[] = term.getTerms();
        if(terms.length > 2)
        {
            SearchTerm t = terms[0];
            for(int i = 1; i < terms.length; i++)
                t = new OrTerm(t, terms[i]);

            term = (OrTerm)t;
            terms = term.getTerms();
        }
        Argument result = new Argument();
        if(terms.length > 1)
            result.writeAtom("OR");
        if((terms[0] instanceof AndTerm) || (terms[0] instanceof FlagTerm))
            result.writeArgument(generateSequence(terms[0], charset));
        else
            result.append(generateSequence(terms[0], charset));
        if(terms.length > 1)
            if((terms[1] instanceof AndTerm) || (terms[1] instanceof FlagTerm))
                result.writeArgument(generateSequence(terms[1], charset));
            else
                result.append(generateSequence(terms[1], charset));
        return result;
    }

    protected Argument not(NotTerm term, String charset)
        throws SearchException, IOException
    {
        Argument result = new Argument();
        result.writeAtom("NOT");
        SearchTerm nterm = term.getTerm();
        if((nterm instanceof AndTerm) || (nterm instanceof FlagTerm))
            result.writeArgument(generateSequence(nterm, charset));
        else
            result.append(generateSequence(nterm, charset));
        return result;
    }

    protected Argument header(HeaderTerm term, String charset)
        throws SearchException, IOException
    {
        Argument result = new Argument();
        result.writeAtom("HEADER");
        result.writeString(term.getHeaderName());
        result.writeString(term.getPattern(), charset);
        return result;
    }

    protected Argument messageid(MessageIDTerm term, String charset)
        throws SearchException, IOException
    {
        Argument result = new Argument();
        result.writeAtom("HEADER");
        result.writeString("Message-ID");
        result.writeString(term.getPattern(), charset);
        return result;
    }

    protected Argument flag(FlagTerm term)
        throws SearchException
    {
        boolean set = term.getTestSet();
        Argument result = new Argument();
        Flags flags = term.getFlags();
        javax.mail.Flags.Flag sf[] = flags.getSystemFlags();
        String uf[] = flags.getUserFlags();
        if(sf.length == 0 && uf.length == 0)
            throw new SearchException("Invalid FlagTerm");
        for(int i = 0; i < sf.length; i++)
        {
            if(sf[i] == javax.mail.Flags.Flag.DELETED)
            {
                result.writeAtom(set ? "DELETED" : "UNDELETED");
                continue;
            }
            if(sf[i] == javax.mail.Flags.Flag.ANSWERED)
            {
                result.writeAtom(set ? "ANSWERED" : "UNANSWERED");
                continue;
            }
            if(sf[i] == javax.mail.Flags.Flag.DRAFT)
            {
                result.writeAtom(set ? "DRAFT" : "UNDRAFT");
                continue;
            }
            if(sf[i] == javax.mail.Flags.Flag.FLAGGED)
            {
                result.writeAtom(set ? "FLAGGED" : "UNFLAGGED");
                continue;
            }
            if(sf[i] == javax.mail.Flags.Flag.RECENT)
            {
                result.writeAtom(set ? "RECENT" : "OLD");
                continue;
            }
            if(sf[i] == javax.mail.Flags.Flag.SEEN)
                result.writeAtom(set ? "SEEN" : "UNSEEN");
        }

        for(int i = 0; i < uf.length; i++)
        {
            result.writeAtom(set ? "KEYWORD" : "UNKEYWORD");
            result.writeAtom(uf[i]);
        }

        return result;
    }

    protected Argument from(String address, String charset)
        throws SearchException, IOException
    {
        Argument result = new Argument();
        result.writeAtom("FROM");
        result.writeString(address, charset);
        return result;
    }

    protected Argument recipient(javax.mail.Message.RecipientType type, String address, String charset)
        throws SearchException, IOException
    {
        Argument result = new Argument();
        if(type == javax.mail.Message.RecipientType.TO)
            result.writeAtom("TO");
        else
        if(type == javax.mail.Message.RecipientType.CC)
            result.writeAtom("CC");
        else
        if(type == javax.mail.Message.RecipientType.BCC)
            result.writeAtom("BCC");
        else
            throw new SearchException("Illegal Recipient type");
        result.writeString(address, charset);
        return result;
    }

    protected Argument subject(SubjectTerm term, String charset)
        throws SearchException, IOException
    {
        Argument result = new Argument();
        result.writeAtom("SUBJECT");
        result.writeString(term.getPattern(), charset);
        return result;
    }

    protected Argument body(BodyTerm term, String charset)
        throws SearchException, IOException
    {
        Argument result = new Argument();
        result.writeAtom("BODY");
        result.writeString(term.getPattern(), charset);
        return result;
    }

    protected Argument size(SizeTerm term)
        throws SearchException
    {
        Argument result = new Argument();
        switch(term.getComparison())
        {
        case 5: // '\005'
            result.writeAtom("LARGER");
            break;

        case 2: // '\002'
            result.writeAtom("SMALLER");
            break;

        default:
            throw new SearchException("Cannot handle Comparison");
        }
        result.writeNumber(term.getNumber());
        return result;
    }

    protected String toIMAPDate(Date date)
    {
        StringBuffer s = new StringBuffer();
        cal.setTime(date);
        s.append(cal.get(5)).append("-");
        s.append(monthTable[cal.get(2)]).append('-');
        s.append(cal.get(1));
        return s.toString();
    }

    protected Argument sentdate(DateTerm term)
        throws SearchException
    {
        Argument result = new Argument();
        String date = toIMAPDate(term.getDate());
        switch(term.getComparison())
        {
        case 5: // '\005'
            result.writeAtom((new StringBuilder()).append("SENTSINCE ").append(date).toString());
            break;

        case 3: // '\003'
            result.writeAtom((new StringBuilder()).append("SENTON ").append(date).toString());
            break;

        case 2: // '\002'
            result.writeAtom((new StringBuilder()).append("SENTBEFORE ").append(date).toString());
            break;

        case 6: // '\006'
            result.writeAtom((new StringBuilder()).append("OR SENTSINCE ").append(date).append(" SENTON ").append(date).toString());
            break;

        case 1: // '\001'
            result.writeAtom((new StringBuilder()).append("OR SENTBEFORE ").append(date).append(" SENTON ").append(date).toString());
            break;

        case 4: // '\004'
            result.writeAtom((new StringBuilder()).append("NOT SENTON ").append(date).toString());
            break;

        default:
            throw new SearchException("Cannot handle Date Comparison");
        }
        return result;
    }

    protected Argument receiveddate(DateTerm term)
        throws SearchException
    {
        Argument result = new Argument();
        String date = toIMAPDate(term.getDate());
        switch(term.getComparison())
        {
        case 5: // '\005'
            result.writeAtom((new StringBuilder()).append("SINCE ").append(date).toString());
            break;

        case 3: // '\003'
            result.writeAtom((new StringBuilder()).append("ON ").append(date).toString());
            break;

        case 2: // '\002'
            result.writeAtom((new StringBuilder()).append("BEFORE ").append(date).toString());
            break;

        case 6: // '\006'
            result.writeAtom((new StringBuilder()).append("OR SINCE ").append(date).append(" ON ").append(date).toString());
            break;

        case 1: // '\001'
            result.writeAtom((new StringBuilder()).append("OR BEFORE ").append(date).append(" ON ").append(date).toString());
            break;

        case 4: // '\004'
            result.writeAtom((new StringBuilder()).append("NOT ON ").append(date).toString());
            break;

        default:
            throw new SearchException("Cannot handle Date Comparison");
        }
        return result;
    }

    private static String monthTable[] = {
        "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", 
        "Nov", "Dec"
    };
    protected Calendar cal;

}
