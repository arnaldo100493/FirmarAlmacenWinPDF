// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   TimeStampReq.java

package org.bouncycastle.asn1.tsp;

import org.bouncycastle.asn1.*;
import org.bouncycastle.asn1.x509.X509Extensions;

// Referenced classes of package org.bouncycastle.asn1.tsp:
//            MessageImprint

public class TimeStampReq extends ASN1Encodable
{

    public static TimeStampReq getInstance(Object o)
    {
        if(o == null || (o instanceof TimeStampReq))
            return (TimeStampReq)o;
        if(o instanceof ASN1Sequence)
            return new TimeStampReq((ASN1Sequence)o);
        else
            throw new IllegalArgumentException((new StringBuilder()).append("Unknown object in 'TimeStampReq' factory : ").append(o.getClass().getName()).append(".").toString());
    }

    public TimeStampReq(ASN1Sequence seq)
    {
        int nbObjects = seq.size();
        int seqStart = 0;
        version = DERInteger.getInstance(seq.getObjectAt(seqStart));
        seqStart++;
        messageImprint = MessageImprint.getInstance(seq.getObjectAt(seqStart));
        for(int opt = ++seqStart; opt < nbObjects; opt++)
        {
            if(seq.getObjectAt(opt) instanceof DERObjectIdentifier)
            {
                tsaPolicy = DERObjectIdentifier.getInstance(seq.getObjectAt(opt));
                continue;
            }
            if(seq.getObjectAt(opt) instanceof DERInteger)
            {
                nonce = DERInteger.getInstance(seq.getObjectAt(opt));
                continue;
            }
            if(seq.getObjectAt(opt) instanceof DERBoolean)
            {
                certReq = DERBoolean.getInstance(seq.getObjectAt(opt));
                continue;
            }
            if(!(seq.getObjectAt(opt) instanceof ASN1TaggedObject))
                continue;
            ASN1TaggedObject tagged = (ASN1TaggedObject)seq.getObjectAt(opt);
            if(tagged.getTagNo() == 0)
                extensions = X509Extensions.getInstance(tagged, false);
        }

    }

    public TimeStampReq(MessageImprint messageImprint, DERObjectIdentifier tsaPolicy, DERInteger nonce, DERBoolean certReq, X509Extensions extensions)
    {
        version = new DERInteger(1);
        this.messageImprint = messageImprint;
        this.tsaPolicy = tsaPolicy;
        this.nonce = nonce;
        this.certReq = certReq;
        this.extensions = extensions;
    }

    public DERInteger getVersion()
    {
        return version;
    }

    public MessageImprint getMessageImprint()
    {
        return messageImprint;
    }

    public DERObjectIdentifier getReqPolicy()
    {
        return tsaPolicy;
    }

    public DERInteger getNonce()
    {
        return nonce;
    }

    public DERBoolean getCertReq()
    {
        return certReq;
    }

    public X509Extensions getExtensions()
    {
        return extensions;
    }

    public DERObject toASN1Object()
    {
        ASN1EncodableVector v = new ASN1EncodableVector();
        v.add(version);
        v.add(messageImprint);
        if(tsaPolicy != null)
            v.add(tsaPolicy);
        if(nonce != null)
            v.add(nonce);
        if(certReq != null && certReq.isTrue())
            v.add(certReq);
        if(extensions != null)
            v.add(new DERTaggedObject(false, 0, extensions));
        return new DERSequence(v);
    }

    DERInteger version;
    MessageImprint messageImprint;
    DERObjectIdentifier tsaPolicy;
    DERInteger nonce;
    DERBoolean certReq;
    X509Extensions extensions;
}
