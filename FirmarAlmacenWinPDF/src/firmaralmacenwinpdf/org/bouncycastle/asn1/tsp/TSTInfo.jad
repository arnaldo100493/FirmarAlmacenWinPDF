// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   TSTInfo.java

package org.bouncycastle.asn1.tsp;

import java.io.IOException;
import java.util.Enumeration;
import org.bouncycastle.asn1.*;
import org.bouncycastle.asn1.x509.GeneralName;
import org.bouncycastle.asn1.x509.X509Extensions;

// Referenced classes of package org.bouncycastle.asn1.tsp:
//            MessageImprint, Accuracy

public class TSTInfo extends ASN1Encodable
{

    public static TSTInfo getInstance(Object o)
    {
        if(o == null || (o instanceof TSTInfo))
            return (TSTInfo)o;
        if(o instanceof ASN1Sequence)
            return new TSTInfo((ASN1Sequence)o);
        if(o instanceof ASN1OctetString)
            try
            {
                return getInstance((new ASN1InputStream(((ASN1OctetString)o).getOctets())).readObject());
            }
            catch(IOException ioEx)
            {
                throw new IllegalArgumentException("Bad object format in 'TSTInfo' factory.");
            }
        else
            throw new IllegalArgumentException((new StringBuilder()).append("Unknown object in 'TSTInfo' factory : ").append(o.getClass().getName()).append(".").toString());
    }

    public TSTInfo(ASN1Sequence seq)
    {
        Enumeration e = seq.getObjects();
        version = DERInteger.getInstance(e.nextElement());
        tsaPolicyId = DERObjectIdentifier.getInstance(e.nextElement());
        messageImprint = MessageImprint.getInstance(e.nextElement());
        serialNumber = DERInteger.getInstance(e.nextElement());
        genTime = DERGeneralizedTime.getInstance(e.nextElement());
        ordering = new DERBoolean(false);
        do
        {
            if(!e.hasMoreElements())
                break;
            DERObject o = (DERObject)e.nextElement();
            if(o instanceof ASN1TaggedObject)
            {
                DERTaggedObject tagged = (DERTaggedObject)o;
                switch(tagged.getTagNo())
                {
                case 0: // '\0'
                    tsa = GeneralName.getInstance(tagged, true);
                    break;

                case 1: // '\001'
                    extensions = X509Extensions.getInstance(tagged, false);
                    break;

                default:
                    throw new IllegalArgumentException((new StringBuilder()).append("Unknown tag value ").append(tagged.getTagNo()).toString());
                }
            } else
            if(o instanceof DERSequence)
                accuracy = Accuracy.getInstance(o);
            else
            if(o instanceof DERBoolean)
                ordering = DERBoolean.getInstance(o);
            else
            if(o instanceof DERInteger)
                nonce = DERInteger.getInstance(o);
        } while(true);
    }

    public TSTInfo(DERObjectIdentifier tsaPolicyId, MessageImprint messageImprint, DERInteger serialNumber, DERGeneralizedTime genTime, Accuracy accuracy, DERBoolean ordering, DERInteger nonce, 
            GeneralName tsa, X509Extensions extensions)
    {
        version = new DERInteger(1);
        this.tsaPolicyId = tsaPolicyId;
        this.messageImprint = messageImprint;
        this.serialNumber = serialNumber;
        this.genTime = genTime;
        this.accuracy = accuracy;
        this.ordering = ordering;
        this.nonce = nonce;
        this.tsa = tsa;
        this.extensions = extensions;
    }

    public MessageImprint getMessageImprint()
    {
        return messageImprint;
    }

    public DERObjectIdentifier getPolicy()
    {
        return tsaPolicyId;
    }

    public DERInteger getSerialNumber()
    {
        return serialNumber;
    }

    public Accuracy getAccuracy()
    {
        return accuracy;
    }

    public DERGeneralizedTime getGenTime()
    {
        return genTime;
    }

    public DERBoolean getOrdering()
    {
        return ordering;
    }

    public DERInteger getNonce()
    {
        return nonce;
    }

    public GeneralName getTsa()
    {
        return tsa;
    }

    public X509Extensions getExtensions()
    {
        return extensions;
    }

    public DERObject toASN1Object()
    {
        ASN1EncodableVector seq = new ASN1EncodableVector();
        seq.add(version);
        seq.add(tsaPolicyId);
        seq.add(messageImprint);
        seq.add(serialNumber);
        seq.add(genTime);
        if(accuracy != null)
            seq.add(accuracy);
        if(ordering != null && ordering.isTrue())
            seq.add(ordering);
        if(nonce != null)
            seq.add(nonce);
        if(tsa != null)
            seq.add(new DERTaggedObject(true, 0, tsa));
        if(extensions != null)
            seq.add(new DERTaggedObject(false, 1, extensions));
        return new DERSequence(seq);
    }

    DERInteger version;
    DERObjectIdentifier tsaPolicyId;
    MessageImprint messageImprint;
    DERInteger serialNumber;
    DERGeneralizedTime genTime;
    Accuracy accuracy;
    DERBoolean ordering;
    DERInteger nonce;
    GeneralName tsa;
    X509Extensions extensions;
}
