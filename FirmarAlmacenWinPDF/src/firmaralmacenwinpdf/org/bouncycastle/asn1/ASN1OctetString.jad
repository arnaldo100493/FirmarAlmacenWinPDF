// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ASN1OctetString.java

package org.bouncycastle.asn1;

import java.io.*;
import org.bouncycastle.util.Arrays;
import org.bouncycastle.util.encoders.Hex;

// Referenced classes of package org.bouncycastle.asn1:
//            ASN1Object, ASN1TaggedObject, ASN1OctetStringParser, DERObject, 
//            DEREncodable, ASN1Sequence, BERConstructedOctetString, DEROutputStream

public abstract class ASN1OctetString extends ASN1Object
    implements ASN1OctetStringParser
{

    public static ASN1OctetString getInstance(ASN1TaggedObject obj, boolean explicit)
    {
        DERObject o = obj.getObject();
        if(explicit || (o instanceof ASN1OctetString))
            return getInstance(o);
        else
            return BERConstructedOctetString.fromSequence(ASN1Sequence.getInstance(o));
    }

    public static ASN1OctetString getInstance(Object obj)
    {
        if(obj == null || (obj instanceof ASN1OctetString))
            return (ASN1OctetString)obj;
        if(obj instanceof ASN1TaggedObject)
            return getInstance(((ASN1TaggedObject)obj).getObject());
        else
            throw new IllegalArgumentException((new StringBuilder()).append("illegal object in getInstance: ").append(obj.getClass().getName()).toString());
    }

    public ASN1OctetString(byte string[])
    {
        if(string == null)
        {
            throw new NullPointerException("string cannot be null");
        } else
        {
            this.string = string;
            return;
        }
    }

    public ASN1OctetString(DEREncodable obj)
    {
        try
        {
            string = obj.getDERObject().getEncoded("DER");
        }
        catch(IOException e)
        {
            throw new IllegalArgumentException((new StringBuilder()).append("Error processing object : ").append(e.toString()).toString());
        }
    }

    public InputStream getOctetStream()
    {
        return new ByteArrayInputStream(string);
    }

    public ASN1OctetStringParser parser()
    {
        return this;
    }

    public byte[] getOctets()
    {
        return string;
    }

    public int hashCode()
    {
        return Arrays.hashCode(getOctets());
    }

    boolean asn1Equals(DERObject o)
    {
        if(!(o instanceof ASN1OctetString))
        {
            return false;
        } else
        {
            ASN1OctetString other = (ASN1OctetString)o;
            return Arrays.areEqual(string, other.string);
        }
    }

    public DERObject getLoadedObject()
    {
        return getDERObject();
    }

    abstract void encode(DEROutputStream deroutputstream)
        throws IOException;

    public String toString()
    {
        return (new StringBuilder()).append("#").append(new String(Hex.encode(string))).toString();
    }

    byte string[];
}
