// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   CertifiedKeyPair.java

package org.bouncycastle.asn1.cmp;

import org.bouncycastle.asn1.*;
import org.bouncycastle.asn1.crmf.EncryptedValue;
import org.bouncycastle.asn1.crmf.PKIPublicationInfo;

// Referenced classes of package org.bouncycastle.asn1.cmp:
//            CertOrEncCert

public class CertifiedKeyPair extends ASN1Encodable
{

    private CertifiedKeyPair(ASN1Sequence seq)
    {
        certOrEncCert = CertOrEncCert.getInstance(seq.getObjectAt(0));
        if(seq.size() >= 2)
            if(seq.size() == 2)
            {
                ASN1TaggedObject tagged = ASN1TaggedObject.getInstance(seq.getObjectAt(1));
                if(tagged.getTagNo() == 0)
                    privateKey = EncryptedValue.getInstance(tagged.getObject());
                else
                    publicationInfo = PKIPublicationInfo.getInstance(tagged.getObject());
            } else
            {
                privateKey = EncryptedValue.getInstance(ASN1TaggedObject.getInstance(seq.getObjectAt(1)));
                publicationInfo = PKIPublicationInfo.getInstance(ASN1TaggedObject.getInstance(seq.getObjectAt(2)));
            }
    }

    public static CertifiedKeyPair getInstance(Object o)
    {
        if(o instanceof CertifiedKeyPair)
            return (CertifiedKeyPair)o;
        if(o instanceof ASN1Sequence)
            return new CertifiedKeyPair((ASN1Sequence)o);
        else
            throw new IllegalArgumentException((new StringBuilder()).append("Invalid object: ").append(o.getClass().getName()).toString());
    }

    public CertifiedKeyPair(CertOrEncCert certOrEncCert)
    {
        this(certOrEncCert, null, null);
    }

    public CertifiedKeyPair(CertOrEncCert certOrEncCert, EncryptedValue privateKey, PKIPublicationInfo publicationInfo)
    {
        if(certOrEncCert == null)
        {
            throw new IllegalArgumentException("'certOrEncCert' cannot be null");
        } else
        {
            this.certOrEncCert = certOrEncCert;
            this.privateKey = privateKey;
            this.publicationInfo = publicationInfo;
            return;
        }
    }

    public CertOrEncCert getCertOrEncCert()
    {
        return certOrEncCert;
    }

    public EncryptedValue getPrivateKey()
    {
        return privateKey;
    }

    public PKIPublicationInfo getPublicationInfo()
    {
        return publicationInfo;
    }

    public DERObject toASN1Object()
    {
        ASN1EncodableVector v = new ASN1EncodableVector();
        v.add(certOrEncCert);
        if(privateKey != null)
            v.add(new DERTaggedObject(true, 0, privateKey));
        if(publicationInfo != null)
            v.add(new DERTaggedObject(true, 1, publicationInfo));
        return new DERSequence(v);
    }

    private CertOrEncCert certOrEncCert;
    private EncryptedValue privateKey;
    private PKIPublicationInfo publicationInfo;
}
