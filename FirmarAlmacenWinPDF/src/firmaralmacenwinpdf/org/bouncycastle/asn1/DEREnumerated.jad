// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   DEREnumerated.java

package org.bouncycastle.asn1;

import java.io.IOException;
import java.math.BigInteger;
import org.bouncycastle.util.Arrays;

// Referenced classes of package org.bouncycastle.asn1:
//            ASN1Object, ASN1OctetString, DERObject, ASN1TaggedObject, 
//            DEROutputStream

public class DEREnumerated extends ASN1Object
{

    public static DEREnumerated getInstance(Object obj)
    {
        if(obj == null || (obj instanceof DEREnumerated))
            return (DEREnumerated)obj;
        else
            throw new IllegalArgumentException((new StringBuilder()).append("illegal object in getInstance: ").append(obj.getClass().getName()).toString());
    }

    public static DEREnumerated getInstance(ASN1TaggedObject obj, boolean explicit)
    {
        DERObject o = obj.getObject();
        if(explicit || (o instanceof DEREnumerated))
            return getInstance(o);
        else
            return new DEREnumerated(((ASN1OctetString)o).getOctets());
    }

    public DEREnumerated(int value)
    {
        bytes = BigInteger.valueOf(value).toByteArray();
    }

    public DEREnumerated(BigInteger value)
    {
        bytes = value.toByteArray();
    }

    public DEREnumerated(byte bytes[])
    {
        this.bytes = bytes;
    }

    public BigInteger getValue()
    {
        return new BigInteger(bytes);
    }

    void encode(DEROutputStream out)
        throws IOException
    {
        out.writeEncoded(10, bytes);
    }

    boolean asn1Equals(DERObject o)
    {
        if(!(o instanceof DEREnumerated))
        {
            return false;
        } else
        {
            DEREnumerated other = (DEREnumerated)o;
            return Arrays.areEqual(bytes, other.bytes);
        }
    }

    public int hashCode()
    {
        return Arrays.hashCode(bytes);
    }

    byte bytes[];
}
