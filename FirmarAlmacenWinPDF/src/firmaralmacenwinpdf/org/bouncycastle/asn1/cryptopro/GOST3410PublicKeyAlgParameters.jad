// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   GOST3410PublicKeyAlgParameters.java

package org.bouncycastle.asn1.cryptopro;

import org.bouncycastle.asn1.*;

public class GOST3410PublicKeyAlgParameters extends ASN1Encodable
{

    public static GOST3410PublicKeyAlgParameters getInstance(ASN1TaggedObject obj, boolean explicit)
    {
        return getInstance(ASN1Sequence.getInstance(obj, explicit));
    }

    public static GOST3410PublicKeyAlgParameters getInstance(Object obj)
    {
        if(obj == null || (obj instanceof GOST3410PublicKeyAlgParameters))
            return (GOST3410PublicKeyAlgParameters)obj;
        if(obj instanceof ASN1Sequence)
            return new GOST3410PublicKeyAlgParameters((ASN1Sequence)obj);
        else
            throw new IllegalArgumentException((new StringBuilder()).append("Invalid GOST3410Parameter: ").append(obj.getClass().getName()).toString());
    }

    public GOST3410PublicKeyAlgParameters(DERObjectIdentifier publicKeyParamSet, DERObjectIdentifier digestParamSet)
    {
        this.publicKeyParamSet = publicKeyParamSet;
        this.digestParamSet = digestParamSet;
        encryptionParamSet = null;
    }

    public GOST3410PublicKeyAlgParameters(DERObjectIdentifier publicKeyParamSet, DERObjectIdentifier digestParamSet, DERObjectIdentifier encryptionParamSet)
    {
        this.publicKeyParamSet = publicKeyParamSet;
        this.digestParamSet = digestParamSet;
        this.encryptionParamSet = encryptionParamSet;
    }

    public GOST3410PublicKeyAlgParameters(ASN1Sequence seq)
    {
        publicKeyParamSet = (DERObjectIdentifier)seq.getObjectAt(0);
        digestParamSet = (DERObjectIdentifier)seq.getObjectAt(1);
        if(seq.size() > 2)
            encryptionParamSet = (DERObjectIdentifier)seq.getObjectAt(2);
    }

    public DERObjectIdentifier getPublicKeyParamSet()
    {
        return publicKeyParamSet;
    }

    public DERObjectIdentifier getDigestParamSet()
    {
        return digestParamSet;
    }

    public DERObjectIdentifier getEncryptionParamSet()
    {
        return encryptionParamSet;
    }

    public DERObject toASN1Object()
    {
        ASN1EncodableVector v = new ASN1EncodableVector();
        v.add(publicKeyParamSet);
        v.add(digestParamSet);
        if(encryptionParamSet != null)
            v.add(encryptionParamSet);
        return new DERSequence(v);
    }

    private DERObjectIdentifier publicKeyParamSet;
    private DERObjectIdentifier digestParamSet;
    private DERObjectIdentifier encryptionParamSet;
}
