// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   DERBMPString.java

package org.bouncycastle.asn1;

import java.io.IOException;

// Referenced classes of package org.bouncycastle.asn1:
//            ASN1Object, DERString, DERObject, ASN1TaggedObject, 
//            ASN1OctetString, DEROutputStream

public class DERBMPString extends ASN1Object
    implements DERString
{

    public static DERBMPString getInstance(Object obj)
    {
        if(obj == null || (obj instanceof DERBMPString))
            return (DERBMPString)obj;
        else
            throw new IllegalArgumentException((new StringBuilder()).append("illegal object in getInstance: ").append(obj.getClass().getName()).toString());
    }

    public static DERBMPString getInstance(ASN1TaggedObject obj, boolean explicit)
    {
        DERObject o = obj.getObject();
        if(explicit || (o instanceof DERBMPString))
            return getInstance(o);
        else
            return new DERBMPString(ASN1OctetString.getInstance(o).getOctets());
    }

    public DERBMPString(byte string[])
    {
        char cs[] = new char[string.length / 2];
        for(int i = 0; i != cs.length; i++)
            cs[i] = (char)(string[2 * i] << 8 | string[2 * i + 1] & 0xff);

        this.string = new String(cs);
    }

    public DERBMPString(String string)
    {
        this.string = string;
    }

    public String getString()
    {
        return string;
    }

    public String toString()
    {
        return string;
    }

    public int hashCode()
    {
        return getString().hashCode();
    }

    protected boolean asn1Equals(DERObject o)
    {
        if(!(o instanceof DERBMPString))
        {
            return false;
        } else
        {
            DERBMPString s = (DERBMPString)o;
            return getString().equals(s.getString());
        }
    }

    void encode(DEROutputStream out)
        throws IOException
    {
        char c[] = string.toCharArray();
        byte b[] = new byte[c.length * 2];
        for(int i = 0; i != c.length; i++)
        {
            b[2 * i] = (byte)(c[i] >> 8);
            b[2 * i + 1] = (byte)c[i];
        }

        out.writeEncoded(30, b);
    }

    String string;
}
