// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   DERUTF8String.java

package org.bouncycastle.asn1;

import java.io.IOException;
import org.bouncycastle.util.Strings;

// Referenced classes of package org.bouncycastle.asn1:
//            ASN1Object, DERString, DERObject, ASN1TaggedObject, 
//            ASN1OctetString, DEROutputStream

public class DERUTF8String extends ASN1Object
    implements DERString
{

    public static DERUTF8String getInstance(Object obj)
    {
        if(obj == null || (obj instanceof DERUTF8String))
            return (DERUTF8String)obj;
        else
            throw new IllegalArgumentException((new StringBuilder()).append("illegal object in getInstance: ").append(obj.getClass().getName()).toString());
    }

    public static DERUTF8String getInstance(ASN1TaggedObject obj, boolean explicit)
    {
        DERObject o = obj.getObject();
        if(explicit || (o instanceof DERUTF8String))
            return getInstance(o);
        else
            return new DERUTF8String(ASN1OctetString.getInstance(o).getOctets());
    }

    public DERUTF8String(byte string[])
    {
        try
        {
            this.string = Strings.fromUTF8ByteArray(string);
        }
        catch(ArrayIndexOutOfBoundsException e)
        {
            throw new IllegalArgumentException("UTF8 encoding invalid");
        }
    }

    public DERUTF8String(String string)
    {
        this.string = string;
    }

    public String getString()
    {
        return string;
    }

    public String toString()
    {
        return string;
    }

    public int hashCode()
    {
        return getString().hashCode();
    }

    boolean asn1Equals(DERObject o)
    {
        if(!(o instanceof DERUTF8String))
        {
            return false;
        } else
        {
            DERUTF8String s = (DERUTF8String)o;
            return getString().equals(s.getString());
        }
    }

    void encode(DEROutputStream out)
        throws IOException
    {
        out.writeEncoded(12, Strings.toUTF8ByteArray(string));
    }

    String string;
}
