// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   EncryptedData.java

package org.bouncycastle.asn1.pkcs;

import java.math.BigInteger;
import org.bouncycastle.asn1.*;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;

public class EncryptedData extends ASN1Encodable
{

    public static EncryptedData getInstance(Object obj)
    {
        if(obj instanceof EncryptedData)
            return (EncryptedData)obj;
        if(obj instanceof ASN1Sequence)
            return new EncryptedData((ASN1Sequence)obj);
        else
            throw new IllegalArgumentException((new StringBuilder()).append("unknown object in factory: ").append(obj.getClass().getName()).toString());
    }

    public EncryptedData(ASN1Sequence seq)
    {
        int version = ((DERInteger)seq.getObjectAt(0)).getValue().intValue();
        if(version != 0)
        {
            throw new IllegalArgumentException("sequence not version 0");
        } else
        {
            data = (ASN1Sequence)seq.getObjectAt(1);
            return;
        }
    }

    public EncryptedData(DERObjectIdentifier contentType, AlgorithmIdentifier encryptionAlgorithm, DEREncodable content)
    {
        ASN1EncodableVector v = new ASN1EncodableVector();
        v.add(contentType);
        v.add(encryptionAlgorithm.getDERObject());
        v.add(new BERTaggedObject(false, 0, content));
        data = new BERSequence(v);
    }

    public DERObjectIdentifier getContentType()
    {
        return (DERObjectIdentifier)data.getObjectAt(0);
    }

    public AlgorithmIdentifier getEncryptionAlgorithm()
    {
        return AlgorithmIdentifier.getInstance(data.getObjectAt(1));
    }

    public ASN1OctetString getContent()
    {
        if(data.size() == 3)
        {
            DERTaggedObject o = (DERTaggedObject)data.getObjectAt(2);
            return ASN1OctetString.getInstance(o, false);
        } else
        {
            return null;
        }
    }

    public DERObject toASN1Object()
    {
        ASN1EncodableVector v = new ASN1EncodableVector();
        v.add(new DERInteger(0));
        v.add(data);
        return new BERSequence(v);
    }

    ASN1Sequence data;
    DERObjectIdentifier bagId;
    DERObject bagValue;
}
