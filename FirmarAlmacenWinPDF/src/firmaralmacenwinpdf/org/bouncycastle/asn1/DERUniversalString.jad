// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   DERUniversalString.java

package org.bouncycastle.asn1;

import java.io.ByteArrayOutputStream;
import java.io.IOException;

// Referenced classes of package org.bouncycastle.asn1:
//            ASN1Object, ASN1OctetString, ASN1OutputStream, DERString, 
//            DERObject, ASN1TaggedObject, DEROutputStream

public class DERUniversalString extends ASN1Object
    implements DERString
{

    public static DERUniversalString getInstance(Object obj)
    {
        if(obj == null || (obj instanceof DERUniversalString))
            return (DERUniversalString)obj;
        else
            throw new IllegalArgumentException((new StringBuilder()).append("illegal object in getInstance: ").append(obj.getClass().getName()).toString());
    }

    public static DERUniversalString getInstance(ASN1TaggedObject obj, boolean explicit)
    {
        DERObject o = obj.getObject();
        if(explicit || (o instanceof DERUniversalString))
            return getInstance(o);
        else
            return new DERUniversalString(((ASN1OctetString)o).getOctets());
    }

    public DERUniversalString(byte string[])
    {
        this.string = string;
    }

    public String getString()
    {
        StringBuffer buf = new StringBuffer("#");
        ByteArrayOutputStream bOut = new ByteArrayOutputStream();
        ASN1OutputStream aOut = new ASN1OutputStream(bOut);
        try
        {
            aOut.writeObject(this);
        }
        catch(IOException e)
        {
            throw new RuntimeException("internal error encoding BitString");
        }
        byte string[] = bOut.toByteArray();
        for(int i = 0; i != string.length; i++)
        {
            buf.append(table[string[i] >>> 4 & 0xf]);
            buf.append(table[string[i] & 0xf]);
        }

        return buf.toString();
    }

    public String toString()
    {
        return getString();
    }

    public byte[] getOctets()
    {
        return string;
    }

    void encode(DEROutputStream out)
        throws IOException
    {
        out.writeEncoded(28, getOctets());
    }

    boolean asn1Equals(DERObject o)
    {
        if(!(o instanceof DERUniversalString))
            return false;
        else
            return getString().equals(((DERUniversalString)o).getString());
    }

    public int hashCode()
    {
        return getString().hashCode();
    }

    private static final char table[] = {
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 
        'A', 'B', 'C', 'D', 'E', 'F'
    };
    private byte string[];

}
