// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ASN1InputStream.java

package org.bouncycastle.asn1;

import java.io.*;
import org.bouncycastle.util.io.Streams;

// Referenced classes of package org.bouncycastle.asn1:
//            LimitedInputStream, DefiniteLengthInputStream, DERApplicationSpecific, ASN1StreamParser, 
//            BERConstructedOctetString, LazyDERSequence, DERExternal, DERUnknownTag, 
//            ASN1EncodableVector, IndefiniteLengthInputStream, BERApplicationSpecificParser, BERTaggedObjectParser, 
//            BEROctetStringParser, BERSequenceParser, BERSetParser, DERExternalParser, 
//            ASN1Exception, DERBMPString, ASN1Boolean, ASN1Enumerated, 
//            ASN1GeneralizedTime, DERGeneralString, DERIA5String, ASN1Integer, 
//            DERNumericString, ASN1ObjectIdentifier, DEROctetString, DERPrintableString, 
//            DERT61String, DERUniversalString, ASN1UTCTime, DERUTF8String, 
//            DERVisibleString, DERTags, DERObject, DERFactory, 
//            DERBitString, DERNull

public class ASN1InputStream extends FilterInputStream
    implements DERTags
{

    static int findLimit(InputStream in)
    {
        if(in instanceof LimitedInputStream)
            return ((LimitedInputStream)in).getRemaining();
        if(in instanceof ByteArrayInputStream)
            return ((ByteArrayInputStream)in).available();
        else
            return 0x7fffffff;
    }

    public ASN1InputStream(InputStream is)
    {
        this(is, findLimit(is));
    }

    public ASN1InputStream(byte input[])
    {
        this(((InputStream) (new ByteArrayInputStream(input))), input.length);
    }

    public ASN1InputStream(byte input[], boolean lazyEvaluate)
    {
        this(((InputStream) (new ByteArrayInputStream(input))), input.length, lazyEvaluate);
    }

    public ASN1InputStream(InputStream input, int limit)
    {
        this(input, limit, false);
    }

    public ASN1InputStream(InputStream input, int limit, boolean lazyEvaluate)
    {
        super(input);
        this.limit = limit;
        this.lazyEvaluate = lazyEvaluate;
    }

    protected int readLength()
        throws IOException
    {
        return readLength(((InputStream) (this)), limit);
    }

    protected void readFully(byte bytes[])
        throws IOException
    {
        if(Streams.readFully(this, bytes) != bytes.length)
            throw new EOFException("EOF encountered in middle of object");
        else
            return;
    }

    protected DERObject buildObject(int tag, int tagNo, int length)
        throws IOException
    {
        boolean isConstructed = (tag & 0x20) != 0;
        DefiniteLengthInputStream defIn = new DefiniteLengthInputStream(this, length);
        if((tag & 0x40) != 0)
            return new DERApplicationSpecific(isConstructed, tagNo, defIn.toByteArray());
        if((tag & 0x80) != 0)
            return (new ASN1StreamParser(defIn)).readTaggedObject(isConstructed, tagNo);
        if(isConstructed)
        {
            switch(tagNo)
            {
            case 4: // '\004'
                return new BERConstructedOctetString(buildDEREncodableVector(defIn).v);

            case 16: // '\020'
                if(lazyEvaluate)
                    return new LazyDERSequence(defIn.toByteArray());
                else
                    return DERFactory.createSequence(buildDEREncodableVector(defIn));

            case 17: // '\021'
                return DERFactory.createSet(buildDEREncodableVector(defIn), false);

            case 8: // '\b'
                return new DERExternal(buildDEREncodableVector(defIn));
            }
            return new DERUnknownTag(true, tagNo, defIn.toByteArray());
        } else
        {
            return createPrimitiveDERObject(tagNo, defIn.toByteArray());
        }
    }

    ASN1EncodableVector buildEncodableVector()
        throws IOException
    {
        ASN1EncodableVector v = new ASN1EncodableVector();
        DERObject o;
        while((o = readObject()) != null) 
            v.add(o);
        return v;
    }

    ASN1EncodableVector buildDEREncodableVector(DefiniteLengthInputStream dIn)
        throws IOException
    {
        return (new ASN1InputStream(dIn)).buildEncodableVector();
    }

    public DERObject readObject()
        throws IOException
    {
        int tag = read();
        if(tag <= 0)
            if(tag == 0)
                throw new IOException("unexpected end-of-contents marker");
            else
                return null;
        int tagNo = readTagNumber(this, tag);
        boolean isConstructed = (tag & 0x20) != 0;
        int length = readLength();
        if(length < 0)
        {
            if(!isConstructed)
                throw new IOException("indefinite length primitive encoding encountered");
            IndefiniteLengthInputStream indIn = new IndefiniteLengthInputStream(this, limit);
            ASN1StreamParser sp = new ASN1StreamParser(indIn, limit);
            if((tag & 0x40) != 0)
                return (new BERApplicationSpecificParser(tagNo, sp)).getLoadedObject();
            if((tag & 0x80) != 0)
                return (new BERTaggedObjectParser(true, tagNo, sp)).getLoadedObject();
            switch(tagNo)
            {
            case 4: // '\004'
                return (new BEROctetStringParser(sp)).getLoadedObject();

            case 16: // '\020'
                return (new BERSequenceParser(sp)).getLoadedObject();

            case 17: // '\021'
                return (new BERSetParser(sp)).getLoadedObject();

            case 8: // '\b'
                return (new DERExternalParser(sp)).getLoadedObject();
            }
            throw new IOException("unknown BER object encountered");
        }
        try
        {
            return buildObject(tag, tagNo, length);
        }
        catch(IllegalArgumentException e)
        {
            throw new ASN1Exception("corrupted stream detected", e);
        }
    }

    static int readTagNumber(InputStream s, int tag)
        throws IOException
    {
        int tagNo = tag & 0x1f;
        if(tagNo == 31)
        {
            tagNo = 0;
            int b = s.read();
            if((b & 0x7f) == 0)
                throw new IOException("corrupted stream - invalid high tag number found");
            for(; b >= 0 && (b & 0x80) != 0; b = s.read())
            {
                tagNo |= b & 0x7f;
                tagNo <<= 7;
            }

            if(b < 0)
                throw new EOFException("EOF found inside tag value.");
            tagNo |= b & 0x7f;
        }
        return tagNo;
    }

    static int readLength(InputStream s, int limit)
        throws IOException
    {
        int length = s.read();
        if(length < 0)
            throw new EOFException("EOF found when length expected");
        if(length == 128)
            return -1;
        if(length > 127)
        {
            int size = length & 0x7f;
            if(size > 4)
                throw new IOException((new StringBuilder()).append("DER length more than 4 bytes: ").append(size).toString());
            length = 0;
            for(int i = 0; i < size; i++)
            {
                int next = s.read();
                if(next < 0)
                    throw new EOFException("EOF found reading length");
                length = (length << 8) + next;
            }

            if(length < 0)
                throw new IOException("corrupted stream - negative length found");
            if(length >= limit)
                throw new IOException("corrupted stream - out of bounds length found");
        }
        return length;
    }

    static DERObject createPrimitiveDERObject(int tagNo, byte bytes[])
    {
        switch(tagNo)
        {
        case 3: // '\003'
            return DERBitString.fromOctetString(bytes);

        case 30: // '\036'
            return new DERBMPString(bytes);

        case 1: // '\001'
            return new ASN1Boolean(bytes);

        case 10: // '\n'
            return new ASN1Enumerated(bytes);

        case 24: // '\030'
            return new ASN1GeneralizedTime(bytes);

        case 27: // '\033'
            return new DERGeneralString(bytes);

        case 22: // '\026'
            return new DERIA5String(bytes);

        case 2: // '\002'
            return new ASN1Integer(bytes);

        case 5: // '\005'
            return DERNull.INSTANCE;

        case 18: // '\022'
            return new DERNumericString(bytes);

        case 6: // '\006'
            return new ASN1ObjectIdentifier(bytes);

        case 4: // '\004'
            return new DEROctetString(bytes);

        case 19: // '\023'
            return new DERPrintableString(bytes);

        case 20: // '\024'
            return new DERT61String(bytes);

        case 28: // '\034'
            return new DERUniversalString(bytes);

        case 23: // '\027'
            return new ASN1UTCTime(bytes);

        case 12: // '\f'
            return new DERUTF8String(bytes);

        case 26: // '\032'
            return new DERVisibleString(bytes);

        case 7: // '\007'
        case 8: // '\b'
        case 9: // '\t'
        case 11: // '\013'
        case 13: // '\r'
        case 14: // '\016'
        case 15: // '\017'
        case 16: // '\020'
        case 17: // '\021'
        case 21: // '\025'
        case 25: // '\031'
        case 29: // '\035'
        default:
            return new DERUnknownTag(false, tagNo, bytes);
        }
    }

    private final int limit;
    private final boolean lazyEvaluate;
}
