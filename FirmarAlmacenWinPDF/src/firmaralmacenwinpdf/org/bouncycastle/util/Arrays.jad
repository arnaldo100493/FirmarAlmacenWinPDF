// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Arrays.java

package org.bouncycastle.util;


public final class Arrays
{

    private Arrays()
    {
    }

    public static boolean areEqual(boolean a[], boolean b[])
    {
        if(a == b)
            return true;
        if(a == null || b == null)
            return false;
        if(a.length != b.length)
            return false;
        for(int i = 0; i != a.length; i++)
            if(a[i] != b[i])
                return false;

        return true;
    }

    public static boolean areEqual(char a[], char b[])
    {
        if(a == b)
            return true;
        if(a == null || b == null)
            return false;
        if(a.length != b.length)
            return false;
        for(int i = 0; i != a.length; i++)
            if(a[i] != b[i])
                return false;

        return true;
    }

    public static boolean areEqual(byte a[], byte b[])
    {
        if(a == b)
            return true;
        if(a == null || b == null)
            return false;
        if(a.length != b.length)
            return false;
        for(int i = 0; i != a.length; i++)
            if(a[i] != b[i])
                return false;

        return true;
    }

    public static boolean constantTimeAreEqual(byte a[], byte b[])
    {
        if(a == b)
            return true;
        if(a == null || b == null)
            return false;
        if(a.length != b.length)
            return false;
        int nonEqual = 0;
        for(int i = 0; i != a.length; i++)
            nonEqual |= a[i] ^ b[i];

        return nonEqual == 0;
    }

    public static boolean areEqual(int a[], int b[])
    {
        if(a == b)
            return true;
        if(a == null || b == null)
            return false;
        if(a.length != b.length)
            return false;
        for(int i = 0; i != a.length; i++)
            if(a[i] != b[i])
                return false;

        return true;
    }

    public static void fill(byte array[], byte value)
    {
        for(int i = 0; i < array.length; i++)
            array[i] = value;

    }

    public static void fill(long array[], long value)
    {
        for(int i = 0; i < array.length; i++)
            array[i] = value;

    }

    public static void fill(short array[], short value)
    {
        for(int i = 0; i < array.length; i++)
            array[i] = value;

    }

    public static int hashCode(byte data[])
    {
        if(data == null)
            return 0;
        int i = data.length;
        int hc;
        for(hc = i + 1; --i >= 0; hc ^= data[i])
            hc *= 257;

        return hc;
    }

    public static byte[] clone(byte data[])
    {
        if(data == null)
        {
            return null;
        } else
        {
            byte copy[] = new byte[data.length];
            System.arraycopy(data, 0, copy, 0, data.length);
            return copy;
        }
    }

    public static int[] clone(int data[])
    {
        if(data == null)
        {
            return null;
        } else
        {
            int copy[] = new int[data.length];
            System.arraycopy(data, 0, copy, 0, data.length);
            return copy;
        }
    }
}
