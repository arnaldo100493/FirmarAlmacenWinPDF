// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   PasswordRecipientInformation.java

package org.bouncycastle.cms;

import java.io.IOException;
import java.math.BigInteger;
import java.security.*;
import java.util.HashMap;
import java.util.Map;
import javax.crypto.Cipher;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.bouncycastle.asn1.*;
import org.bouncycastle.asn1.cms.PasswordRecipientInfo;
import org.bouncycastle.asn1.pkcs.PBKDF2Params;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.crypto.PBEParametersGenerator;
import org.bouncycastle.crypto.generators.PKCS5S2ParametersGenerator;
import org.bouncycastle.crypto.params.KeyParameter;

// Referenced classes of package org.bouncycastle.cms:
//            RecipientInformation, PasswordRecipientId, CMSPBEKey, CMSException, 
//            PasswordRecipient, Recipient, CMSUtils, CMSEnvelopedHelper, 
//            CMSAlgorithm, CMSSecureReadable, AuthAttributesProvider, CMSTypedStream, 
//            RecipientOperator

public class PasswordRecipientInformation extends RecipientInformation
{

    PasswordRecipientInformation(PasswordRecipientInfo info, AlgorithmIdentifier messageAlgorithm, CMSSecureReadable secureReadable, AuthAttributesProvider additionalData)
    {
        super(info.getKeyEncryptionAlgorithm(), messageAlgorithm, secureReadable, additionalData);
        this.info = info;
        rid = new PasswordRecipientId();
    }

    public String getKeyDerivationAlgOID()
    {
        if(info.getKeyDerivationAlgorithm() != null)
            return info.getKeyDerivationAlgorithm().getObjectId().getId();
        else
            return null;
    }

    public byte[] getKeyDerivationAlgParams()
    {
        try
        {
            if(info.getKeyDerivationAlgorithm() != null)
            {
                DEREncodable params = info.getKeyDerivationAlgorithm().getParameters();
                if(params != null)
                    return params.getDERObject().getEncoded();
            }
        }
        catch(Exception e)
        {
            throw new RuntimeException((new StringBuilder()).append("exception getting encryption parameters ").append(e).toString());
        }
        return null;
    }

    public AlgorithmParameters getKeyDerivationAlgParameters(String provider)
        throws NoSuchProviderException
    {
        return getKeyDerivationAlgParameters(CMSUtils.getProvider(provider));
    }

    public AlgorithmParameters getKeyDerivationAlgParameters(Provider provider)
    {
        try
        {
            if(info.getKeyDerivationAlgorithm() != null)
            {
                DEREncodable params = info.getKeyDerivationAlgorithm().getParameters();
                if(params != null)
                {
                    AlgorithmParameters algP = AlgorithmParameters.getInstance(info.getKeyDerivationAlgorithm().getObjectId().toString(), provider);
                    algP.init(params.getDERObject().getEncoded());
                    return algP;
                }
            }
        }
        catch(Exception e)
        {
            throw new RuntimeException((new StringBuilder()).append("exception getting encryption parameters ").append(e).toString());
        }
        return null;
    }

    /**
     * @deprecated Method getContentStream is deprecated
     */

    public CMSTypedStream getContentStream(Key key, String prov)
        throws CMSException, NoSuchProviderException
    {
        return getContentStream(key, CMSUtils.getProvider(prov));
    }

    /**
     * @deprecated Method getContentStream is deprecated
     */

    public CMSTypedStream getContentStream(Key key, Provider prov)
        throws CMSException
    {
        try
        {
            CMSEnvelopedHelper helper = CMSEnvelopedHelper.INSTANCE;
            AlgorithmIdentifier kekAlg = AlgorithmIdentifier.getInstance(info.getKeyEncryptionAlgorithm());
            ASN1Sequence kekAlgParams = (ASN1Sequence)kekAlg.getParameters();
            String kekAlgName = DERObjectIdentifier.getInstance(kekAlgParams.getObjectAt(0)).getId();
            String wrapAlgName = helper.getRFC3211WrapperName(kekAlgName);
            Cipher keyCipher = helper.createSymmetricCipher(wrapAlgName, prov);
            IvParameterSpec ivSpec = new IvParameterSpec(ASN1OctetString.getInstance(kekAlgParams.getObjectAt(1)).getOctets());
            keyCipher.init(4, new SecretKeySpec(((CMSPBEKey)key).getEncoded(kekAlgName), kekAlgName), ivSpec);
            Key sKey = keyCipher.unwrap(info.getEncryptedKey().getOctets(), getContentAlgorithmName(), 3);
            return getContentFromSessionKey(sKey, prov);
        }
        catch(NoSuchAlgorithmException e)
        {
            throw new CMSException("can't find algorithm.", e);
        }
        catch(InvalidKeyException e)
        {
            throw new CMSException("key invalid in message.", e);
        }
        catch(NoSuchPaddingException e)
        {
            throw new CMSException("required padding not supported.", e);
        }
        catch(InvalidAlgorithmParameterException e)
        {
            throw new CMSException("invalid iv.", e);
        }
    }

    protected RecipientOperator getRecipientOperator(Recipient recipient)
        throws CMSException, IOException
    {
        PasswordRecipient pbeRecipient = (PasswordRecipient)recipient;
        AlgorithmIdentifier kekAlg = AlgorithmIdentifier.getInstance(info.getKeyEncryptionAlgorithm());
        ASN1Sequence kekAlgParams = (ASN1Sequence)kekAlg.getParameters();
        DERObjectIdentifier kekAlgName = DERObjectIdentifier.getInstance(kekAlgParams.getObjectAt(0));
        PBKDF2Params params = PBKDF2Params.getInstance(info.getKeyDerivationAlgorithm().getParameters());
        int keySize = ((Integer)KEYSIZES.get(kekAlgName)).intValue();
        byte derivedKey[];
        if(pbeRecipient.getPasswordConversionScheme() == 0)
        {
            PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator();
            gen.init(PBEParametersGenerator.PKCS5PasswordToBytes(pbeRecipient.getPassword()), params.getSalt(), params.getIterationCount().intValue());
            derivedKey = ((KeyParameter)gen.generateDerivedParameters(keySize)).getKey();
        } else
        {
            PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator();
            gen.init(PBEParametersGenerator.PKCS5PasswordToUTF8Bytes(pbeRecipient.getPassword()), params.getSalt(), params.getIterationCount().intValue());
            derivedKey = ((KeyParameter)gen.generateDerivedParameters(keySize)).getKey();
        }
        return pbeRecipient.getRecipientOperator(AlgorithmIdentifier.getInstance(kekAlg.getParameters()), messageAlgorithm, derivedKey, info.getEncryptedKey().getOctets());
    }

    static Map KEYSIZES;
    static Map BLOCKSIZES;
    private PasswordRecipientInfo info;

    static 
    {
        KEYSIZES = new HashMap();
        BLOCKSIZES = new HashMap();
        BLOCKSIZES.put(CMSAlgorithm.DES_EDE3_CBC, new Integer(8));
        BLOCKSIZES.put(CMSAlgorithm.AES128_CBC, new Integer(16));
        BLOCKSIZES.put(CMSAlgorithm.AES192_CBC, new Integer(16));
        BLOCKSIZES.put(CMSAlgorithm.AES256_CBC, new Integer(16));
        KEYSIZES.put(CMSAlgorithm.DES_EDE3_CBC, new Integer(192));
        KEYSIZES.put(CMSAlgorithm.AES128_CBC, new Integer(128));
        KEYSIZES.put(CMSAlgorithm.AES192_CBC, new Integer(192));
        KEYSIZES.put(CMSAlgorithm.AES256_CBC, new Integer(256));
    }
}
