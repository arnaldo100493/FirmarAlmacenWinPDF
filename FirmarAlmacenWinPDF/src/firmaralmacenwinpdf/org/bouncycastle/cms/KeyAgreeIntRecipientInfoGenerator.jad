// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   KeyAgreeIntRecipientInfoGenerator.java

package org.bouncycastle.cms;

import java.io.IOException;
import java.security.*;
import java.security.cert.X509Certificate;
import java.security.interfaces.ECPublicKey;
import java.util.*;
import javax.crypto.*;
import org.bouncycastle.asn1.*;
import org.bouncycastle.asn1.cms.*;
import org.bouncycastle.asn1.cms.ecc.MQVuserKeyingMaterial;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
import org.bouncycastle.jce.spec.MQVPrivateKeySpec;
import org.bouncycastle.jce.spec.MQVPublicKeySpec;

// Referenced classes of package org.bouncycastle.cms:
//            IntRecipientInfoGenerator, CMSEnvelopedGenerator, CMSUtils, CMSEnvelopedHelper

class KeyAgreeIntRecipientInfoGenerator
    implements IntRecipientInfoGenerator
{

    KeyAgreeIntRecipientInfoGenerator()
    {
    }

    void setKeyAgreementOID(DERObjectIdentifier keyAgreementOID)
    {
        this.keyAgreementOID = keyAgreementOID;
    }

    void setKeyEncryptionOID(DERObjectIdentifier keyEncryptionOID)
    {
        this.keyEncryptionOID = keyEncryptionOID;
    }

    void setRecipientCerts(Collection recipientCerts)
    {
        this.recipientCerts = new ArrayList(recipientCerts);
    }

    void setSenderKeyPair(KeyPair senderKeyPair)
    {
        this.senderKeyPair = senderKeyPair;
    }

    public RecipientInfo generate(SecretKey contentEncryptionKey, SecureRandom random, Provider prov)
        throws GeneralSecurityException
    {
        PublicKey senderPublicKey = senderKeyPair.getPublic();
        PrivateKey senderPrivateKey = senderKeyPair.getPrivate();
        OriginatorIdentifierOrKey originator;
        try
        {
            originator = new OriginatorIdentifierOrKey(createOriginatorPublicKey(senderPublicKey));
        }
        catch(IOException e)
        {
            throw new InvalidKeyException((new StringBuilder()).append("cannot extract originator public key: ").append(e).toString());
        }
        ASN1OctetString ukm = null;
        if(keyAgreementOID.getId().equals(CMSEnvelopedGenerator.ECMQV_SHA1KDF))
            try
            {
                java.security.spec.ECParameterSpec ecParamSpec = ((ECPublicKey)senderPublicKey).getParams();
                KeyPairGenerator ephemKPG = KeyPairGenerator.getInstance(keyAgreementOID.getId(), prov);
                ephemKPG.initialize(ecParamSpec, random);
                KeyPair ephemKP = ephemKPG.generateKeyPair();
                ukm = new DEROctetString(new MQVuserKeyingMaterial(createOriginatorPublicKey(ephemKP.getPublic()), null));
                senderPrivateKey = new MQVPrivateKeySpec(senderPrivateKey, ephemKP.getPrivate(), ephemKP.getPublic());
            }
            catch(InvalidAlgorithmParameterException e)
            {
                throw new InvalidKeyException((new StringBuilder()).append("cannot determine MQV ephemeral key pair parameters from public key: ").append(e).toString());
            }
            catch(IOException e)
            {
                throw new InvalidKeyException((new StringBuilder()).append("cannot extract MQV ephemeral public key: ").append(e).toString());
            }
        ASN1EncodableVector params = new ASN1EncodableVector();
        params.add(keyEncryptionOID);
        params.add(DERNull.INSTANCE);
        AlgorithmIdentifier keyEncAlg = new AlgorithmIdentifier(keyAgreementOID, new DERSequence(params));
        ASN1EncodableVector recipientEncryptedKeys = new ASN1EncodableVector();
        KeyAgreeRecipientIdentifier karid;
        ASN1OctetString encryptedKey;
        for(Iterator it = recipientCerts.iterator(); it.hasNext(); recipientEncryptedKeys.add(new RecipientEncryptedKey(karid, encryptedKey)))
        {
            X509Certificate recipientCert = (X509Certificate)it.next();
            karid = new KeyAgreeRecipientIdentifier(CMSUtils.getIssuerAndSerialNumber(recipientCert));
            PublicKey recipientPublicKey = recipientCert.getPublicKey();
            if(keyAgreementOID.getId().equals(CMSEnvelopedGenerator.ECMQV_SHA1KDF))
                recipientPublicKey = new MQVPublicKeySpec(recipientPublicKey, recipientPublicKey);
            KeyAgreement keyAgreement = KeyAgreement.getInstance(keyAgreementOID.getId(), prov);
            keyAgreement.init(senderPrivateKey, random);
            keyAgreement.doPhase(recipientPublicKey, true);
            SecretKey keyEncryptionKey = keyAgreement.generateSecret(keyEncryptionOID.getId());
            Cipher keyEncryptionCipher = CMSEnvelopedHelper.INSTANCE.createSymmetricCipher(keyEncryptionOID.getId(), prov);
            keyEncryptionCipher.init(3, keyEncryptionKey, random);
            byte encryptedKeyBytes[] = keyEncryptionCipher.wrap(contentEncryptionKey);
            encryptedKey = new DEROctetString(encryptedKeyBytes);
        }

        return new RecipientInfo(new KeyAgreeRecipientInfo(originator, ukm, keyEncAlg, new DERSequence(recipientEncryptedKeys)));
    }

    private static OriginatorPublicKey createOriginatorPublicKey(PublicKey publicKey)
        throws IOException
    {
        SubjectPublicKeyInfo spki = SubjectPublicKeyInfo.getInstance(ASN1Object.fromByteArray(publicKey.getEncoded()));
        return new OriginatorPublicKey(new AlgorithmIdentifier(spki.getAlgorithmId().getObjectId(), DERNull.INSTANCE), spki.getPublicKeyData().getBytes());
    }

    private DERObjectIdentifier keyAgreementOID;
    private DERObjectIdentifier keyEncryptionOID;
    private ArrayList recipientCerts;
    private KeyPair senderKeyPair;
}
