// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   RecipientInformation.java

package org.bouncycastle.cms;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.security.*;
import javax.crypto.Mac;
import javax.crypto.SecretKey;
import org.bouncycastle.asn1.*;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.util.io.Streams;

// Referenced classes of package org.bouncycastle.cms:
//            CMSException, CMSTypedStream, CMSReadable, CMSSecureReadable, 
//            CMSEnvelopedHelper, CMSUtils, RecipientOperator, AuthAttributesProvider, 
//            RecipientId, Recipient

public abstract class RecipientInformation
{

    RecipientInformation(AlgorithmIdentifier keyEncAlg, AlgorithmIdentifier messageAlgorithm, CMSSecureReadable secureReadable, AuthAttributesProvider additionalData)
    {
        this.keyEncAlg = keyEncAlg;
        this.messageAlgorithm = messageAlgorithm;
        this.secureReadable = secureReadable;
        this.additionalData = additionalData;
    }

    String getContentAlgorithmName()
    {
        AlgorithmIdentifier algorithm = secureReadable.getAlgorithm();
        return CMSEnvelopedHelper.INSTANCE.getSymmetricCipherName(algorithm.getObjectId().getId());
    }

    public RecipientId getRID()
    {
        return rid;
    }

    private byte[] encodeObj(DEREncodable obj)
        throws IOException
    {
        if(obj != null)
            return obj.getDERObject().getEncoded();
        else
            return null;
    }

    public String getKeyEncryptionAlgOID()
    {
        return keyEncAlg.getObjectId().getId();
    }

    public byte[] getKeyEncryptionAlgParams()
    {
        try
        {
            return encodeObj(keyEncAlg.getParameters());
        }
        catch(Exception e)
        {
            throw new RuntimeException((new StringBuilder()).append("exception getting encryption parameters ").append(e).toString());
        }
    }

    public AlgorithmParameters getKeyEncryptionAlgorithmParameters(String provider)
        throws CMSException, NoSuchProviderException
    {
        return getKeyEncryptionAlgorithmParameters(CMSUtils.getProvider(provider));
    }

    public AlgorithmParameters getKeyEncryptionAlgorithmParameters(Provider provider)
        throws CMSException
    {
        byte enc[];
        AlgorithmParameters params;
        try
        {
            enc = encodeObj(keyEncAlg.getParameters());
            if(enc == null)
                return null;
        }
        catch(NoSuchAlgorithmException e)
        {
            throw new CMSException("can't find parameters for algorithm", e);
        }
        catch(IOException e)
        {
            throw new CMSException("can't find parse parameters", e);
        }
        params = CMSEnvelopedHelper.INSTANCE.createAlgorithmParameters(getKeyEncryptionAlgOID(), provider);
        params.init(enc, "ASN.1");
        return params;
    }

    protected CMSTypedStream getContentFromSessionKey(Key sKey, Provider provider)
        throws CMSException
    {
        CMSReadable readable = secureReadable.getReadable((SecretKey)sKey, provider);
        try
        {
            return new CMSTypedStream(readable.getInputStream());
        }
        catch(IOException e)
        {
            throw new CMSException("error getting .", e);
        }
    }

    /**
     * @deprecated Method getContent is deprecated
     */

    public byte[] getContent(Key key, String provider)
        throws CMSException, NoSuchProviderException
    {
        return getContent(key, CMSUtils.getProvider(provider));
    }

    /**
     * @deprecated Method getContent is deprecated
     */

    public byte[] getContent(Key key, Provider provider)
        throws CMSException
    {
        try
        {
            return CMSUtils.streamToByteArray(getContentStream(key, provider).getContentStream());
        }
        catch(IOException e)
        {
            throw new RuntimeException((new StringBuilder()).append("unable to parse internal stream: ").append(e).toString());
        }
    }

    public byte[] getContentDigest()
    {
        if(secureReadable instanceof CMSEnvelopedHelper.CMSDigestAuthenticatedSecureReadable)
            return ((CMSEnvelopedHelper.CMSDigestAuthenticatedSecureReadable)secureReadable).getDigest();
        else
            return null;
    }

    public byte[] getMac()
    {
        if(resultMac == null)
            if(operator != null)
            {
                if(operator.isMacBased())
                {
                    if(additionalData != null)
                        try
                        {
                            Streams.drain(operator.getInputStream(new ByteArrayInputStream(additionalData.getAuthAttributes().getDEREncoded())));
                        }
                        catch(IOException e)
                        {
                            e.printStackTrace();
                        }
                    resultMac = operator.getMac();
                }
            } else
            {
                Object cryptoObject = secureReadable.getCryptoObject();
                if(cryptoObject instanceof Mac)
                    resultMac = ((Mac)cryptoObject).doFinal();
            }
        return resultMac;
    }

    public byte[] getContent(Recipient recipient)
        throws CMSException
    {
        try
        {
            return CMSUtils.streamToByteArray(getContentStream(recipient).getContentStream());
        }
        catch(IOException e)
        {
            throw new CMSException((new StringBuilder()).append("unable to parse internal stream: ").append(e.getMessage()).toString(), e);
        }
    }

    /**
     * @deprecated Method getContentStream is deprecated
     */

    public CMSTypedStream getContentStream(Key key, String provider)
        throws CMSException, NoSuchProviderException
    {
        return getContentStream(key, CMSUtils.getProvider(provider));
    }

    /**
     * @deprecated Method getContentStream is deprecated
     */

    public abstract CMSTypedStream getContentStream(Key key, Provider provider)
        throws CMSException;

    public CMSTypedStream getContentStream(Recipient recipient)
        throws CMSException, IOException
    {
        operator = getRecipientOperator(recipient);
        if(additionalData != null)
            return new CMSTypedStream(secureReadable.getInputStream());
        else
            return new CMSTypedStream(operator.getInputStream(secureReadable.getInputStream()));
    }

    protected abstract RecipientOperator getRecipientOperator(Recipient recipient)
        throws CMSException, IOException;

    protected RecipientId rid;
    protected AlgorithmIdentifier keyEncAlg;
    protected AlgorithmIdentifier messageAlgorithm;
    private CMSSecureReadable secureReadable;
    private AuthAttributesProvider additionalData;
    private byte resultMac[];
    private RecipientOperator operator;
}
