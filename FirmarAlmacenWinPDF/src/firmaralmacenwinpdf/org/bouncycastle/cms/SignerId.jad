// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   SignerId.java

package org.bouncycastle.cms;

import java.io.IOException;
import java.math.BigInteger;
import java.security.cert.X509CertSelector;
import org.bouncycastle.asn1.*;
import org.bouncycastle.asn1.cms.IssuerAndSerialNumber;
import org.bouncycastle.asn1.x500.X500Name;
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
import org.bouncycastle.asn1.x509.X509Extension;
import org.bouncycastle.cert.X509CertificateHolder;
import org.bouncycastle.crypto.Digest;
import org.bouncycastle.crypto.digests.SHA1Digest;
import org.bouncycastle.util.Arrays;
import org.bouncycastle.util.Selector;

// Referenced classes of package org.bouncycastle.cms:
//            SignerInformation

public class SignerId extends X509CertSelector
    implements Selector
{

    /**
     * @deprecated Method SignerId is deprecated
     */

    public SignerId()
    {
    }

    public SignerId(byte subjectKeyId[])
    {
        super.setSubjectKeyIdentifier((new DEROctetString(subjectKeyId)).getDEREncoded());
        this.subjectKeyId = subjectKeyId;
    }

    public SignerId(X500Name issuer, BigInteger serialNumber)
    {
        this.issuer = issuer;
        this.serialNumber = serialNumber;
        try
        {
            setIssuer(issuer.getDEREncoded());
        }
        catch(IOException e)
        {
            throw new IllegalArgumentException((new StringBuilder()).append("invalid issuer: ").append(e.getMessage()).toString());
        }
        setSerialNumber(serialNumber);
    }

    public int hashCode()
    {
        int code = Arrays.hashCode(subjectKeyId);
        if(serialNumber != null)
            code ^= serialNumber.hashCode();
        if(issuer != null)
            code ^= issuer.hashCode();
        return code;
    }

    public boolean equals(Object o)
    {
        if(!(o instanceof SignerId))
        {
            return false;
        } else
        {
            SignerId id = (SignerId)o;
            return Arrays.areEqual(subjectKeyId, id.subjectKeyId) && equalsObj(serialNumber, id.serialNumber) && equalsObj(issuer, id.issuer);
        }
    }

    private boolean equalsObj(Object a, Object b)
    {
        return a == null ? b == null : a.equals(b);
    }

    public boolean match(Object obj)
    {
        if(obj instanceof X509CertificateHolder)
        {
            X509CertificateHolder certHldr = (X509CertificateHolder)obj;
            if(getSerialNumber() != null)
            {
                IssuerAndSerialNumber iAndS = certHldr.getIssuerAndSerialNumber();
                return iAndS.getName().equals(issuer) && iAndS.getSerialNumber().getValue().equals(serialNumber);
            }
            if(getSubjectKeyIdentifier() != null)
            {
                X509Extension ext = certHldr.getExtension(X509Extension.subjectKeyIdentifier);
                if(ext == null)
                {
                    Digest dig = new SHA1Digest();
                    byte hash[] = new byte[dig.getDigestSize()];
                    byte spkiEnc[] = certHldr.getSubjectPublicKeyInfo().getDEREncoded();
                    dig.update(spkiEnc, 0, spkiEnc.length);
                    dig.doFinal(hash, 0);
                    return Arrays.areEqual(subjectKeyId, hash);
                } else
                {
                    byte subKeyID[] = ASN1OctetString.getInstance(ext.getParsedValue()).getOctets();
                    return Arrays.areEqual(subjectKeyId, subKeyID);
                }
            }
        } else
        {
            if(obj instanceof byte[])
                return Arrays.areEqual(subjectKeyId, (byte[])(byte[])obj);
            if(obj instanceof SignerInformation)
                return ((SignerInformation)obj).getSID().equals(this);
        }
        return false;
    }

    private byte subjectKeyId[];
    private X500Name issuer;
    private BigInteger serialNumber;
}
