// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   CMSEnvelopedHelper.java

package org.bouncycastle.cms;

import java.io.IOException;
import java.security.*;
import java.security.spec.InvalidParameterSpecException;
import javax.crypto.*;
import javax.crypto.spec.IvParameterSpec;
import org.bouncycastle.asn1.ASN1Null;
import org.bouncycastle.asn1.ASN1Object;

// Referenced classes of package org.bouncycastle.cms:
//            CMSException, CMSEnvelopedHelper

class CMSEnvelopedHelper$CMSAuthenticatedSecureReadable$1
    implements CMSEnvelopedHelper.JCECallback
{

    public Object doInJCE()
        throws CMSException, InvalidAlgorithmParameterException, InvalidKeyException, InvalidParameterSpecException, NoSuchAlgorithmException, NoSuchPaddingException
    {
        Mac mac = CMSEnvelopedHelper.INSTANCE.getMac(val$macAlg, val$provider);
        if(val$sParams != null && !(val$sParams instanceof ASN1Null))
        {
            AlgorithmParameters params = CMSEnvelopedHelper.INSTANCE.createAlgorithmParameters(val$macAlg, val$provider);
            try
            {
                params.init(val$sParams.getEncoded(), "ASN.1");
            }
            catch(IOException e)
            {
                throw new CMSException("error decoding algorithm parameters.", e);
            }
            mac.init(val$sKey, params.getParameterSpec(javax/crypto/spec/IvParameterSpec));
        } else
        {
            mac.init(val$sKey);
        }
        return mac;
    }

    final String val$macAlg;
    final Provider val$provider;
    final ASN1Object val$sParams;
    final SecretKey val$sKey;
    final CMSEnvelopedHelper.CMSAuthenticatedSecureReadable this$0;

    CMSEnvelopedHelper$CMSAuthenticatedSecureReadable$1()
    {
        this$0 = final_cmsauthenticatedsecurereadable;
        val$macAlg = s;
        val$provider = provider1;
        val$sParams = asn1object;
        val$sKey = SecretKey.this;
        super();
    }
}
