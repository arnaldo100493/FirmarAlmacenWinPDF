// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   CMSEnvelopedHelper.java

package org.bouncycastle.cms;

import java.io.IOException;
import java.io.InputStream;
import java.security.*;
import java.security.spec.InvalidParameterSpecException;
import javax.crypto.*;
import javax.crypto.spec.IvParameterSpec;
import org.bouncycastle.asn1.*;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.util.io.TeeInputStream;

// Referenced classes of package org.bouncycastle.cms:
//            CMSProcessableInputStream, MacOutputStream, CMSException, CMSSecureReadable, 
//            CMSReadable, CMSEnvelopedHelper

static class CMSEnvelopedHelper$CMSAuthenticatedSecureReadable
    implements CMSSecureReadable
{

    public AlgorithmIdentifier getAlgorithm()
    {
        return algorithm;
    }

    public Object getCryptoObject()
    {
        return mac;
    }

    public InputStream getInputStream()
        throws IOException, CMSException
    {
        return readable.getInputStream();
    }

    public CMSReadable getReadable(final SecretKey sKey, final Provider provider)
        throws CMSException
    {
        final String macAlg = algorithm.getObjectId().getId();
        final ASN1Object sParams = (ASN1Object)algorithm.getParameters();
        mac = (Mac)CMSEnvelopedHelper.execute(new CMSEnvelopedHelper.JCECallback() {

            public Object doInJCE()
                throws CMSException, InvalidAlgorithmParameterException, InvalidKeyException, InvalidParameterSpecException, NoSuchAlgorithmException, NoSuchPaddingException
            {
                Mac mac = CMSEnvelopedHelper.INSTANCE.getMac(macAlg, provider);
                if(sParams != null && !(sParams instanceof ASN1Null))
                {
                    AlgorithmParameters params = CMSEnvelopedHelper.INSTANCE.createAlgorithmParameters(macAlg, provider);
                    try
                    {
                        params.init(sParams.getEncoded(), "ASN.1");
                    }
                    catch(IOException e)
                    {
                        throw new CMSException("error decoding algorithm parameters.", e);
                    }
                    mac.init(sKey, params.getParameterSpec(javax/crypto/spec/IvParameterSpec));
                } else
                {
                    mac.init(sKey);
                }
                return mac;
            }

            final String val$macAlg;
            final Provider val$provider;
            final ASN1Object val$sParams;
            final SecretKey val$sKey;
            final CMSEnvelopedHelper.CMSAuthenticatedSecureReadable this$0;

            
            {
                this$0 = CMSEnvelopedHelper.CMSAuthenticatedSecureReadable.this;
                macAlg = s;
                provider = provider1;
                sParams = asn1object;
                sKey = secretkey;
                super();
            }
        }
);
        try
        {
            return new CMSProcessableInputStream(new TeeInputStream(readable.getInputStream(), new MacOutputStream(mac)));
        }
        catch(IOException e)
        {
            throw new CMSException("error reading content.", e);
        }
    }

    private AlgorithmIdentifier algorithm;
    private Mac mac;
    private CMSReadable readable;

    CMSEnvelopedHelper$CMSAuthenticatedSecureReadable(AlgorithmIdentifier algorithm, CMSReadable readable)
    {
        this.algorithm = algorithm;
        this.readable = readable;
    }
}
