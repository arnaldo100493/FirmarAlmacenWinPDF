// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   CMSSignedDataGenerator.java

package org.bouncycastle.cms;

import java.io.*;
import java.security.*;
import java.security.cert.CertificateEncodingException;
import java.security.cert.X509Certificate;
import java.util.*;
import org.bouncycastle.asn1.*;
import org.bouncycastle.asn1.cms.*;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;

// Referenced classes of package org.bouncycastle.cms:
//            CMSSignedGenerator, DefaultSignedAttributeTableGenerator, SimpleAttributeTableGenerator, SignerInformation, 
//            SignerInfoGenerator, CMSException, CMSSignedData, CMSTypedData, 
//            CMSProcessableByteArray, CMSProcessable, CMSUtils, CMSSignedHelper, 
//            CMSAttributeTableGenerator, SignerInformationStore, DigOutputStream, SigOutputStream

public class CMSSignedDataGenerator extends CMSSignedGenerator
{
    private class SignerInf
    {

        AlgorithmIdentifier getDigestAlgorithmID()
        {
            return new AlgorithmIdentifier(new DERObjectIdentifier(digestOID), new DERNull());
        }

        SignerInfo toSignerInfo(DERObjectIdentifier contentType, CMSProcessable content, SecureRandom random, Provider sigProvider, boolean addDefaultAttributes)
            throws IOException, SignatureException, InvalidKeyException, NoSuchAlgorithmException, CertificateEncodingException, CMSException
        {
            AlgorithmIdentifier digAlgId = getDigestAlgorithmID();
            String digestName = CMSSignedHelper.INSTANCE.getDigestAlgName(digestOID);
            String signatureName = (new StringBuilder()).append(digestName).append("with").append(CMSSignedHelper.INSTANCE.getEncryptionAlgName(encOID)).toString();
            Signature sig = CMSSignedHelper.INSTANCE.getSignatureInstance(signatureName, sigProvider);
            MessageDigest dig = CMSSignedHelper.INSTANCE.getDigestInstance(digestName, sigProvider);
            AlgorithmIdentifier encAlgId = getEncAlgorithmIdentifier(encOID, sig);
            if(content != null)
                content.write(new DigOutputStream(dig));
            byte hash[] = dig.digest();
            digests.put(digestOID, hash.clone());
            AttributeTable signed;
            if(addDefaultAttributes)
            {
                Map parameters = getBaseParameters(contentType, digAlgId, hash);
                signed = sAttr == null ? null : sAttr.getAttributes(Collections.unmodifiableMap(parameters));
            } else
            {
                signed = baseSignedTable;
            }
            sig.initSign(key, random);
            OutputStream sigStr = new BufferedOutputStream(new SigOutputStream(sig));
            ASN1Set signedAttr = null;
            if(signed != null)
            {
                if(contentType == null && signed.get(CMSAttributes.contentType) != null)
                {
                    Hashtable tmpSigned = signed.toHashtable();
                    tmpSigned.remove(CMSAttributes.contentType);
                    signed = new AttributeTable(tmpSigned);
                }
                signedAttr = getAttributeSet(signed);
                (new DEROutputStream(sigStr)).writeObject(signedAttr);
            } else
            if(content != null)
                content.write(sigStr);
            sigStr.close();
            byte sigBytes[] = sig.sign();
            ASN1Set unsignedAttr = null;
            if(unsAttr != null)
            {
                Map parameters = getBaseParameters(contentType, digAlgId, hash);
                parameters.put("encryptedDigest", sigBytes.clone());
                AttributeTable unsigned = unsAttr.getAttributes(Collections.unmodifiableMap(parameters));
                unsignedAttr = getAttributeSet(unsigned);
            }
            return new SignerInfo(signerIdentifier, digAlgId, signedAttr, encAlgId, new DEROctetString(sigBytes), unsignedAttr);
        }

        final PrivateKey key;
        final SignerIdentifier signerIdentifier;
        final String digestOID;
        final String encOID;
        final CMSAttributeTableGenerator sAttr;
        final CMSAttributeTableGenerator unsAttr;
        final AttributeTable baseSignedTable;
        final CMSSignedDataGenerator this$0;

        SignerInf(PrivateKey key, SignerIdentifier signerIdentifier, String digestOID, String encOID, CMSAttributeTableGenerator sAttr, CMSAttributeTableGenerator unsAttr, 
                AttributeTable baseSignedTable)
        {
            this$0 = CMSSignedDataGenerator.this;
            super();
            this.key = key;
            this.signerIdentifier = signerIdentifier;
            this.digestOID = digestOID;
            this.encOID = encOID;
            this.sAttr = sAttr;
            this.unsAttr = unsAttr;
            this.baseSignedTable = baseSignedTable;
        }
    }


    public CMSSignedDataGenerator()
    {
        signerInfs = new ArrayList();
    }

    public CMSSignedDataGenerator(SecureRandom rand)
    {
        super(rand);
        signerInfs = new ArrayList();
    }

    /**
     * @deprecated Method addSigner is deprecated
     */

    public void addSigner(PrivateKey key, X509Certificate cert, String digestOID)
        throws IllegalArgumentException
    {
        addSigner(key, cert, getEncOID(key, digestOID), digestOID);
    }

    /**
     * @deprecated Method addSigner is deprecated
     */

    public void addSigner(PrivateKey key, X509Certificate cert, String encryptionOID, String digestOID)
        throws IllegalArgumentException
    {
        doAddSigner(key, getSignerIdentifier(cert), encryptionOID, digestOID, new DefaultSignedAttributeTableGenerator(), null, null);
    }

    /**
     * @deprecated Method addSigner is deprecated
     */

    public void addSigner(PrivateKey key, byte subjectKeyID[], String digestOID)
        throws IllegalArgumentException
    {
        addSigner(key, subjectKeyID, getEncOID(key, digestOID), digestOID);
    }

    /**
     * @deprecated Method addSigner is deprecated
     */

    public void addSigner(PrivateKey key, byte subjectKeyID[], String encryptionOID, String digestOID)
        throws IllegalArgumentException
    {
        doAddSigner(key, getSignerIdentifier(subjectKeyID), encryptionOID, digestOID, new DefaultSignedAttributeTableGenerator(), null, null);
    }

    /**
     * @deprecated Method addSigner is deprecated
     */

    public void addSigner(PrivateKey key, X509Certificate cert, String digestOID, AttributeTable signedAttr, AttributeTable unsignedAttr)
        throws IllegalArgumentException
    {
        addSigner(key, cert, getEncOID(key, digestOID), digestOID, signedAttr, unsignedAttr);
    }

    /**
     * @deprecated Method addSigner is deprecated
     */

    public void addSigner(PrivateKey key, X509Certificate cert, String encryptionOID, String digestOID, AttributeTable signedAttr, AttributeTable unsignedAttr)
        throws IllegalArgumentException
    {
        doAddSigner(key, getSignerIdentifier(cert), encryptionOID, digestOID, new DefaultSignedAttributeTableGenerator(signedAttr), new SimpleAttributeTableGenerator(unsignedAttr), signedAttr);
    }

    /**
     * @deprecated Method addSigner is deprecated
     */

    public void addSigner(PrivateKey key, byte subjectKeyID[], String digestOID, AttributeTable signedAttr, AttributeTable unsignedAttr)
        throws IllegalArgumentException
    {
        addSigner(key, subjectKeyID, getEncOID(key, digestOID), digestOID, signedAttr, unsignedAttr);
    }

    /**
     * @deprecated Method addSigner is deprecated
     */

    public void addSigner(PrivateKey key, byte subjectKeyID[], String encryptionOID, String digestOID, AttributeTable signedAttr, AttributeTable unsignedAttr)
        throws IllegalArgumentException
    {
        doAddSigner(key, getSignerIdentifier(subjectKeyID), encryptionOID, digestOID, new DefaultSignedAttributeTableGenerator(signedAttr), new SimpleAttributeTableGenerator(unsignedAttr), signedAttr);
    }

    /**
     * @deprecated Method addSigner is deprecated
     */

    public void addSigner(PrivateKey key, X509Certificate cert, String digestOID, CMSAttributeTableGenerator signedAttrGen, CMSAttributeTableGenerator unsignedAttrGen)
        throws IllegalArgumentException
    {
        addSigner(key, cert, getEncOID(key, digestOID), digestOID, signedAttrGen, unsignedAttrGen);
    }

    /**
     * @deprecated Method addSigner is deprecated
     */

    public void addSigner(PrivateKey key, X509Certificate cert, String encryptionOID, String digestOID, CMSAttributeTableGenerator signedAttrGen, CMSAttributeTableGenerator unsignedAttrGen)
        throws IllegalArgumentException
    {
        doAddSigner(key, getSignerIdentifier(cert), encryptionOID, digestOID, signedAttrGen, unsignedAttrGen, null);
    }

    /**
     * @deprecated Method addSigner is deprecated
     */

    public void addSigner(PrivateKey key, byte subjectKeyID[], String digestOID, CMSAttributeTableGenerator signedAttrGen, CMSAttributeTableGenerator unsignedAttrGen)
        throws IllegalArgumentException
    {
        addSigner(key, subjectKeyID, getEncOID(key, digestOID), digestOID, signedAttrGen, unsignedAttrGen);
    }

    /**
     * @deprecated Method addSigner is deprecated
     */

    public void addSigner(PrivateKey key, byte subjectKeyID[], String encryptionOID, String digestOID, CMSAttributeTableGenerator signedAttrGen, CMSAttributeTableGenerator unsignedAttrGen)
        throws IllegalArgumentException
    {
        doAddSigner(key, getSignerIdentifier(subjectKeyID), encryptionOID, digestOID, signedAttrGen, unsignedAttrGen, null);
    }

    private void doAddSigner(PrivateKey key, SignerIdentifier signerIdentifier, String encryptionOID, String digestOID, CMSAttributeTableGenerator signedAttrGen, CMSAttributeTableGenerator unsignedAttrGen, AttributeTable baseSignedTable)
        throws IllegalArgumentException
    {
        signerInfs.add(new SignerInf(key, signerIdentifier, digestOID, encryptionOID, signedAttrGen, unsignedAttrGen, baseSignedTable));
    }

    public CMSSignedData generate(CMSProcessable content, String sigProvider)
        throws NoSuchAlgorithmException, NoSuchProviderException, CMSException
    {
        return generate(content, CMSUtils.getProvider(sigProvider));
    }

    public CMSSignedData generate(CMSProcessable content, Provider sigProvider)
        throws NoSuchAlgorithmException, CMSException
    {
        return generate(content, false, sigProvider);
    }

    /**
     * @deprecated Method generate is deprecated
     */

    public CMSSignedData generate(String eContentType, CMSProcessable content, boolean encapsulate, String sigProvider)
        throws NoSuchAlgorithmException, NoSuchProviderException, CMSException
    {
        return generate(eContentType, content, encapsulate, CMSUtils.getProvider(sigProvider), true);
    }

    /**
     * @deprecated Method generate is deprecated
     */

    public CMSSignedData generate(String eContentType, CMSProcessable content, boolean encapsulate, Provider sigProvider)
        throws NoSuchAlgorithmException, CMSException
    {
        return generate(eContentType, content, encapsulate, sigProvider, true);
    }

    /**
     * @deprecated Method generate is deprecated
     */

    public CMSSignedData generate(String eContentType, CMSProcessable content, boolean encapsulate, String sigProvider, boolean addDefaultAttributes)
        throws NoSuchAlgorithmException, NoSuchProviderException, CMSException
    {
        return generate(eContentType, content, encapsulate, CMSUtils.getProvider(sigProvider), addDefaultAttributes);
    }

    public CMSSignedData generate(String eContentType, CMSProcessable content, boolean encapsulate, Provider sigProvider, boolean addDefaultAttributes)
        throws NoSuchAlgorithmException, CMSException
    {
        ASN1EncodableVector digestAlgs = new ASN1EncodableVector();
        ASN1EncodableVector signerInfos = new ASN1EncodableVector();
        digests.clear();
        SignerInformation signer;
        for(Iterator it = _signers.iterator(); it.hasNext(); signerInfos.add(signer.toSignerInfo()))
        {
            signer = (SignerInformation)it.next();
            digestAlgs.add(CMSSignedHelper.INSTANCE.fixAlgID(signer.getDigestAlgorithmID()));
        }

        boolean isCounterSignature = eContentType == null;
        ASN1ObjectIdentifier contentTypeOID = isCounterSignature ? null : new ASN1ObjectIdentifier(eContentType);
        SignerInfo inf;
        for(Iterator it = signerGens.iterator(); it.hasNext(); signerInfos.add(inf))
        {
            SignerInfoGenerator sGen = (SignerInfoGenerator)it.next();
            if(content != null)
            {
                OutputStream cOut = sGen.getCalculatingOutputStream();
                try
                {
                    content.write(cOut);
                    cOut.close();
                }
                catch(IOException e)
                {
                    throw new CMSException((new StringBuilder()).append("data processing exception: ").append(e.getMessage()).toString(), e);
                }
            }
            inf = sGen.generate(contentTypeOID);
            digestAlgs.add(inf.getDigestAlgorithm());
        }

        for(Iterator it = signerInfs.iterator(); it.hasNext();)
        {
            SignerInf signer = (SignerInf)it.next();
            try
            {
                digestAlgs.add(signer.getDigestAlgorithmID());
                signerInfos.add(signer.toSignerInfo(contentTypeOID, content, rand, sigProvider, addDefaultAttributes));
            }
            catch(IOException e)
            {
                throw new CMSException("encoding error.", e);
            }
            catch(InvalidKeyException e)
            {
                throw new CMSException("key inappropriate for signature.", e);
            }
            catch(SignatureException e)
            {
                throw new CMSException("error creating signature.", e);
            }
            catch(CertificateEncodingException e)
            {
                throw new CMSException("error creating sid.", e);
            }
        }

        ASN1Set certificates = null;
        if(certs.size() != 0)
            certificates = CMSUtils.createBerSetFromList(certs);
        ASN1Set certrevlist = null;
        if(crls.size() != 0)
            certrevlist = CMSUtils.createBerSetFromList(crls);
        ASN1OctetString octs = null;
        if(encapsulate)
        {
            ByteArrayOutputStream bOut = new ByteArrayOutputStream();
            if(content != null)
                try
                {
                    content.write(bOut);
                }
                catch(IOException e)
                {
                    throw new CMSException("encapsulation error.", e);
                }
            octs = new BERConstructedOctetString(bOut.toByteArray());
        }
        ContentInfo encInfo = new ContentInfo(contentTypeOID, octs);
        SignedData sd = new SignedData(new DERSet(digestAlgs), encInfo, certificates, certrevlist, new DERSet(signerInfos));
        ContentInfo contentInfo = new ContentInfo(CMSObjectIdentifiers.signedData, sd);
        return new CMSSignedData(content, contentInfo);
    }

    /**
     * @deprecated Method generate is deprecated
     */

    public CMSSignedData generate(CMSProcessable content, boolean encapsulate, String sigProvider)
        throws NoSuchAlgorithmException, NoSuchProviderException, CMSException
    {
        if(content instanceof CMSTypedData)
            return generate(((CMSTypedData)content).getContentType().getId(), content, encapsulate, sigProvider);
        else
            return generate(DATA, content, encapsulate, sigProvider);
    }

    /**
     * @deprecated Method generate is deprecated
     */

    public CMSSignedData generate(CMSProcessable content, boolean encapsulate, Provider sigProvider)
        throws NoSuchAlgorithmException, CMSException
    {
        if(content instanceof CMSTypedData)
            return generate(((CMSTypedData)content).getContentType().getId(), content, encapsulate, sigProvider);
        else
            return generate(DATA, content, encapsulate, sigProvider);
    }

    public CMSSignedData generate(CMSTypedData content)
        throws CMSException
    {
        return generate(content, false);
    }

    public CMSSignedData generate(CMSTypedData content, boolean encapsulate)
        throws CMSException
    {
        if(!signerInfs.isEmpty())
            throw new IllegalStateException("this method can only be used with SignerInfoGenerator");
        ASN1EncodableVector digestAlgs = new ASN1EncodableVector();
        ASN1EncodableVector signerInfos = new ASN1EncodableVector();
        digests.clear();
        SignerInformation signer;
        for(Iterator it = _signers.iterator(); it.hasNext(); signerInfos.add(signer.toSignerInfo()))
        {
            signer = (SignerInformation)it.next();
            digestAlgs.add(CMSSignedHelper.INSTANCE.fixAlgID(signer.getDigestAlgorithmID()));
        }

        ASN1ObjectIdentifier contentTypeOID = content.getContentType();
        ASN1OctetString octs = null;
        if(encapsulate)
        {
            ByteArrayOutputStream bOut = new ByteArrayOutputStream();
            if(content != null)
                try
                {
                    content.write(bOut);
                }
                catch(IOException e)
                {
                    throw new CMSException("encapsulation error.", e);
                }
            octs = new BERConstructedOctetString(bOut.toByteArray());
        }
        if(content != null)
        {
            ByteArrayOutputStream bOut = null;
            if(encapsulate)
                bOut = new ByteArrayOutputStream();
            OutputStream cOut = CMSUtils.attachSignersToOutputStream(signerGens, bOut);
            cOut = CMSUtils.getSafeOutputStream(cOut);
            try
            {
                content.write(cOut);
                cOut.close();
            }
            catch(IOException e)
            {
                throw new CMSException((new StringBuilder()).append("data processing exception: ").append(e.getMessage()).toString(), e);
            }
            if(encapsulate)
                octs = new BERConstructedOctetString(bOut.toByteArray());
        }
        Iterator it = signerGens.iterator();
        do
        {
            if(!it.hasNext())
                break;
            SignerInfoGenerator sGen = (SignerInfoGenerator)it.next();
            SignerInfo inf = sGen.generate(contentTypeOID);
            digestAlgs.add(inf.getDigestAlgorithm());
            signerInfos.add(inf);
            byte calcDigest[] = sGen.getCalculatedDigest();
            if(calcDigest != null)
                digests.put(inf.getDigestAlgorithm().getAlgorithm().getId(), calcDigest);
        } while(true);
        ASN1Set certificates = null;
        if(certs.size() != 0)
            certificates = CMSUtils.createBerSetFromList(certs);
        ASN1Set certrevlist = null;
        if(crls.size() != 0)
            certrevlist = CMSUtils.createBerSetFromList(crls);
        ContentInfo encInfo = new ContentInfo(contentTypeOID, octs);
        SignedData sd = new SignedData(new DERSet(digestAlgs), encInfo, certificates, certrevlist, new DERSet(signerInfos));
        ContentInfo contentInfo = new ContentInfo(CMSObjectIdentifiers.signedData, sd);
        return new CMSSignedData(content, contentInfo);
    }

    /**
     * @deprecated Method generateCounterSigners is deprecated
     */

    public SignerInformationStore generateCounterSigners(SignerInformation signer, Provider sigProvider)
        throws NoSuchAlgorithmException, CMSException
    {
        return generate(null, new CMSProcessableByteArray(signer.getSignature()), false, sigProvider).getSignerInfos();
    }

    /**
     * @deprecated Method generateCounterSigners is deprecated
     */

    public SignerInformationStore generateCounterSigners(SignerInformation signer, String sigProvider)
        throws NoSuchAlgorithmException, NoSuchProviderException, CMSException
    {
        return generate(null, new CMSProcessableByteArray(signer.getSignature()), false, CMSUtils.getProvider(sigProvider)).getSignerInfos();
    }

    public SignerInformationStore generateCounterSigners(SignerInformation signer)
        throws NoSuchAlgorithmException, NoSuchProviderException, CMSException
    {
        return generate(new CMSProcessableByteArray(null, signer.getSignature()), false).getSignerInfos();
    }

    private List signerInfs;
}
