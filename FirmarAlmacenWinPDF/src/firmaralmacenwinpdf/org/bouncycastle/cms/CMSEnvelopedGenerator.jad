// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   CMSEnvelopedGenerator.java

package org.bouncycastle.cms;

import java.io.IOException;
import java.security.*;
import java.security.cert.X509Certificate;
import java.util.*;
import javax.crypto.SecretKey;
import javax.crypto.spec.RC2ParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.bouncycastle.asn1.*;
import org.bouncycastle.asn1.cms.KEKIdentifier;
import org.bouncycastle.asn1.kisa.KISAObjectIdentifiers;
import org.bouncycastle.asn1.nist.NISTObjectIdentifiers;
import org.bouncycastle.asn1.ntt.NTTObjectIdentifiers;
import org.bouncycastle.asn1.pkcs.PBKDF2Params;
import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.asn1.x9.X9ObjectIdentifiers;

// Referenced classes of package org.bouncycastle.cms:
//            KeyTransIntRecipientInfoGenerator, KEKIntRecipientInfoGenerator, PasswordIntRecipientInfoGenerator, KeyAgreeIntRecipientInfoGenerator, 
//            CMSException, CMSPBEKey, CMSUtils, CMSAttributeTableGenerator, 
//            RecipientInfoGenerator

public class CMSEnvelopedGenerator
{

    public CMSEnvelopedGenerator()
    {
        this(new SecureRandom());
    }

    public CMSEnvelopedGenerator(SecureRandom rand)
    {
        oldRecipientInfoGenerators = new ArrayList();
        recipientInfoGenerators = new ArrayList();
        unprotectedAttributeGenerator = null;
        this.rand = rand;
    }

    public void setUnprotectedAttributeGenerator(CMSAttributeTableGenerator unprotectedAttributeGenerator)
    {
        this.unprotectedAttributeGenerator = unprotectedAttributeGenerator;
    }

    /**
     * @deprecated Method addKeyTransRecipient is deprecated
     */

    public void addKeyTransRecipient(X509Certificate cert)
        throws IllegalArgumentException
    {
        KeyTransIntRecipientInfoGenerator ktrig = new KeyTransIntRecipientInfoGenerator();
        ktrig.setRecipientCert(cert);
        oldRecipientInfoGenerators.add(ktrig);
    }

    /**
     * @deprecated Method addKeyTransRecipient is deprecated
     */

    public void addKeyTransRecipient(PublicKey key, byte subKeyId[])
        throws IllegalArgumentException
    {
        KeyTransIntRecipientInfoGenerator ktrig = new KeyTransIntRecipientInfoGenerator();
        ktrig.setRecipientPublicKey(key);
        ktrig.setSubjectKeyIdentifier(new DEROctetString(subKeyId));
        oldRecipientInfoGenerators.add(ktrig);
    }

    /**
     * @deprecated Method addKEKRecipient is deprecated
     */

    public void addKEKRecipient(SecretKey key, byte keyIdentifier[])
    {
        addKEKRecipient(key, new KEKIdentifier(keyIdentifier, null, null));
    }

    /**
     * @deprecated Method addKEKRecipient is deprecated
     */

    public void addKEKRecipient(SecretKey key, KEKIdentifier kekIdentifier)
    {
        KEKIntRecipientInfoGenerator kekrig = new KEKIntRecipientInfoGenerator();
        kekrig.setKEKIdentifier(kekIdentifier);
        kekrig.setKeyEncryptionKey(key);
        oldRecipientInfoGenerators.add(kekrig);
    }

    /**
     * @deprecated Method addPasswordRecipient is deprecated
     */

    public void addPasswordRecipient(CMSPBEKey pbeKey, String kekAlgorithmOid)
    {
        PBKDF2Params params = new PBKDF2Params(pbeKey.getSalt(), pbeKey.getIterationCount());
        PasswordIntRecipientInfoGenerator prig = new PasswordIntRecipientInfoGenerator();
        prig.setKeyDerivationAlgorithm(new AlgorithmIdentifier(PKCSObjectIdentifiers.id_PBKDF2, params));
        prig.setKeyEncryptionKey(new SecretKeySpec(pbeKey.getEncoded(kekAlgorithmOid), kekAlgorithmOid));
        oldRecipientInfoGenerators.add(prig);
    }

    /**
     * @deprecated Method addKeyAgreementRecipient is deprecated
     */

    public void addKeyAgreementRecipient(String agreementAlgorithm, PrivateKey senderPrivateKey, PublicKey senderPublicKey, X509Certificate recipientCert, String cekWrapAlgorithm, String provider)
        throws NoSuchProviderException, NoSuchAlgorithmException, InvalidKeyException
    {
        addKeyAgreementRecipient(agreementAlgorithm, senderPrivateKey, senderPublicKey, recipientCert, cekWrapAlgorithm, CMSUtils.getProvider(provider));
    }

    /**
     * @deprecated Method addKeyAgreementRecipient is deprecated
     */

    public void addKeyAgreementRecipient(String agreementAlgorithm, PrivateKey senderPrivateKey, PublicKey senderPublicKey, X509Certificate recipientCert, String cekWrapAlgorithm, Provider provider)
        throws NoSuchAlgorithmException, InvalidKeyException
    {
        addKeyAgreementRecipients(agreementAlgorithm, senderPrivateKey, senderPublicKey, Collections.singletonList(recipientCert), cekWrapAlgorithm, provider);
    }

    /**
     * @deprecated Method addKeyAgreementRecipients is deprecated
     */

    public void addKeyAgreementRecipients(String agreementAlgorithm, PrivateKey senderPrivateKey, PublicKey senderPublicKey, Collection recipientCerts, String cekWrapAlgorithm, String provider)
        throws NoSuchProviderException, NoSuchAlgorithmException, InvalidKeyException
    {
        addKeyAgreementRecipients(agreementAlgorithm, senderPrivateKey, senderPublicKey, recipientCerts, cekWrapAlgorithm, CMSUtils.getProvider(provider));
    }

    /**
     * @deprecated Method addKeyAgreementRecipients is deprecated
     */

    public void addKeyAgreementRecipients(String agreementAlgorithm, PrivateKey senderPrivateKey, PublicKey senderPublicKey, Collection recipientCerts, String cekWrapAlgorithm, Provider provider)
        throws NoSuchAlgorithmException, InvalidKeyException
    {
        KeyAgreeIntRecipientInfoGenerator karig = new KeyAgreeIntRecipientInfoGenerator();
        karig.setKeyAgreementOID(new DERObjectIdentifier(agreementAlgorithm));
        karig.setKeyEncryptionOID(new DERObjectIdentifier(cekWrapAlgorithm));
        karig.setRecipientCerts(recipientCerts);
        karig.setSenderKeyPair(new KeyPair(senderPublicKey, senderPrivateKey));
        oldRecipientInfoGenerators.add(karig);
    }

    public void addRecipientInfoGenerator(RecipientInfoGenerator recipientGenerator)
    {
        recipientInfoGenerators.add(recipientGenerator);
    }

    protected AlgorithmIdentifier getAlgorithmIdentifier(String encryptionOID, AlgorithmParameters params)
        throws IOException
    {
        DEREncodable asn1Params;
        if(params != null)
            asn1Params = ASN1Object.fromByteArray(params.getEncoded("ASN.1"));
        else
            asn1Params = DERNull.INSTANCE;
        return new AlgorithmIdentifier(new DERObjectIdentifier(encryptionOID), asn1Params);
    }

    protected AlgorithmParameters generateParameters(String encryptionOID, SecretKey encKey, Provider encProvider)
        throws CMSException
    {
        try
        {
            AlgorithmParameterGenerator pGen = AlgorithmParameterGenerator.getInstance(encryptionOID, encProvider);
            if(encryptionOID.equals(RC2_CBC))
            {
                byte iv[] = new byte[8];
                rand.nextBytes(iv);
                try
                {
                    pGen.init(new RC2ParameterSpec(encKey.getEncoded().length * 8, iv), rand);
                }
                catch(InvalidAlgorithmParameterException e)
                {
                    throw new CMSException((new StringBuilder()).append("parameters generation error: ").append(e).toString(), e);
                }
            }
            return pGen.generateParameters();
        }
        catch(NoSuchAlgorithmException e)
        {
            return null;
        }
    }

    public static final String DES_EDE3_CBC;
    public static final String RC2_CBC;
    public static final String IDEA_CBC = "1.3.6.1.4.1.188.7.1.1.2";
    public static final String CAST5_CBC = "1.2.840.113533.7.66.10";
    public static final String AES128_CBC;
    public static final String AES192_CBC;
    public static final String AES256_CBC;
    public static final String CAMELLIA128_CBC;
    public static final String CAMELLIA192_CBC;
    public static final String CAMELLIA256_CBC;
    public static final String SEED_CBC;
    public static final String DES_EDE3_WRAP;
    public static final String AES128_WRAP;
    public static final String AES192_WRAP;
    public static final String AES256_WRAP;
    public static final String CAMELLIA128_WRAP;
    public static final String CAMELLIA192_WRAP;
    public static final String CAMELLIA256_WRAP;
    public static final String SEED_WRAP;
    public static final String ECDH_SHA1KDF;
    public static final String ECMQV_SHA1KDF;
    final List oldRecipientInfoGenerators;
    final List recipientInfoGenerators;
    protected CMSAttributeTableGenerator unprotectedAttributeGenerator;
    final SecureRandom rand;

    static 
    {
        DES_EDE3_CBC = PKCSObjectIdentifiers.des_EDE3_CBC.getId();
        RC2_CBC = PKCSObjectIdentifiers.RC2_CBC.getId();
        AES128_CBC = NISTObjectIdentifiers.id_aes128_CBC.getId();
        AES192_CBC = NISTObjectIdentifiers.id_aes192_CBC.getId();
        AES256_CBC = NISTObjectIdentifiers.id_aes256_CBC.getId();
        CAMELLIA128_CBC = NTTObjectIdentifiers.id_camellia128_cbc.getId();
        CAMELLIA192_CBC = NTTObjectIdentifiers.id_camellia192_cbc.getId();
        CAMELLIA256_CBC = NTTObjectIdentifiers.id_camellia256_cbc.getId();
        SEED_CBC = KISAObjectIdentifiers.id_seedCBC.getId();
        DES_EDE3_WRAP = PKCSObjectIdentifiers.id_alg_CMS3DESwrap.getId();
        AES128_WRAP = NISTObjectIdentifiers.id_aes128_wrap.getId();
        AES192_WRAP = NISTObjectIdentifiers.id_aes192_wrap.getId();
        AES256_WRAP = NISTObjectIdentifiers.id_aes256_wrap.getId();
        CAMELLIA128_WRAP = NTTObjectIdentifiers.id_camellia128_wrap.getId();
        CAMELLIA192_WRAP = NTTObjectIdentifiers.id_camellia192_wrap.getId();
        CAMELLIA256_WRAP = NTTObjectIdentifiers.id_camellia256_wrap.getId();
        SEED_WRAP = KISAObjectIdentifiers.id_npki_app_cmsSeed_wrap.getId();
        ECDH_SHA1KDF = X9ObjectIdentifiers.dhSinglePass_stdDH_sha1kdf_scheme.getId();
        ECMQV_SHA1KDF = X9ObjectIdentifiers.mqvSinglePass_sha1kdf_scheme.getId();
    }
}
