// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   GCMUtil.java

package org.bouncycastle.crypto.modes.gcm;

import org.bouncycastle.crypto.util.Pack;
import org.bouncycastle.util.Arrays;

abstract class GCMUtil
{

    GCMUtil()
    {
    }

    static byte[] oneAsBytes()
    {
        byte tmp[] = new byte[16];
        tmp[0] = -128;
        return tmp;
    }

    static int[] oneAsInts()
    {
        int tmp[] = new int[4];
        tmp[0] = 0x80000000;
        return tmp;
    }

    static int[] asInts(byte bs[])
    {
        int us[] = new int[4];
        us[0] = Pack.bigEndianToInt(bs, 0);
        us[1] = Pack.bigEndianToInt(bs, 4);
        us[2] = Pack.bigEndianToInt(bs, 8);
        us[3] = Pack.bigEndianToInt(bs, 12);
        return us;
    }

    static void multiply(byte block[], byte val[])
    {
        byte tmp[] = Arrays.clone(block);
        byte c[] = new byte[16];
        for(int i = 0; i < 16; i++)
        {
            byte bits = val[i];
            for(int j = 7; j >= 0; j--)
            {
                if((bits & 1 << j) != 0)
                    xor(c, tmp);
                boolean lsb = (tmp[15] & 1) != 0;
                shiftRight(tmp);
                if(lsb)
                    tmp[0] ^= 0xe1;
            }

        }

        System.arraycopy(c, 0, block, 0, 16);
    }

    static void multiplyP(int x[])
    {
        boolean lsb = (x[3] & 1) != 0;
        shiftRight(x);
        if(lsb)
            x[0] ^= 0xe1000000;
    }

    static void multiplyP8(int x[])
    {
        for(int i = 8; i != 0; i--)
            multiplyP(x);

    }

    static void shiftRight(byte block[])
    {
        int i = 0;
        int bit = 0;
        do
        {
            int b = block[i] & 0xff;
            block[i] = (byte)(b >>> 1 | bit);
            if(++i != 16)
                bit = (b & 1) << 7;
            else
                return;
        } while(true);
    }

    static void shiftRight(int block[])
    {
        int i = 0;
        int bit = 0;
        do
        {
            int b = block[i];
            block[i] = b >>> 1 | bit;
            if(++i != 4)
                bit = b << 31;
            else
                return;
        } while(true);
    }

    static void xor(byte block[], byte val[])
    {
        for(int i = 15; i >= 0; i--)
            block[i] ^= val[i];

    }

    static void xor(int block[], int val[])
    {
        for(int i = 3; i >= 0; i--)
            block[i] ^= val[i];

    }
}
