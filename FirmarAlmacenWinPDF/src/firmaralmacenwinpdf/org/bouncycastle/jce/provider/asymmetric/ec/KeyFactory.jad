// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   KeyFactory.java

package org.bouncycastle.jce.provider.asymmetric.ec;

import java.security.InvalidKeyException;
import java.security.Key;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.interfaces.ECPrivateKey;
import java.security.interfaces.ECPublicKey;
import java.security.spec.ECPrivateKeySpec;
import java.security.spec.ECPublicKeySpec;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import org.bouncycastle.jce.provider.JCEECPrivateKey;
import org.bouncycastle.jce.provider.JCEECPublicKey;
import org.bouncycastle.jce.provider.JDKKeyFactory;
import org.bouncycastle.jce.provider.ProviderUtil;
import org.bouncycastle.jce.spec.ECParameterSpec;

// Referenced classes of package org.bouncycastle.jce.provider.asymmetric.ec:
//            EC5Util

public class KeyFactory extends JDKKeyFactory
{
    public static class ECMQV extends KeyFactory
    {

        public ECMQV()
        {
            super("ECMQV");
        }
    }

    public static class ECDHC extends KeyFactory
    {

        public ECDHC()
        {
            super("ECDHC");
        }
    }

    public static class ECDH extends KeyFactory
    {

        public ECDH()
        {
            super("ECDH");
        }
    }

    public static class ECGOST3410 extends KeyFactory
    {

        public ECGOST3410()
        {
            super("ECGOST3410");
        }
    }

    public static class ECDSA extends KeyFactory
    {

        public ECDSA()
        {
            super("ECDSA");
        }
    }

    public static class EC extends KeyFactory
    {

        public EC()
        {
            super("EC");
        }
    }


    KeyFactory(String algorithm)
    {
        this.algorithm = algorithm;
    }

    protected Key engineTranslateKey(Key key)
        throws InvalidKeyException
    {
        if(key instanceof ECPublicKey)
            return new JCEECPublicKey((ECPublicKey)key);
        if(key instanceof ECPrivateKey)
            return new JCEECPrivateKey((ECPrivateKey)key);
        else
            throw new InvalidKeyException("key type unknown");
    }

    protected KeySpec engineGetKeySpec(Key key, Class spec)
        throws InvalidKeySpecException
    {
        if(spec.isAssignableFrom(java/security/spec/PKCS8EncodedKeySpec) && key.getFormat().equals("PKCS#8"))
            return new PKCS8EncodedKeySpec(key.getEncoded());
        if(spec.isAssignableFrom(java/security/spec/X509EncodedKeySpec) && key.getFormat().equals("X.509"))
            return new X509EncodedKeySpec(key.getEncoded());
        if(spec.isAssignableFrom(java/security/spec/ECPublicKeySpec) && (key instanceof ECPublicKey))
        {
            ECPublicKey k = (ECPublicKey)key;
            if(k.getParams() != null)
            {
                return new ECPublicKeySpec(k.getW(), k.getParams());
            } else
            {
                ECParameterSpec implicitSpec = ProviderUtil.getEcImplicitlyCa();
                return new ECPublicKeySpec(k.getW(), EC5Util.convertSpec(EC5Util.convertCurve(implicitSpec.getCurve(), implicitSpec.getSeed()), implicitSpec));
            }
        }
        if(spec.isAssignableFrom(java/security/spec/ECPrivateKeySpec) && (key instanceof ECPrivateKey))
        {
            ECPrivateKey k = (ECPrivateKey)key;
            if(k.getParams() != null)
            {
                return new ECPrivateKeySpec(k.getS(), k.getParams());
            } else
            {
                ECParameterSpec implicitSpec = ProviderUtil.getEcImplicitlyCa();
                return new ECPrivateKeySpec(k.getS(), EC5Util.convertSpec(EC5Util.convertCurve(implicitSpec.getCurve(), implicitSpec.getSeed()), implicitSpec));
            }
        } else
        {
            throw new RuntimeException((new StringBuilder()).append("not implemented yet ").append(key).append(" ").append(spec).toString());
        }
    }

    protected PrivateKey engineGeneratePrivate(KeySpec keySpec)
        throws InvalidKeySpecException
    {
        if(keySpec instanceof PKCS8EncodedKeySpec)
            try
            {
                JCEECPrivateKey key = (JCEECPrivateKey)JDKKeyFactory.createPrivateKeyFromDERStream(((PKCS8EncodedKeySpec)keySpec).getEncoded());
                return new JCEECPrivateKey(algorithm, key);
            }
            catch(Exception e)
            {
                throw new InvalidKeySpecException(e.toString());
            }
        if(keySpec instanceof org.bouncycastle.jce.spec.ECPrivateKeySpec)
            return new JCEECPrivateKey(algorithm, (org.bouncycastle.jce.spec.ECPrivateKeySpec)keySpec);
        if(keySpec instanceof ECPrivateKeySpec)
            return new JCEECPrivateKey(algorithm, (ECPrivateKeySpec)keySpec);
        else
            throw new InvalidKeySpecException((new StringBuilder()).append("Unknown KeySpec type: ").append(keySpec.getClass().getName()).toString());
    }

    protected PublicKey engineGeneratePublic(KeySpec keySpec)
        throws InvalidKeySpecException
    {
        if(keySpec instanceof X509EncodedKeySpec)
            try
            {
                JCEECPublicKey key = (JCEECPublicKey)JDKKeyFactory.createPublicKeyFromDERStream(((X509EncodedKeySpec)keySpec).getEncoded());
                return new JCEECPublicKey(algorithm, key);
            }
            catch(Exception e)
            {
                throw new InvalidKeySpecException(e.toString());
            }
        if(keySpec instanceof org.bouncycastle.jce.spec.ECPublicKeySpec)
            return new JCEECPublicKey(algorithm, (org.bouncycastle.jce.spec.ECPublicKeySpec)keySpec);
        if(keySpec instanceof ECPublicKeySpec)
            return new JCEECPublicKey(algorithm, (ECPublicKeySpec)keySpec);
        else
            throw new InvalidKeySpecException((new StringBuilder()).append("Unknown KeySpec type: ").append(keySpec.getClass().getName()).toString());
    }

    String algorithm;
}
