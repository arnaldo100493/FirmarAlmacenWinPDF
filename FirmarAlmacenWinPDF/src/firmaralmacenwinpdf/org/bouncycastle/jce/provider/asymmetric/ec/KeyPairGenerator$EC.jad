// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   KeyPairGenerator.java

package org.bouncycastle.jce.provider.asymmetric.ec;

import java.math.BigInteger;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidParameterException;
import java.security.KeyPair;
import java.security.SecureRandom;
import java.security.spec.AlgorithmParameterSpec;
import java.security.spec.ECGenParameterSpec;
import java.util.Hashtable;
import org.bouncycastle.asn1.DERObjectIdentifier;
import org.bouncycastle.asn1.cryptopro.ECGOST3410NamedCurves;
import org.bouncycastle.asn1.nist.NISTNamedCurves;
import org.bouncycastle.asn1.sec.SECNamedCurves;
import org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves;
import org.bouncycastle.asn1.x9.X962NamedCurves;
import org.bouncycastle.asn1.x9.X9ECParameters;
import org.bouncycastle.crypto.AsymmetricCipherKeyPair;
import org.bouncycastle.crypto.generators.ECKeyPairGenerator;
import org.bouncycastle.crypto.params.ECDomainParameters;
import org.bouncycastle.crypto.params.ECKeyGenerationParameters;
import org.bouncycastle.crypto.params.ECPrivateKeyParameters;
import org.bouncycastle.crypto.params.ECPublicKeyParameters;
import org.bouncycastle.jce.provider.JCEECPrivateKey;
import org.bouncycastle.jce.provider.JCEECPublicKey;
import org.bouncycastle.jce.provider.ProviderUtil;
import org.bouncycastle.jce.spec.ECNamedCurveSpec;
import org.bouncycastle.jce.spec.ECParameterSpec;

// Referenced classes of package org.bouncycastle.jce.provider.asymmetric.ec:
//            KeyPairGenerator, EC5Util

public static class KeyPairGenerator$EC extends KeyPairGenerator
{

    public void initialize(int strength, SecureRandom random)
    {
        this.strength = strength;
        this.random = random;
        ecParams = ecParameters.get(new Integer(strength));
        if(ecParams != null)
            try
            {
                initialize(((AlgorithmParameterSpec) ((ECGenParameterSpec)ecParams)), random);
            }
            catch(InvalidAlgorithmParameterException e)
            {
                throw new InvalidParameterException("key size not configurable.");
            }
        else
            throw new InvalidParameterException("unknown key size.");
    }

    public void initialize(AlgorithmParameterSpec params, SecureRandom random)
        throws InvalidAlgorithmParameterException
    {
        if(params instanceof ECParameterSpec)
        {
            ECParameterSpec p = (ECParameterSpec)params;
            ecParams = params;
            param = new ECKeyGenerationParameters(new ECDomainParameters(p.getCurve(), p.getG(), p.getN()), random);
            engine.init(param);
            initialised = true;
        } else
        if(params instanceof java.security.spec.ECParameterSpec)
        {
            java.security.spec.ECParameterSpec p = (java.security.spec.ECParameterSpec)params;
            ecParams = params;
            org.bouncycastle.math.ec.ECCurve curve = EC5Util.convertCurve(p.getCurve());
            org.bouncycastle.math.ec.ECPoint g = EC5Util.convertPoint(curve, p.getGenerator(), false);
            param = new ECKeyGenerationParameters(new ECDomainParameters(curve, g, p.getOrder(), BigInteger.valueOf(p.getCofactor())), random);
            engine.init(param);
            initialised = true;
        } else
        if(params instanceof ECGenParameterSpec)
        {
            String curveName = ((ECGenParameterSpec)params).getName();
            if(algorithm.equals("ECGOST3410"))
            {
                ECDomainParameters ecP = ECGOST3410NamedCurves.getByName(curveName);
                if(ecP == null)
                    throw new InvalidAlgorithmParameterException((new StringBuilder()).append("unknown curve name: ").append(curveName).toString());
                ecParams = new ECNamedCurveSpec(curveName, ecP.getCurve(), ecP.getG(), ecP.getN(), ecP.getH(), ecP.getSeed());
            } else
            {
                X9ECParameters ecP = X962NamedCurves.getByName(curveName);
                if(ecP == null)
                {
                    ecP = SECNamedCurves.getByName(curveName);
                    if(ecP == null)
                        ecP = NISTNamedCurves.getByName(curveName);
                    if(ecP == null)
                        ecP = TeleTrusTNamedCurves.getByName(curveName);
                    if(ecP == null)
                        try
                        {
                            DERObjectIdentifier oid = new DERObjectIdentifier(curveName);
                            ecP = X962NamedCurves.getByOID(oid);
                            if(ecP == null)
                                ecP = SECNamedCurves.getByOID(oid);
                            if(ecP == null)
                                ecP = NISTNamedCurves.getByOID(oid);
                            if(ecP == null)
                                ecP = TeleTrusTNamedCurves.getByOID(oid);
                            if(ecP == null)
                                throw new InvalidAlgorithmParameterException((new StringBuilder()).append("unknown curve OID: ").append(curveName).toString());
                        }
                        catch(IllegalArgumentException ex)
                        {
                            throw new InvalidAlgorithmParameterException((new StringBuilder()).append("unknown curve name: ").append(curveName).toString());
                        }
                }
                ecParams = new ECNamedCurveSpec(curveName, ecP.getCurve(), ecP.getG(), ecP.getN(), ecP.getH(), null);
            }
            java.security.spec.ECParameterSpec p = (java.security.spec.ECParameterSpec)ecParams;
            org.bouncycastle.math.ec.ECCurve curve = EC5Util.convertCurve(p.getCurve());
            org.bouncycastle.math.ec.ECPoint g = EC5Util.convertPoint(curve, p.getGenerator(), false);
            param = new ECKeyGenerationParameters(new ECDomainParameters(curve, g, p.getOrder(), BigInteger.valueOf(p.getCofactor())), random);
            engine.init(param);
            initialised = true;
        } else
        if(params == null && ProviderUtil.getEcImplicitlyCa() != null)
        {
            ECParameterSpec p = ProviderUtil.getEcImplicitlyCa();
            ecParams = params;
            param = new ECKeyGenerationParameters(new ECDomainParameters(p.getCurve(), p.getG(), p.getN()), random);
            engine.init(param);
            initialised = true;
        } else
        if(params == null && ProviderUtil.getEcImplicitlyCa() == null)
            throw new InvalidAlgorithmParameterException("null parameter passed but no implicitCA set");
        else
            throw new InvalidAlgorithmParameterException("parameter object not a ECParameterSpec");
    }

    public KeyPair generateKeyPair()
    {
        if(!initialised)
            throw new IllegalStateException("EC Key Pair Generator not initialised");
        AsymmetricCipherKeyPair pair = engine.generateKeyPair();
        ECPublicKeyParameters pub = (ECPublicKeyParameters)pair.getPublic();
        ECPrivateKeyParameters priv = (ECPrivateKeyParameters)pair.getPrivate();
        if(ecParams instanceof ECParameterSpec)
        {
            ECParameterSpec p = (ECParameterSpec)ecParams;
            JCEECPublicKey pubKey = new JCEECPublicKey(algorithm, pub, p);
            return new KeyPair(pubKey, new JCEECPrivateKey(algorithm, priv, pubKey, p));
        }
        if(ecParams == null)
        {
            return new KeyPair(new JCEECPublicKey(algorithm, pub), new JCEECPrivateKey(algorithm, priv));
        } else
        {
            java.security.spec.ECParameterSpec p = (java.security.spec.ECParameterSpec)ecParams;
            JCEECPublicKey pubKey = new JCEECPublicKey(algorithm, pub, p);
            return new KeyPair(pubKey, new JCEECPrivateKey(algorithm, priv, pubKey, p));
        }
    }

    ECKeyGenerationParameters param;
    ECKeyPairGenerator engine;
    Object ecParams;
    int strength;
    int certainty;
    SecureRandom random;
    boolean initialised;
    String algorithm;
    private static Hashtable ecParameters;

    static 
    {
        ecParameters = new Hashtable();
        ecParameters.put(new Integer(192), new ECGenParameterSpec("prime192v1"));
        ecParameters.put(new Integer(239), new ECGenParameterSpec("prime239v1"));
        ecParameters.put(new Integer(256), new ECGenParameterSpec("prime256v1"));
        ecParameters.put(new Integer(224), new ECGenParameterSpec("P-224"));
        ecParameters.put(new Integer(384), new ECGenParameterSpec("P-384"));
        ecParameters.put(new Integer(521), new ECGenParameterSpec("P-521"));
    }

    public KeyPairGenerator$EC()
    {
        super("EC");
        engine = new ECKeyPairGenerator();
        ecParams = null;
        strength = 239;
        certainty = 50;
        random = new SecureRandom();
        initialised = false;
        algorithm = "EC";
    }

    public KeyPairGenerator$EC(String algorithm)
    {
        super(algorithm);
        engine = new ECKeyPairGenerator();
        ecParams = null;
        strength = 239;
        certainty = 50;
        random = new SecureRandom();
        initialised = false;
        this.algorithm = algorithm;
    }
}
