// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   X509CRLObject.java

package org.bouncycastle.jce.provider;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.math.BigInteger;
import java.security.*;
import java.security.cert.*;
import java.util.*;
import javax.security.auth.x500.X500Principal;
import org.bouncycastle.asn1.*;
import org.bouncycastle.asn1.util.ASN1Dump;
import org.bouncycastle.asn1.x509.*;
import org.bouncycastle.jce.X509Principal;
import org.bouncycastle.util.encoders.Hex;
import org.bouncycastle.x509.extension.X509ExtensionUtil;

// Referenced classes of package org.bouncycastle.jce.provider:
//            X509CRLEntryObject, ExtCRLException, X509SignatureUtil, RFC3280CertPathUtilities, 
//            BouncyCastleProvider

public class X509CRLObject extends X509CRL
{

    public X509CRLObject(CertificateList c)
        throws CRLException
    {
        this.c = c;
        try
        {
            sigAlgName = X509SignatureUtil.getSignatureName(c.getSignatureAlgorithm());
            if(c.getSignatureAlgorithm().getParameters() != null)
                sigAlgParams = ((ASN1Encodable)c.getSignatureAlgorithm().getParameters()).getDEREncoded();
            else
                sigAlgParams = null;
            isIndirect = isIndirectCRL();
        }
        catch(Exception e)
        {
            throw new CRLException((new StringBuilder()).append("CRL contents invalid: ").append(e).toString());
        }
    }

    public boolean hasUnsupportedCriticalExtension()
    {
        Set extns = getCriticalExtensionOIDs();
        if(extns == null)
        {
            return false;
        } else
        {
            extns.remove(RFC3280CertPathUtilities.ISSUING_DISTRIBUTION_POINT);
            extns.remove(RFC3280CertPathUtilities.DELTA_CRL_INDICATOR);
            return !extns.isEmpty();
        }
    }

    private Set getExtensionOIDs(boolean critical)
    {
        if(getVersion() == 2)
        {
            X509Extensions extensions = c.getTBSCertList().getExtensions();
            if(extensions != null)
            {
                Set set = new HashSet();
                Enumeration e = extensions.oids();
                do
                {
                    if(!e.hasMoreElements())
                        break;
                    DERObjectIdentifier oid = (DERObjectIdentifier)e.nextElement();
                    X509Extension ext = extensions.getExtension(oid);
                    if(critical == ext.isCritical())
                        set.add(oid.getId());
                } while(true);
                return set;
            }
        }
        return null;
    }

    public Set getCriticalExtensionOIDs()
    {
        return getExtensionOIDs(true);
    }

    public Set getNonCriticalExtensionOIDs()
    {
        return getExtensionOIDs(false);
    }

    public byte[] getExtensionValue(String oid)
    {
        X509Extensions exts = c.getTBSCertList().getExtensions();
        if(exts != null)
        {
            X509Extension ext = exts.getExtension(new DERObjectIdentifier(oid));
            if(ext != null)
                try
                {
                    return ext.getValue().getEncoded();
                }
                catch(Exception e)
                {
                    throw new IllegalStateException((new StringBuilder()).append("error parsing ").append(e.toString()).toString());
                }
        }
        return null;
    }

    public byte[] getEncoded()
        throws CRLException
    {
        try
        {
            return c.getEncoded("DER");
        }
        catch(IOException e)
        {
            throw new CRLException(e.toString());
        }
    }

    public void verify(PublicKey key)
        throws CRLException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException
    {
        verify(key, BouncyCastleProvider.PROVIDER_NAME);
    }

    public void verify(PublicKey key, String sigProvider)
        throws CRLException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException
    {
        if(!c.getSignatureAlgorithm().equals(c.getTBSCertList().getSignature()))
            throw new CRLException("Signature algorithm on CertificateList does not match TBSCertList.");
        Signature sig = Signature.getInstance(getSigAlgName(), sigProvider);
        sig.initVerify(key);
        sig.update(getTBSCertList());
        if(!sig.verify(getSignature()))
            throw new SignatureException("CRL does not verify with supplied public key.");
        else
            return;
    }

    public int getVersion()
    {
        return c.getVersion();
    }

    public Principal getIssuerDN()
    {
        return new X509Principal(c.getIssuer());
    }

    public X500Principal getIssuerX500Principal()
    {
        try
        {
            ByteArrayOutputStream bOut = new ByteArrayOutputStream();
            ASN1OutputStream aOut = new ASN1OutputStream(bOut);
            aOut.writeObject(c.getIssuer());
            return new X500Principal(bOut.toByteArray());
        }
        catch(IOException e)
        {
            throw new IllegalStateException("can't encode issuer DN");
        }
    }

    public Date getThisUpdate()
    {
        return c.getThisUpdate().getDate();
    }

    public Date getNextUpdate()
    {
        if(c.getNextUpdate() != null)
            return c.getNextUpdate().getDate();
        else
            return null;
    }

    private Set loadCRLEntries()
    {
        Set entrySet = new HashSet();
        Enumeration certs = c.getRevokedCertificateEnumeration();
        X509CRLEntryObject crlEntry;
        for(X500Principal previousCertificateIssuer = getIssuerX500Principal(); certs.hasMoreElements(); previousCertificateIssuer = crlEntry.getCertificateIssuer())
        {
            org.bouncycastle.asn1.x509.TBSCertList.CRLEntry entry = (org.bouncycastle.asn1.x509.TBSCertList.CRLEntry)certs.nextElement();
            crlEntry = new X509CRLEntryObject(entry, isIndirect, previousCertificateIssuer);
            entrySet.add(crlEntry);
        }

        return entrySet;
    }

    public X509CRLEntry getRevokedCertificate(BigInteger serialNumber)
    {
        Enumeration certs = c.getRevokedCertificateEnumeration();
        X509CRLEntryObject crlEntry;
        for(X500Principal previousCertificateIssuer = getIssuerX500Principal(); certs.hasMoreElements(); previousCertificateIssuer = crlEntry.getCertificateIssuer())
        {
            org.bouncycastle.asn1.x509.TBSCertList.CRLEntry entry = (org.bouncycastle.asn1.x509.TBSCertList.CRLEntry)certs.nextElement();
            crlEntry = new X509CRLEntryObject(entry, isIndirect, previousCertificateIssuer);
            if(serialNumber.equals(entry.getUserCertificate().getValue()))
                return crlEntry;
        }

        return null;
    }

    public Set getRevokedCertificates()
    {
        Set entrySet = loadCRLEntries();
        if(!entrySet.isEmpty())
            return Collections.unmodifiableSet(entrySet);
        else
            return null;
    }

    public byte[] getTBSCertList()
        throws CRLException
    {
        try
        {
            return c.getTBSCertList().getEncoded("DER");
        }
        catch(IOException e)
        {
            throw new CRLException(e.toString());
        }
    }

    public byte[] getSignature()
    {
        return c.getSignature().getBytes();
    }

    public String getSigAlgName()
    {
        return sigAlgName;
    }

    public String getSigAlgOID()
    {
        return c.getSignatureAlgorithm().getObjectId().getId();
    }

    public byte[] getSigAlgParams()
    {
        if(sigAlgParams != null)
        {
            byte tmp[] = new byte[sigAlgParams.length];
            System.arraycopy(sigAlgParams, 0, tmp, 0, tmp.length);
            return tmp;
        } else
        {
            return null;
        }
    }

    public String toString()
    {
        StringBuffer buf = new StringBuffer();
        String nl = System.getProperty("line.separator");
        buf.append("              Version: ").append(getVersion()).append(nl);
        buf.append("             IssuerDN: ").append(getIssuerDN()).append(nl);
        buf.append("          This update: ").append(getThisUpdate()).append(nl);
        buf.append("          Next update: ").append(getNextUpdate()).append(nl);
        buf.append("  Signature Algorithm: ").append(getSigAlgName()).append(nl);
        byte sig[] = getSignature();
        buf.append("            Signature: ").append(new String(Hex.encode(sig, 0, 20))).append(nl);
        for(int i = 20; i < sig.length; i += 20)
            if(i < sig.length - 20)
                buf.append("                       ").append(new String(Hex.encode(sig, i, 20))).append(nl);
            else
                buf.append("                       ").append(new String(Hex.encode(sig, i, sig.length - i))).append(nl);

        X509Extensions extensions = c.getTBSCertList().getExtensions();
        if(extensions != null)
        {
            Enumeration e = extensions.oids();
            if(e.hasMoreElements())
                buf.append("           Extensions: ").append(nl);
            while(e.hasMoreElements()) 
            {
                DERObjectIdentifier oid = (DERObjectIdentifier)e.nextElement();
                X509Extension ext = extensions.getExtension(oid);
                if(ext.getValue() != null)
                {
                    byte octs[] = ext.getValue().getOctets();
                    ASN1InputStream dIn = new ASN1InputStream(octs);
                    buf.append("                       critical(").append(ext.isCritical()).append(") ");
                    try
                    {
                        if(oid.equals(X509Extensions.CRLNumber))
                            buf.append(new CRLNumber(DERInteger.getInstance(dIn.readObject()).getPositiveValue())).append(nl);
                        else
                        if(oid.equals(X509Extensions.DeltaCRLIndicator))
                            buf.append((new StringBuilder()).append("Base CRL: ").append(new CRLNumber(DERInteger.getInstance(dIn.readObject()).getPositiveValue())).toString()).append(nl);
                        else
                        if(oid.equals(X509Extensions.IssuingDistributionPoint))
                            buf.append(new IssuingDistributionPoint((ASN1Sequence)dIn.readObject())).append(nl);
                        else
                        if(oid.equals(X509Extensions.CRLDistributionPoints))
                            buf.append(new CRLDistPoint((ASN1Sequence)dIn.readObject())).append(nl);
                        else
                        if(oid.equals(X509Extensions.FreshestCRL))
                        {
                            buf.append(new CRLDistPoint((ASN1Sequence)dIn.readObject())).append(nl);
                        } else
                        {
                            buf.append(oid.getId());
                            buf.append(" value = ").append(ASN1Dump.dumpAsString(dIn.readObject())).append(nl);
                        }
                    }
                    catch(Exception ex)
                    {
                        buf.append(oid.getId());
                        buf.append(" value = ").append("*****").append(nl);
                    }
                } else
                {
                    buf.append(nl);
                }
            }
        }
        Set set = getRevokedCertificates();
        if(set != null)
        {
            for(Iterator it = set.iterator(); it.hasNext(); buf.append(nl))
                buf.append(it.next());

        }
        return buf.toString();
    }

    public boolean isRevoked(Certificate cert)
    {
        if(!cert.getType().equals("X.509"))
            throw new RuntimeException("X.509 CRL used with non X.509 Cert");
        org.bouncycastle.asn1.x509.TBSCertList.CRLEntry certs[] = c.getRevokedCertificates();
        if(certs != null)
        {
            BigInteger serial = ((X509Certificate)cert).getSerialNumber();
            for(int i = 0; i < certs.length; i++)
                if(certs[i].getUserCertificate().getValue().equals(serial))
                    return true;

        }
        return false;
    }

    private boolean isIndirectCRL()
        throws CRLException
    {
        byte idp[] = getExtensionValue(X509Extensions.IssuingDistributionPoint.getId());
        boolean isIndirect = false;
        try
        {
            if(idp != null)
                isIndirect = IssuingDistributionPoint.getInstance(X509ExtensionUtil.fromExtensionValue(idp)).isIndirectCRL();
        }
        catch(Exception e)
        {
            throw new ExtCRLException("Exception reading IssuingDistributionPoint", e);
        }
        return isIndirect;
    }

    private CertificateList c;
    private String sigAlgName;
    private byte sigAlgParams[];
    private boolean isIndirect;
}
