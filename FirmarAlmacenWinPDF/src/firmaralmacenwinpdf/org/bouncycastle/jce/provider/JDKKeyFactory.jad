// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   JDKKeyFactory.java

package org.bouncycastle.jce.provider;

import java.io.IOException;
import java.security.*;
import java.security.interfaces.*;
import java.security.spec.*;
import javax.crypto.interfaces.DHPrivateKey;
import javax.crypto.interfaces.DHPublicKey;
import javax.crypto.spec.*;
import org.bouncycastle.asn1.*;
import org.bouncycastle.asn1.cryptopro.CryptoProObjectIdentifiers;
import org.bouncycastle.asn1.oiw.OIWObjectIdentifiers;
import org.bouncycastle.asn1.pkcs.*;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
import org.bouncycastle.asn1.x9.X9ObjectIdentifiers;
import org.bouncycastle.jce.interfaces.ElGamalPrivateKey;
import org.bouncycastle.jce.interfaces.ElGamalPublicKey;
import org.bouncycastle.jce.spec.*;

// Referenced classes of package org.bouncycastle.jce.provider:
//            JCERSAPublicKey, JCERSAPrivateCrtKey, JCERSAPrivateKey, JCEElGamalPublicKey, 
//            JCEDHPublicKey, JCEElGamalPrivateKey, JCEDHPrivateKey, JDKDSAPublicKey, 
//            JDKDSAPrivateKey, JCEECPublicKey, JDKGOST3410PublicKey, JCEECPrivateKey, 
//            JDKGOST3410PrivateKey, RSAUtil

public abstract class JDKKeyFactory extends KeyFactorySpi
{
    public static class X509 extends JDKKeyFactory
    {

        public X509()
        {
        }
    }

    public static class ElGamal extends JDKKeyFactory
    {

        protected PrivateKey engineGeneratePrivate(KeySpec keySpec)
            throws InvalidKeySpecException
        {
            if(keySpec instanceof ElGamalPrivateKeySpec)
                return new JCEElGamalPrivateKey((ElGamalPrivateKeySpec)keySpec);
            if(keySpec instanceof DHPrivateKeySpec)
                return new JCEElGamalPrivateKey((DHPrivateKeySpec)keySpec);
            else
                return engineGeneratePrivate(keySpec);
        }

        protected PublicKey engineGeneratePublic(KeySpec keySpec)
            throws InvalidKeySpecException
        {
            if(keySpec instanceof ElGamalPublicKeySpec)
                return new JCEElGamalPublicKey((ElGamalPublicKeySpec)keySpec);
            if(keySpec instanceof DHPublicKeySpec)
                return new JCEElGamalPublicKey((DHPublicKeySpec)keySpec);
            else
                return engineGeneratePublic(keySpec);
        }

        public ElGamal()
        {
            elGamalFactory = true;
        }
    }

    public static class GOST3410 extends JDKKeyFactory
    {

        protected PrivateKey engineGeneratePrivate(KeySpec keySpec)
            throws InvalidKeySpecException
        {
            if(keySpec instanceof GOST3410PrivateKeySpec)
                return new JDKGOST3410PrivateKey((GOST3410PrivateKeySpec)keySpec);
            else
                return engineGeneratePrivate(keySpec);
        }

        protected PublicKey engineGeneratePublic(KeySpec keySpec)
            throws InvalidKeySpecException
        {
            if(keySpec instanceof GOST3410PublicKeySpec)
                return new JDKGOST3410PublicKey((GOST3410PublicKeySpec)keySpec);
            else
                return engineGeneratePublic(keySpec);
        }

        public GOST3410()
        {
        }
    }

    public static class DSA extends JDKKeyFactory
    {

        protected PrivateKey engineGeneratePrivate(KeySpec keySpec)
            throws InvalidKeySpecException
        {
            if(keySpec instanceof DSAPrivateKeySpec)
                return new JDKDSAPrivateKey((DSAPrivateKeySpec)keySpec);
            else
                return engineGeneratePrivate(keySpec);
        }

        protected PublicKey engineGeneratePublic(KeySpec keySpec)
            throws InvalidKeySpecException
        {
            if(keySpec instanceof DSAPublicKeySpec)
                return new JDKDSAPublicKey((DSAPublicKeySpec)keySpec);
            else
                return engineGeneratePublic(keySpec);
        }

        public DSA()
        {
        }
    }

    public static class DH extends JDKKeyFactory
    {

        protected PrivateKey engineGeneratePrivate(KeySpec keySpec)
            throws InvalidKeySpecException
        {
            if(keySpec instanceof DHPrivateKeySpec)
                return new JCEDHPrivateKey((DHPrivateKeySpec)keySpec);
            else
                return engineGeneratePrivate(keySpec);
        }

        protected PublicKey engineGeneratePublic(KeySpec keySpec)
            throws InvalidKeySpecException
        {
            if(keySpec instanceof DHPublicKeySpec)
                return new JCEDHPublicKey((DHPublicKeySpec)keySpec);
            else
                return engineGeneratePublic(keySpec);
        }

        public DH()
        {
        }
    }

    public static class RSA extends JDKKeyFactory
    {

        protected PrivateKey engineGeneratePrivate(KeySpec keySpec)
            throws InvalidKeySpecException
        {
            if(keySpec instanceof PKCS8EncodedKeySpec)
            {
                try
                {
                    return JDKKeyFactory.createPrivateKeyFromDERStream(((PKCS8EncodedKeySpec)keySpec).getEncoded());
                }
                catch(Exception e) { }
                try
                {
                    return new JCERSAPrivateCrtKey(new RSAPrivateKeyStructure((ASN1Sequence)ASN1Object.fromByteArray(((PKCS8EncodedKeySpec)keySpec).getEncoded())));
                }
                catch(Exception ex)
                {
                    throw new InvalidKeySpecException(ex.toString());
                }
            }
            if(keySpec instanceof RSAPrivateCrtKeySpec)
                return new JCERSAPrivateCrtKey((RSAPrivateCrtKeySpec)keySpec);
            if(keySpec instanceof RSAPrivateKeySpec)
                return new JCERSAPrivateKey((RSAPrivateKeySpec)keySpec);
            else
                throw new InvalidKeySpecException((new StringBuilder()).append("Unknown KeySpec type: ").append(keySpec.getClass().getName()).toString());
        }

        protected PublicKey engineGeneratePublic(KeySpec keySpec)
            throws InvalidKeySpecException
        {
            if(keySpec instanceof RSAPublicKeySpec)
                return new JCERSAPublicKey((RSAPublicKeySpec)keySpec);
            else
                return engineGeneratePublic(keySpec);
        }

        public RSA()
        {
        }
    }


    public JDKKeyFactory()
    {
        elGamalFactory = false;
    }

    protected PrivateKey engineGeneratePrivate(KeySpec keySpec)
        throws InvalidKeySpecException
    {
        if(keySpec instanceof PKCS8EncodedKeySpec)
            try
            {
                return createPrivateKeyFromDERStream(((PKCS8EncodedKeySpec)keySpec).getEncoded());
            }
            catch(Exception e)
            {
                throw new InvalidKeySpecException(e.toString());
            }
        else
            throw new InvalidKeySpecException((new StringBuilder()).append("Unknown KeySpec type: ").append(keySpec.getClass().getName()).toString());
    }

    protected PublicKey engineGeneratePublic(KeySpec keySpec)
        throws InvalidKeySpecException
    {
        if(keySpec instanceof X509EncodedKeySpec)
            try
            {
                return createPublicKeyFromDERStream(((X509EncodedKeySpec)keySpec).getEncoded());
            }
            catch(Exception e)
            {
                throw new InvalidKeySpecException(e.toString());
            }
        else
            throw new InvalidKeySpecException((new StringBuilder()).append("Unknown KeySpec type: ").append(keySpec.getClass().getName()).toString());
    }

    protected KeySpec engineGetKeySpec(Key key, Class spec)
        throws InvalidKeySpecException
    {
        if(spec.isAssignableFrom(java/security/spec/PKCS8EncodedKeySpec) && key.getFormat().equals("PKCS#8"))
            return new PKCS8EncodedKeySpec(key.getEncoded());
        if(spec.isAssignableFrom(java/security/spec/X509EncodedKeySpec) && key.getFormat().equals("X.509"))
            return new X509EncodedKeySpec(key.getEncoded());
        if(spec.isAssignableFrom(java/security/spec/RSAPublicKeySpec) && (key instanceof RSAPublicKey))
        {
            RSAPublicKey k = (RSAPublicKey)key;
            return new RSAPublicKeySpec(k.getModulus(), k.getPublicExponent());
        }
        if(spec.isAssignableFrom(java/security/spec/RSAPrivateKeySpec) && (key instanceof RSAPrivateKey))
        {
            RSAPrivateKey k = (RSAPrivateKey)key;
            return new RSAPrivateKeySpec(k.getModulus(), k.getPrivateExponent());
        }
        if(spec.isAssignableFrom(java/security/spec/RSAPrivateCrtKeySpec) && (key instanceof RSAPrivateCrtKey))
        {
            RSAPrivateCrtKey k = (RSAPrivateCrtKey)key;
            return new RSAPrivateCrtKeySpec(k.getModulus(), k.getPublicExponent(), k.getPrivateExponent(), k.getPrimeP(), k.getPrimeQ(), k.getPrimeExponentP(), k.getPrimeExponentQ(), k.getCrtCoefficient());
        }
        if(spec.isAssignableFrom(javax/crypto/spec/DHPrivateKeySpec) && (key instanceof DHPrivateKey))
        {
            DHPrivateKey k = (DHPrivateKey)key;
            return new DHPrivateKeySpec(k.getX(), k.getParams().getP(), k.getParams().getG());
        }
        if(spec.isAssignableFrom(javax/crypto/spec/DHPublicKeySpec) && (key instanceof DHPublicKey))
        {
            DHPublicKey k = (DHPublicKey)key;
            return new DHPublicKeySpec(k.getY(), k.getParams().getP(), k.getParams().getG());
        } else
        {
            throw new RuntimeException((new StringBuilder()).append("not implemented yet ").append(key).append(" ").append(spec).toString());
        }
    }

    protected Key engineTranslateKey(Key key)
        throws InvalidKeyException
    {
        if(key instanceof RSAPublicKey)
            return new JCERSAPublicKey((RSAPublicKey)key);
        if(key instanceof RSAPrivateCrtKey)
            return new JCERSAPrivateCrtKey((RSAPrivateCrtKey)key);
        if(key instanceof RSAPrivateKey)
            return new JCERSAPrivateKey((RSAPrivateKey)key);
        if(key instanceof DHPublicKey)
            if(elGamalFactory)
                return new JCEElGamalPublicKey((DHPublicKey)key);
            else
                return new JCEDHPublicKey((DHPublicKey)key);
        if(key instanceof DHPrivateKey)
            if(elGamalFactory)
                return new JCEElGamalPrivateKey((DHPrivateKey)key);
            else
                return new JCEDHPrivateKey((DHPrivateKey)key);
        if(key instanceof DSAPublicKey)
            return new JDKDSAPublicKey((DSAPublicKey)key);
        if(key instanceof DSAPrivateKey)
            return new JDKDSAPrivateKey((DSAPrivateKey)key);
        if(key instanceof ElGamalPublicKey)
            return new JCEElGamalPublicKey((ElGamalPublicKey)key);
        if(key instanceof ElGamalPrivateKey)
            return new JCEElGamalPrivateKey((ElGamalPrivateKey)key);
        else
            throw new InvalidKeyException("key type unknown");
    }

    public static PublicKey createPublicKeyFromDERStream(byte in[])
        throws IOException
    {
        return createPublicKeyFromPublicKeyInfo(new SubjectPublicKeyInfo((ASN1Sequence)ASN1Object.fromByteArray(in)));
    }

    static PublicKey createPublicKeyFromPublicKeyInfo(SubjectPublicKeyInfo info)
    {
        DERObjectIdentifier algOid = info.getAlgorithmId().getObjectId();
        if(RSAUtil.isRsaOid(algOid))
            return new JCERSAPublicKey(info);
        if(algOid.equals(PKCSObjectIdentifiers.dhKeyAgreement))
            return new JCEDHPublicKey(info);
        if(algOid.equals(X9ObjectIdentifiers.dhpublicnumber))
            return new JCEDHPublicKey(info);
        if(algOid.equals(OIWObjectIdentifiers.elGamalAlgorithm))
            return new JCEElGamalPublicKey(info);
        if(algOid.equals(X9ObjectIdentifiers.id_dsa))
            return new JDKDSAPublicKey(info);
        if(algOid.equals(OIWObjectIdentifiers.dsaWithSHA1))
            return new JDKDSAPublicKey(info);
        if(algOid.equals(X9ObjectIdentifiers.id_ecPublicKey))
            return new JCEECPublicKey(info);
        if(algOid.equals(CryptoProObjectIdentifiers.gostR3410_94))
            return new JDKGOST3410PublicKey(info);
        if(algOid.equals(CryptoProObjectIdentifiers.gostR3410_2001))
            return new JCEECPublicKey(info);
        else
            throw new RuntimeException((new StringBuilder()).append("algorithm identifier ").append(algOid).append(" in key not recognised").toString());
    }

    protected static PrivateKey createPrivateKeyFromDERStream(byte in[])
        throws IOException
    {
        return createPrivateKeyFromPrivateKeyInfo(new PrivateKeyInfo((ASN1Sequence)ASN1Object.fromByteArray(in)));
    }

    static PrivateKey createPrivateKeyFromPrivateKeyInfo(PrivateKeyInfo info)
    {
        DERObjectIdentifier algOid = info.getAlgorithmId().getObjectId();
        if(RSAUtil.isRsaOid(algOid))
            return new JCERSAPrivateCrtKey(info);
        if(algOid.equals(PKCSObjectIdentifiers.dhKeyAgreement))
            return new JCEDHPrivateKey(info);
        if(algOid.equals(X9ObjectIdentifiers.dhpublicnumber))
            return new JCEDHPrivateKey(info);
        if(algOid.equals(OIWObjectIdentifiers.elGamalAlgorithm))
            return new JCEElGamalPrivateKey(info);
        if(algOid.equals(X9ObjectIdentifiers.id_dsa))
            return new JDKDSAPrivateKey(info);
        if(algOid.equals(X9ObjectIdentifiers.id_ecPublicKey))
            return new JCEECPrivateKey(info);
        if(algOid.equals(CryptoProObjectIdentifiers.gostR3410_94))
            return new JDKGOST3410PrivateKey(info);
        if(algOid.equals(CryptoProObjectIdentifiers.gostR3410_2001))
            return new JCEECPrivateKey(info);
        else
            throw new RuntimeException((new StringBuilder()).append("algorithm identifier ").append(algOid).append(" in key not recognised").toString());
    }

    protected boolean elGamalFactory;
}
