// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   JCEMac.java

package org.bouncycastle.jce.provider;

import java.security.*;
import java.security.spec.AlgorithmParameterSpec;
import javax.crypto.MacSpi;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEParameterSpec;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.Mac;
import org.bouncycastle.crypto.digests.*;
import org.bouncycastle.crypto.engines.DESEngine;
import org.bouncycastle.crypto.engines.RC2Engine;
import org.bouncycastle.crypto.macs.*;
import org.bouncycastle.crypto.paddings.ISO7816d4Padding;
import org.bouncycastle.crypto.params.KeyParameter;
import org.bouncycastle.crypto.params.ParametersWithIV;

// Referenced classes of package org.bouncycastle.jce.provider:
//            JCEPBEKey, PBE

public class JCEMac extends MacSpi
    implements PBE
{
    public static class PBEWithTiger extends JCEMac
    {

        public PBEWithTiger()
        {
            super(new HMac(new TigerDigest()), 2, 3, 192);
        }
    }

    public static class PBEWithSHA extends JCEMac
    {

        public PBEWithSHA()
        {
            super(new HMac(new SHA1Digest()), 2, 1, 160);
        }
    }

    public static class PBEWithRIPEMD160 extends JCEMac
    {

        public PBEWithRIPEMD160()
        {
            super(new HMac(new RIPEMD160Digest()), 2, 2, 160);
        }
    }

    public static class Tiger extends JCEMac
    {

        public Tiger()
        {
            super(new HMac(new TigerDigest()));
        }
    }

    public static class RIPEMD160 extends JCEMac
    {

        public RIPEMD160()
        {
            super(new HMac(new RIPEMD160Digest()));
        }
    }

    public static class RIPEMD128 extends JCEMac
    {

        public RIPEMD128()
        {
            super(new HMac(new RIPEMD128Digest()));
        }
    }

    public static class OldSHA512 extends JCEMac
    {

        public OldSHA512()
        {
            super(new OldHMac(new SHA512Digest()));
        }
    }

    public static class SHA512 extends JCEMac
    {

        public SHA512()
        {
            super(new HMac(new SHA512Digest()));
        }
    }

    public static class OldSHA384 extends JCEMac
    {

        public OldSHA384()
        {
            super(new OldHMac(new SHA384Digest()));
        }
    }

    public static class SHA384 extends JCEMac
    {

        public SHA384()
        {
            super(new HMac(new SHA384Digest()));
        }
    }

    public static class SHA256 extends JCEMac
    {

        public SHA256()
        {
            super(new HMac(new SHA256Digest()));
        }
    }

    public static class SHA224 extends JCEMac
    {

        public SHA224()
        {
            super(new HMac(new SHA224Digest()));
        }
    }

    public static class SHA1 extends JCEMac
    {

        public SHA1()
        {
            super(new HMac(new SHA1Digest()));
        }
    }

    public static class MD5 extends JCEMac
    {

        public MD5()
        {
            super(new HMac(new MD5Digest()));
        }
    }

    public static class MD4 extends JCEMac
    {

        public MD4()
        {
            super(new HMac(new MD4Digest()));
        }
    }

    public static class MD2 extends JCEMac
    {

        public MD2()
        {
            super(new HMac(new MD2Digest()));
        }
    }

    public static class DES9797Alg3 extends JCEMac
    {

        public DES9797Alg3()
        {
            super(new ISO9797Alg3Mac(new DESEngine()));
        }
    }

    public static class DES9797Alg3with7816d4 extends JCEMac
    {

        public DES9797Alg3with7816d4()
        {
            super(new ISO9797Alg3Mac(new DESEngine(), new ISO7816d4Padding()));
        }
    }

    public static class RC2CFB8 extends JCEMac
    {

        public RC2CFB8()
        {
            super(new CFBBlockCipherMac(new RC2Engine()));
        }
    }

    public static class DESCFB8 extends JCEMac
    {

        public DESCFB8()
        {
            super(new CFBBlockCipherMac(new DESEngine()));
        }
    }

    public static class GOST28147 extends JCEMac
    {

        public GOST28147()
        {
            super(new GOST28147Mac());
        }
    }

    public static class RC2 extends JCEMac
    {

        public RC2()
        {
            super(new CBCBlockCipherMac(new RC2Engine()));
        }
    }

    public static class DES extends JCEMac
    {

        public DES()
        {
            super(new CBCBlockCipherMac(new DESEngine()));
        }
    }


    protected JCEMac(Mac macEngine)
    {
        pbeType = 2;
        pbeHash = 1;
        keySize = 160;
        this.macEngine = macEngine;
    }

    protected JCEMac(Mac macEngine, int pbeType, int pbeHash, int keySize)
    {
        this.pbeType = 2;
        this.pbeHash = 1;
        this.keySize = 160;
        this.macEngine = macEngine;
        this.pbeType = pbeType;
        this.pbeHash = pbeHash;
        this.keySize = keySize;
    }

    protected void engineInit(Key key, AlgorithmParameterSpec params)
        throws InvalidKeyException, InvalidAlgorithmParameterException
    {
        if(key == null)
            throw new InvalidKeyException("key is null");
        CipherParameters param;
        if(key instanceof JCEPBEKey)
        {
            JCEPBEKey k = (JCEPBEKey)key;
            if(k.getParam() != null)
                param = k.getParam();
            else
            if(params instanceof PBEParameterSpec)
                param = PBE.Util.makePBEMacParameters(k, params);
            else
                throw new InvalidAlgorithmParameterException("PBE requires PBE parameters to be set.");
        } else
        if(params instanceof IvParameterSpec)
            param = new ParametersWithIV(new KeyParameter(key.getEncoded()), ((IvParameterSpec)params).getIV());
        else
        if(params == null)
            param = new KeyParameter(key.getEncoded());
        else
            throw new InvalidAlgorithmParameterException("unknown parameter type.");
        macEngine.init(param);
    }

    protected int engineGetMacLength()
    {
        return macEngine.getMacSize();
    }

    protected void engineReset()
    {
        macEngine.reset();
    }

    protected void engineUpdate(byte input)
    {
        macEngine.update(input);
    }

    protected void engineUpdate(byte input[], int offset, int len)
    {
        macEngine.update(input, offset, len);
    }

    protected byte[] engineDoFinal()
    {
        byte out[] = new byte[engineGetMacLength()];
        macEngine.doFinal(out, 0);
        return out;
    }

    private Mac macEngine;
    private int pbeType;
    private int pbeHash;
    private int keySize;
}
