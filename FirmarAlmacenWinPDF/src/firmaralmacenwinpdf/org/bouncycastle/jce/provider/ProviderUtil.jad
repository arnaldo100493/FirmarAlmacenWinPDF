// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ProviderUtil.java

package org.bouncycastle.jce.provider;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.Permission;
import org.bouncycastle.jce.ProviderConfigurationPermission;
import org.bouncycastle.jce.provider.asymmetric.ec.EC5Util;
import org.bouncycastle.jce.spec.ECParameterSpec;

// Referenced classes of package org.bouncycastle.jce.provider:
//            BouncyCastleProvider

public class ProviderUtil
{

    public ProviderUtil()
    {
    }

    static void setParameter(String parameterName, Object parameter)
    {
        SecurityManager securityManager = System.getSecurityManager();
        if(parameterName.equals("threadLocalEcImplicitlyCa"))
        {
            if(securityManager != null)
                securityManager.checkPermission(BC_EC_LOCAL_PERMISSION);
            ECParameterSpec curveSpec;
            if((parameter instanceof ECParameterSpec) || parameter == null)
                curveSpec = (ECParameterSpec)parameter;
            else
                curveSpec = EC5Util.convertSpec((java.security.spec.ECParameterSpec)parameter, false);
            if(curveSpec == null)
                threadSpec.remove();
            else
                threadSpec.set(curveSpec);
        } else
        if(parameterName.equals("ecImplicitlyCa"))
        {
            if(securityManager != null)
                securityManager.checkPermission(BC_EC_PERMISSION);
            if((parameter instanceof ECParameterSpec) || parameter == null)
                ecImplicitCaParams = (ECParameterSpec)parameter;
            else
                ecImplicitCaParams = EC5Util.convertSpec((java.security.spec.ECParameterSpec)parameter, false);
        }
    }

    public static ECParameterSpec getEcImplicitlyCa()
    {
        ECParameterSpec spec = (ECParameterSpec)threadSpec.get();
        if(spec != null)
            return spec;
        else
            return ecImplicitCaParams;
    }

    static int getReadLimit(InputStream in)
        throws IOException
    {
        if(in instanceof ByteArrayInputStream)
            return in.available();
        if(MAX_MEMORY > 0x7fffffffL)
            return 0x7fffffff;
        else
            return (int)MAX_MEMORY;
    }

    private static final long MAX_MEMORY = Runtime.getRuntime().maxMemory();
    private static Permission BC_EC_LOCAL_PERMISSION;
    private static Permission BC_EC_PERMISSION;
    private static ThreadLocal threadSpec = new ThreadLocal();
    private static volatile ECParameterSpec ecImplicitCaParams;

    static 
    {
        BC_EC_LOCAL_PERMISSION = new ProviderConfigurationPermission(BouncyCastleProvider.PROVIDER_NAME, "threadLocalEcImplicitlyCa");
        BC_EC_PERMISSION = new ProviderConfigurationPermission(BouncyCastleProvider.PROVIDER_NAME, "ecImplicitlyCa");
    }
}
