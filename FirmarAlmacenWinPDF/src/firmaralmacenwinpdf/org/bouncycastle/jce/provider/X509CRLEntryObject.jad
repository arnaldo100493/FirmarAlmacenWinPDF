// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   X509CRLEntryObject.java

package org.bouncycastle.jce.provider;

import java.io.IOException;
import java.math.BigInteger;
import java.security.cert.CRLException;
import java.security.cert.X509CRLEntry;
import java.util.*;
import javax.security.auth.x500.X500Principal;
import org.bouncycastle.asn1.*;
import org.bouncycastle.asn1.util.ASN1Dump;
import org.bouncycastle.asn1.x509.*;
import org.bouncycastle.x509.extension.X509ExtensionUtil;

public class X509CRLEntryObject extends X509CRLEntry
{

    public X509CRLEntryObject(org.bouncycastle.asn1.x509.TBSCertList.CRLEntry c)
    {
        this.c = c;
        certificateIssuer = loadCertificateIssuer();
    }

    public X509CRLEntryObject(org.bouncycastle.asn1.x509.TBSCertList.CRLEntry c, boolean isIndirect, X500Principal previousCertificateIssuer)
    {
        this.c = c;
        this.isIndirect = isIndirect;
        this.previousCertificateIssuer = previousCertificateIssuer;
        certificateIssuer = loadCertificateIssuer();
    }

    public boolean hasUnsupportedCriticalExtension()
    {
        Set extns = getCriticalExtensionOIDs();
        return extns != null && !extns.isEmpty();
    }

    private X500Principal loadCertificateIssuer()
    {
        byte ext[];
        if(!isIndirect)
            return null;
        ext = getExtensionValue(X509Extensions.CertificateIssuer.getId());
        if(ext == null)
            return previousCertificateIssuer;
        GeneralName names[];
        int i;
        names = GeneralNames.getInstance(X509ExtensionUtil.fromExtensionValue(ext)).getNames();
        i = 0;
_L1:
        if(i >= names.length)
            break MISSING_BLOCK_LABEL_86;
        if(names[i].getTagNo() == 4)
            return new X500Principal(names[i].getName().getDERObject().getDEREncoded());
        i++;
          goto _L1
        return null;
        IOException e;
        e;
        return null;
    }

    public X500Principal getCertificateIssuer()
    {
        return certificateIssuer;
    }

    private Set getExtensionOIDs(boolean critical)
    {
        X509Extensions extensions = c.getExtensions();
        if(extensions != null)
        {
            Set set = new HashSet();
            Enumeration e = extensions.oids();
            do
            {
                if(!e.hasMoreElements())
                    break;
                DERObjectIdentifier oid = (DERObjectIdentifier)e.nextElement();
                X509Extension ext = extensions.getExtension(oid);
                if(critical == ext.isCritical())
                    set.add(oid.getId());
            } while(true);
            return set;
        } else
        {
            return null;
        }
    }

    public Set getCriticalExtensionOIDs()
    {
        return getExtensionOIDs(true);
    }

    public Set getNonCriticalExtensionOIDs()
    {
        return getExtensionOIDs(false);
    }

    public byte[] getExtensionValue(String oid)
    {
        X509Extensions exts = c.getExtensions();
        if(exts != null)
        {
            X509Extension ext = exts.getExtension(new DERObjectIdentifier(oid));
            if(ext != null)
                try
                {
                    return ext.getValue().getEncoded();
                }
                catch(Exception e)
                {
                    throw new RuntimeException((new StringBuilder()).append("error encoding ").append(e.toString()).toString());
                }
        }
        return null;
    }

    public int hashCode()
    {
        if(!isHashValueSet)
        {
            hashValue = super.hashCode();
            isHashValueSet = true;
        }
        return hashValue;
    }

    public byte[] getEncoded()
        throws CRLException
    {
        try
        {
            return c.getEncoded("DER");
        }
        catch(IOException e)
        {
            throw new CRLException(e.toString());
        }
    }

    public BigInteger getSerialNumber()
    {
        return c.getUserCertificate().getValue();
    }

    public Date getRevocationDate()
    {
        return c.getRevocationDate().getDate();
    }

    public boolean hasExtensions()
    {
        return c.getExtensions() != null;
    }

    public String toString()
    {
        StringBuffer buf = new StringBuffer();
        String nl = System.getProperty("line.separator");
        buf.append("      userCertificate: ").append(getSerialNumber()).append(nl);
        buf.append("       revocationDate: ").append(getRevocationDate()).append(nl);
        buf.append("       certificateIssuer: ").append(getCertificateIssuer()).append(nl);
        X509Extensions extensions = c.getExtensions();
        if(extensions != null)
        {
            Enumeration e = extensions.oids();
            if(e.hasMoreElements())
            {
                buf.append("   crlEntryExtensions:").append(nl);
                while(e.hasMoreElements()) 
                {
                    DERObjectIdentifier oid = (DERObjectIdentifier)e.nextElement();
                    X509Extension ext = extensions.getExtension(oid);
                    if(ext.getValue() != null)
                    {
                        byte octs[] = ext.getValue().getOctets();
                        ASN1InputStream dIn = new ASN1InputStream(octs);
                        buf.append("                       critical(").append(ext.isCritical()).append(") ");
                        try
                        {
                            if(oid.equals(X509Extensions.ReasonCode))
                                buf.append(new CRLReason(DEREnumerated.getInstance(dIn.readObject()))).append(nl);
                            else
                            if(oid.equals(X509Extensions.CertificateIssuer))
                            {
                                buf.append("Certificate issuer: ").append(new GeneralNames((ASN1Sequence)dIn.readObject())).append(nl);
                            } else
                            {
                                buf.append(oid.getId());
                                buf.append(" value = ").append(ASN1Dump.dumpAsString(dIn.readObject())).append(nl);
                            }
                        }
                        catch(Exception ex)
                        {
                            buf.append(oid.getId());
                            buf.append(" value = ").append("*****").append(nl);
                        }
                    } else
                    {
                        buf.append(nl);
                    }
                }
            }
        }
        return buf.toString();
    }

    private org.bouncycastle.asn1.x509.TBSCertList.CRLEntry c;
    private boolean isIndirect;
    private X500Principal previousCertificateIssuer;
    private X500Principal certificateIssuer;
    private int hashValue;
    private boolean isHashValueSet;
}
