// Decompiled by DJ v3.12.12.96 Copyright 2011 Atanas Neshkov  Date: 12/12/2017 5:12:46 p. m.
// Home Page: http://members.fortunecity.com/neshkov/dj.html  http://www.neshkov.com/dj.html - Check often for new version!
// Decompiler options: packimports(3) 
// Source File Name:   SNTPClient.java

package co.com.andesscd.pki.clases;

import java.io.IOException;
import java.net.*;
import java.util.*;

public class SNTPClient
{

    public SNTPClient()
    {
    }

    public void requestTime(String host, int timeout)
        throws SocketException, UnknownHostException, IOException
    {
        DatagramSocket socket = null;
        socket = new DatagramSocket();
        socket.setSoTimeout(timeout);
        InetAddress address = InetAddress.getByName(host);
        byte buffer[] = new byte[48];
        DatagramPacket request = new DatagramPacket(buffer, buffer.length, address, 123);
        buffer[0] = 27;
        long requestTime = System.currentTimeMillis();
        long requestTicks = System.currentTimeMillis();
        writeTimeStamp(buffer, 40, requestTime);
        socket.send(request);
        DatagramPacket response = new DatagramPacket(buffer, buffer.length);
        socket.receive(response);
        long responseTicks = System.currentTimeMillis();
        long responseTime = requestTime + (responseTicks - requestTicks);
        long originateTime = readTimeStamp(buffer, 24);
        long receiveTime = readTimeStamp(buffer, 32);
        long transmitTime = readTimeStamp(buffer, 40);
        long roundTripTime = responseTicks - requestTicks - (transmitTime - receiveTime);
        long clockOffset = ((receiveTime - originateTime) + (transmitTime - responseTime)) / 2L;
        mNtpTime = responseTime + clockOffset;
        mNtpTimeReference = responseTicks;
        mRoundTripTime = roundTripTime;
        SimpleTimeZone simpleTimeZone = new SimpleTimeZone(0, "America/Bogota");
        fechaSNTP = new GregorianCalendar(simpleTimeZone);
        fechaSNTP.setTime(new Date(getNtpTime()));
        if(socket != null)
            socket.close();
        break MISSING_BLOCK_LABEL_260;
        Exception exception;
        exception;
        if(socket != null)
            socket.close();
        throw exception;
    }

    public long getNtpTime()
    {
        return mNtpTime;
    }

    public long getNtpTimeReference()
    {
        return mNtpTimeReference;
    }

    public long getRoundTripTime()
    {
        return mRoundTripTime;
    }

    private long read32(byte buffer[], int offset)
    {
        byte b0 = buffer[offset];
        byte b1 = buffer[offset + 1];
        byte b2 = buffer[offset + 2];
        byte b3 = buffer[offset + 3];
        int i0 = (b0 & 0x80) != 128 ? ((int) (b0)) : (b0 & 0x7f) + 128;
        int i1 = (b1 & 0x80) != 128 ? ((int) (b1)) : (b1 & 0x7f) + 128;
        int i2 = (b2 & 0x80) != 128 ? ((int) (b2)) : (b2 & 0x7f) + 128;
        int i3 = (b3 & 0x80) != 128 ? ((int) (b3)) : (b3 & 0x7f) + 128;
        return ((long)i0 << 24) + ((long)i1 << 16) + ((long)i2 << 8) + (long)i3;
    }

    private long readTimeStamp(byte buffer[], int offset)
    {
        long seconds = read32(buffer, offset);
        long fraction = read32(buffer, offset + 4);
        return (seconds - 0x83aa7e80L) * 1000L + (fraction * 1000L) / 0x100000000L;
    }

    private void writeTimeStamp(byte buffer[], int offset, long time)
    {
        long seconds = time / 1000L;
        long milliseconds = time - seconds * 1000L;
        seconds += 0x83aa7e80L;
        buffer[offset++] = (byte)(int)(seconds >> 24);
        buffer[offset++] = (byte)(int)(seconds >> 16);
        buffer[offset++] = (byte)(int)(seconds >> 8);
        buffer[offset++] = (byte)(int)(seconds >> 0);
        long fraction = (milliseconds * 0x100000000L) / 1000L;
        buffer[offset++] = (byte)(int)(fraction >> 24);
        buffer[offset++] = (byte)(int)(fraction >> 16);
        buffer[offset++] = (byte)(int)(fraction >> 8);
        buffer[offset++] = (byte)(int)(Math.random() * 255D);
    }

    public GregorianCalendar getFecha()
    {
        return fechaSNTP;
    }

    private static final String TAG = "SntpClient";
    private static final int REFERENCE_TIME_OFFSET = 16;
    private static final int ORIGINATE_TIME_OFFSET = 24;
    private static final int RECEIVE_TIME_OFFSET = 32;
    private static final int TRANSMIT_TIME_OFFSET = 40;
    private static final int NTP_PACKET_SIZE = 48;
    private static final int NTP_PORT = 123;
    private static final int NTP_MODE_CLIENT = 3;
    private static final int NTP_VERSION = 3;
    private static final long OFFSET_1900_TO_1970 = 0x83aa7e80L;
    private long mNtpTime;
    private long mNtpTimeReference;
    private long mRoundTripTime;
    private GregorianCalendar fechaSNTP;
}