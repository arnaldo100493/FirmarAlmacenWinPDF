// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Jpeg2000.java

package co.com.pdf.text;

import co.com.pdf.text.error_messages.MessageLocalization;
import java.io.*;
import java.net.URL;
import java.util.ArrayList;

// Referenced classes of package co.com.pdf.text:
//            Image, BadElementException, Utilities

public class Jpeg2000 extends Image
{
    private class ZeroBoxSizeException extends IOException
    {

        final Jpeg2000 this$0;

        public ZeroBoxSizeException()
        {
            this$0 = Jpeg2000.this;
            super();
        }

        public ZeroBoxSizeException(String s)
        {
            this$0 = Jpeg2000.this;
            super(s);
        }
    }

    public static class ColorSpecBox extends ArrayList
    {

        public int getMeth()
        {
            return ((Integer)get(0)).intValue();
        }

        public int getPrec()
        {
            return ((Integer)get(1)).intValue();
        }

        public int getApprox()
        {
            return ((Integer)get(2)).intValue();
        }

        public int getEnumCs()
        {
            return ((Integer)get(3)).intValue();
        }

        public byte[] getColorProfile()
        {
            return colorProfile;
        }

        void setColorProfile(byte colorProfile[])
        {
            this.colorProfile = colorProfile;
        }

        private byte colorProfile[];

        public ColorSpecBox()
        {
        }
    }


    Jpeg2000(Image image)
    {
        super(image);
        colorSpecBoxes = null;
        isJp2 = false;
        if(image instanceof Jpeg2000)
        {
            Jpeg2000 jpeg2000 = (Jpeg2000)image;
            numOfComps = jpeg2000.numOfComps;
            if(colorSpecBoxes != null)
                colorSpecBoxes = (ArrayList)jpeg2000.colorSpecBoxes.clone();
            isJp2 = jpeg2000.isJp2;
            if(bpcBoxData != null)
                bpcBoxData = (byte[])jpeg2000.bpcBoxData.clone();
        }
    }

    public Jpeg2000(URL url)
        throws BadElementException, IOException
    {
        super(url);
        colorSpecBoxes = null;
        isJp2 = false;
        processParameters();
    }

    public Jpeg2000(byte img[])
        throws BadElementException, IOException
    {
        super((URL)null);
        colorSpecBoxes = null;
        isJp2 = false;
        rawData = img;
        originalData = img;
        processParameters();
    }

    public Jpeg2000(byte img[], float width, float height)
        throws BadElementException, IOException
    {
        this(img);
        scaledWidth = width;
        scaledHeight = height;
    }

    private int cio_read(int n)
        throws IOException
    {
        int v = 0;
        for(int i = n - 1; i >= 0; i--)
            v += inp.read() << (i << 3);

        return v;
    }

    public void jp2_read_boxhdr()
        throws IOException
    {
        boxLength = cio_read(4);
        boxType = cio_read(4);
        if(boxLength == 1)
        {
            if(cio_read(4) != 0)
                throw new IOException(MessageLocalization.getComposedMessage("cannot.handle.box.sizes.higher.than.2.32", new Object[0]));
            boxLength = cio_read(4);
            if(boxLength == 0)
                throw new IOException(MessageLocalization.getComposedMessage("unsupported.box.size.eq.eq.0", new Object[0]));
        } else
        if(boxLength == 0)
            throw new ZeroBoxSizeException(MessageLocalization.getComposedMessage("unsupported.box.size.eq.eq.0", new Object[0]));
    }

    private void processParameters()
        throws IOException
    {
        type = 33;
        originalType = 8;
        inp = null;
        if(rawData == null)
            inp = url.openStream();
        else
            inp = new ByteArrayInputStream(rawData);
        boxLength = cio_read(4);
        if(boxLength == 12)
        {
            isJp2 = true;
            boxType = cio_read(4);
            if(0x6a502020 != boxType)
                throw new IOException(MessageLocalization.getComposedMessage("expected.jp.marker", new Object[0]));
            if(0xd0a870a != cio_read(4))
                throw new IOException(MessageLocalization.getComposedMessage("error.with.jp.marker", new Object[0]));
            jp2_read_boxhdr();
            if(0x66747970 != boxType)
                throw new IOException(MessageLocalization.getComposedMessage("expected.ftyp.marker", new Object[0]));
            Utilities.skip(inp, boxLength - 8);
            jp2_read_boxhdr();
            do
                if(0x6a703268 != boxType)
                {
                    if(boxType == 0x6a703263)
                        throw new IOException(MessageLocalization.getComposedMessage("expected.jp2h.marker", new Object[0]));
                    Utilities.skip(inp, boxLength - 8);
                    jp2_read_boxhdr();
                }
            while(0x6a703268 != boxType);
            jp2_read_boxhdr();
            if(0x69686472 != boxType)
                throw new IOException(MessageLocalization.getComposedMessage("expected.ihdr.marker", new Object[0]));
            scaledHeight = cio_read(4);
            setTop(scaledHeight);
            scaledWidth = cio_read(4);
            setRight(scaledWidth);
            numOfComps = cio_read(2);
            bpc = -1;
            bpc = cio_read(1);
            Utilities.skip(inp, 3);
            jp2_read_boxhdr();
            if(boxType == 0x62706363)
            {
                bpcBoxData = new byte[boxLength - 8];
                inp.read(bpcBoxData, 0, boxLength - 8);
            } else
            if(boxType == 0x636f6c72)
                do
                {
                    if(colorSpecBoxes == null)
                        colorSpecBoxes = new ArrayList();
                    colorSpecBoxes.add(jp2_read_colr());
                    try
                    {
                        jp2_read_boxhdr();
                    }
                    catch(ZeroBoxSizeException ioe) { }
                } while(0x636f6c72 == boxType);
        } else
        if(boxLength == 0xff4fff51)
        {
            Utilities.skip(inp, 4);
            int x1 = cio_read(4);
            int y1 = cio_read(4);
            int x0 = cio_read(4);
            int y0 = cio_read(4);
            Utilities.skip(inp, 16);
            colorspace = cio_read(2);
            bpc = 8;
            scaledHeight = y1 - y0;
            setTop(scaledHeight);
            scaledWidth = x1 - x0;
            setRight(scaledWidth);
        } else
        {
            throw new IOException(MessageLocalization.getComposedMessage("not.a.valid.jpeg2000.file", new Object[0]));
        }
        if(inp != null)
        {
            try
            {
                inp.close();
            }
            catch(Exception e) { }
            inp = null;
        }
        break MISSING_BLOCK_LABEL_627;
        Exception exception;
        exception;
        if(inp != null)
        {
            try
            {
                inp.close();
            }
            catch(Exception e) { }
            inp = null;
        }
        throw exception;
        plainWidth = getWidth();
        plainHeight = getHeight();
        return;
    }

    private ColorSpecBox jp2_read_colr()
        throws IOException
    {
        int readBytes = 8;
        ColorSpecBox colr = new ColorSpecBox();
        for(int i = 0; i < 3; i++)
        {
            colr.add(Integer.valueOf(cio_read(1)));
            readBytes++;
        }

        if(colr.getMeth() == 1)
        {
            colr.add(Integer.valueOf(cio_read(4)));
            readBytes += 4;
        } else
        {
            colr.add(Integer.valueOf(0));
        }
        if(boxLength - readBytes > 0)
        {
            byte colorProfile[] = new byte[boxLength - readBytes];
            inp.read(colorProfile, 0, boxLength - readBytes);
            colr.setColorProfile(colorProfile);
        }
        return colr;
    }

    public int getNumOfComps()
    {
        return numOfComps;
    }

    public byte[] getBpcBoxData()
    {
        return bpcBoxData;
    }

    public ArrayList getColorSpecBoxes()
    {
        return colorSpecBoxes;
    }

    public boolean isJp2()
    {
        return isJp2;
    }

    public static final int JP2_JP = 0x6a502020;
    public static final int JP2_IHDR = 0x69686472;
    public static final int JPIP_JPIP = 0x6a706970;
    public static final int JP2_FTYP = 0x66747970;
    public static final int JP2_JP2H = 0x6a703268;
    public static final int JP2_COLR = 0x636f6c72;
    public static final int JP2_JP2C = 0x6a703263;
    public static final int JP2_URL = 0x75726c20;
    public static final int JP2_DBTL = 0x6474626c;
    public static final int JP2_BPCC = 0x62706363;
    public static final int JP2_JP2 = 0x6a703220;
    InputStream inp;
    int boxLength;
    int boxType;
    int numOfComps;
    ArrayList colorSpecBoxes;
    boolean isJp2;
    byte bpcBoxData[];
}
