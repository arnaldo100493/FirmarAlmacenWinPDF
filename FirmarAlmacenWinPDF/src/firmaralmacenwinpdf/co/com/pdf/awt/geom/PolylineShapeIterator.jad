// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   PolylineShapeIterator.java

package co.com.pdf.awt.geom;

import co.com.pdf.text.error_messages.MessageLocalization;
import java.awt.geom.AffineTransform;
import java.awt.geom.PathIterator;
import java.util.NoSuchElementException;

// Referenced classes of package co.com.pdf.awt.geom:
//            PolylineShape

public class PolylineShapeIterator
    implements PathIterator
{

    PolylineShapeIterator(PolylineShape l, AffineTransform at)
    {
        poly = l;
        affine = at;
    }

    public int currentSegment(double coords[])
    {
        if(isDone())
            throw new NoSuchElementException(MessageLocalization.getComposedMessage("line.iterator.out.of.bounds", new Object[0]));
        int type = index != 0 ? 1 : 0;
        coords[0] = poly.x[index];
        coords[1] = poly.y[index];
        if(affine != null)
            affine.transform(coords, 0, coords, 0, 1);
        return type;
    }

    public int currentSegment(float coords[])
    {
        if(isDone())
            throw new NoSuchElementException(MessageLocalization.getComposedMessage("line.iterator.out.of.bounds", new Object[0]));
        int type = index != 0 ? 1 : 0;
        coords[0] = poly.x[index];
        coords[1] = poly.y[index];
        if(affine != null)
            affine.transform(coords, 0, coords, 0, 1);
        return type;
    }

    public int getWindingRule()
    {
        return 1;
    }

    public boolean isDone()
    {
        return index >= poly.np;
    }

    public void next()
    {
        index++;
    }

    protected PolylineShape poly;
    protected AffineTransform affine;
    protected int index;
}
