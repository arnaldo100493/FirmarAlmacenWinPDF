// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Rectangle.java

package co.com.pdf.awt.geom;

import java.io.Serializable;

// Referenced classes of package co.com.pdf.awt.geom:
//            Rectangle2D, Dimension, Point, Shape

public class Rectangle extends Rectangle2D
    implements Shape, Serializable
{

    public Rectangle()
    {
        setBounds(0, 0, 0, 0);
    }

    public Rectangle(Point p)
    {
        setBounds(p.x, p.y, 0.0D, 0.0D);
    }

    public Rectangle(Point p, Dimension d)
    {
        setBounds(p.x, p.y, d.width, d.height);
    }

    public Rectangle(double x, double y, double width, double height)
    {
        setBounds(x, y, width, height);
    }

    public Rectangle(int width, int height)
    {
        setBounds(0, 0, width, height);
    }

    public Rectangle(Rectangle r)
    {
        setBounds(r.x, r.y, r.width, r.height);
    }

    public Rectangle(co.com.pdf.text.Rectangle r)
    {
        r.normalize();
        setBounds(r.getLeft(), r.getBottom(), r.getWidth(), r.getHeight());
    }

    public Rectangle(Dimension d)
    {
        setBounds(0.0D, 0.0D, d.width, d.height);
    }

    public double getX()
    {
        return x;
    }

    public double getY()
    {
        return y;
    }

    public double getHeight()
    {
        return height;
    }

    public double getWidth()
    {
        return width;
    }

    public boolean isEmpty()
    {
        return width <= 0.0D || height <= 0.0D;
    }

    public Dimension getSize()
    {
        return new Dimension(width, height);
    }

    public void setSize(int mx, int my)
    {
        setSize(mx, my);
    }

    public void setSize(double width, double height)
    {
        this.width = width;
        this.height = height;
    }

    public void setSize(Dimension d)
    {
        setSize(d.width, d.height);
    }

    public Point getLocation()
    {
        return new Point(x, y);
    }

    public void setLocation(int mx, int my)
    {
        setLocation(mx, my);
    }

    public void setLocation(double x, double y)
    {
        this.x = x;
        this.y = y;
    }

    public void setLocation(Point p)
    {
        setLocation(p.x, p.y);
    }

    public void setRect(double x, double y, double width, double height)
    {
        int x1 = (int)Math.floor(x);
        int y1 = (int)Math.floor(y);
        int x2 = (int)Math.ceil(x + width);
        int y2 = (int)Math.ceil(y + height);
        setBounds(x1, y1, x2 - x1, y2 - y1);
    }

    public Rectangle getBounds()
    {
        return new Rectangle(x, y, width, height);
    }

    public Rectangle2D getBounds2D()
    {
        return getBounds();
    }

    public void setBounds(int x, int y, int width, int height)
    {
        setBounds(x, y, width, height);
    }

    public void setBounds(double x, double y, double width, double height)
    {
        this.x = x;
        this.y = y;
        this.height = height;
        this.width = width;
    }

    public void setBounds(Rectangle r)
    {
        setBounds(r.x, r.y, r.width, r.height);
    }

    public void grow(int mx, int my)
    {
        translate(mx, my);
    }

    public void grow(double dx, double dy)
    {
        x -= dx;
        y -= dy;
        width += dx + dx;
        height += dy + dy;
    }

    public void translate(int mx, int my)
    {
        translate(mx, my);
    }

    public void translate(double mx, double my)
    {
        x += mx;
        y += my;
    }

    public void add(int px, int py)
    {
        add(px, py);
    }

    public void add(double px, double py)
    {
        double x1 = Math.min(x, px);
        double x2 = Math.max(x + width, px);
        double y1 = Math.min(y, py);
        double y2 = Math.max(y + height, py);
        setBounds(x1, y1, x2 - x1, y2 - y1);
    }

    public void add(Point p)
    {
        add(p.x, p.y);
    }

    public void add(Rectangle r)
    {
        double x1 = Math.min(x, r.x);
        double x2 = Math.max(x + width, r.x + r.width);
        double y1 = Math.min(y, r.y);
        double y2 = Math.max(y + height, r.y + r.height);
        setBounds(x1, y1, x2 - x1, y2 - y1);
    }

    public boolean contains(int px, int py)
    {
        return contains(px, py);
    }

    public boolean contains(double px, double py)
    {
        if(isEmpty())
            return false;
        if(px < x || py < y)
        {
            return false;
        } else
        {
            px -= x;
            py -= y;
            return px < width && py < height;
        }
    }

    public boolean contains(Point p)
    {
        return contains(p.x, p.y);
    }

    public boolean contains(int rx, int ry, int rw, int rh)
    {
        return contains(rx, ry) && contains((rx + rw) - 1, (ry + rh) - 1);
    }

    public boolean contains(double rx, double ry, double rw, double rh)
    {
        return contains(rx, ry) && contains((rx + rw) - 0.01D, (ry + rh) - 0.01D);
    }

    public boolean contains(Rectangle r)
    {
        return contains(r.x, r.y, r.width, r.height);
    }

    public Rectangle2D createIntersection(Rectangle2D r)
    {
        if(r instanceof Rectangle)
        {
            return intersection((Rectangle)r);
        } else
        {
            Rectangle2D dst = new Rectangle2D.Double();
            Rectangle2D.intersect(this, r, dst);
            return dst;
        }
    }

    public Rectangle intersection(Rectangle r)
    {
        double x1 = Math.max(x, r.x);
        double y1 = Math.max(y, r.y);
        double x2 = Math.min(x + width, r.x + r.width);
        double y2 = Math.min(y + height, r.y + r.height);
        return new Rectangle(x1, y1, x2 - x1, y2 - y1);
    }

    public boolean intersects(Rectangle r)
    {
        return !intersection(r).isEmpty();
    }

    public int outcode(double px, double py)
    {
        int code = 0;
        if(width <= 0.0D)
            code |= 5;
        else
        if(px < x)
            code |= 1;
        else
        if(px > x + width)
            code |= 4;
        if(height <= 0.0D)
            code |= 0xa;
        else
        if(py < y)
            code |= 2;
        else
        if(py > y + height)
            code |= 8;
        return code;
    }

    public Rectangle2D createUnion(Rectangle2D r)
    {
        if(r instanceof Rectangle)
        {
            return union((Rectangle)r);
        } else
        {
            Rectangle2D dst = new Rectangle2D.Double();
            Rectangle2D.union(this, r, dst);
            return dst;
        }
    }

    public Rectangle union(Rectangle r)
    {
        Rectangle dst = new Rectangle(this);
        dst.add(r);
        return dst;
    }

    public boolean equals(Object obj)
    {
        if(obj == this)
            return true;
        if(obj instanceof Rectangle)
        {
            Rectangle r = (Rectangle)obj;
            return r.x == x && r.y == y && r.width == width && r.height == height;
        } else
        {
            return false;
        }
    }

    public String toString()
    {
        return (new StringBuilder()).append(getClass().getName()).append("[x=").append(x).append(",y=").append(y).append(",width=").append(width).append(",height=").append(height).append("]").toString();
    }

    private static final long serialVersionUID = 0xc3b06a051aca6a74L;
    public double x;
    public double y;
    public double width;
    public double height;
}
