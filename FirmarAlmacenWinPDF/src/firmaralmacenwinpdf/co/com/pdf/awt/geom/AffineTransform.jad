// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   AffineTransform.java

package co.com.pdf.awt.geom;

import co.com.pdf.awt.geom.misc.HashCode;
import co.com.pdf.awt.geom.misc.Messages;
import java.io.*;

// Referenced classes of package co.com.pdf.awt.geom:
//            NoninvertibleTransformException, GeneralPath, Point2D, Shape, 
//            PathIterator

public class AffineTransform
    implements Cloneable, Serializable
{

    public AffineTransform()
    {
        type = 0;
        m00 = m11 = 1.0D;
        m10 = m01 = m02 = m12 = 0.0D;
    }

    public AffineTransform(AffineTransform t)
    {
        type = t.type;
        m00 = t.m00;
        m10 = t.m10;
        m01 = t.m01;
        m11 = t.m11;
        m02 = t.m02;
        m12 = t.m12;
    }

    public AffineTransform(float m00, float m10, float m01, float m11, float m02, float m12)
    {
        type = -1;
        this.m00 = m00;
        this.m10 = m10;
        this.m01 = m01;
        this.m11 = m11;
        this.m02 = m02;
        this.m12 = m12;
    }

    public AffineTransform(double m00, double m10, double m01, double m11, double m02, double m12)
    {
        type = -1;
        this.m00 = m00;
        this.m10 = m10;
        this.m01 = m01;
        this.m11 = m11;
        this.m02 = m02;
        this.m12 = m12;
    }

    public AffineTransform(float matrix[])
    {
        type = -1;
        m00 = matrix[0];
        m10 = matrix[1];
        m01 = matrix[2];
        m11 = matrix[3];
        if(matrix.length > 4)
        {
            m02 = matrix[4];
            m12 = matrix[5];
        }
    }

    public AffineTransform(double matrix[])
    {
        type = -1;
        m00 = matrix[0];
        m10 = matrix[1];
        m01 = matrix[2];
        m11 = matrix[3];
        if(matrix.length > 4)
        {
            m02 = matrix[4];
            m12 = matrix[5];
        }
    }

    public int getType()
    {
        if(this.type != -1)
            return this.type;
        int type = 0;
        if(m00 * m01 + m10 * m11 != 0.0D)
        {
            type |= 0x20;
            return type;
        }
        if(m02 != 0.0D || m12 != 0.0D)
            type |= 1;
        else
        if(m00 == 1.0D && m11 == 1.0D && m01 == 0.0D && m10 == 0.0D)
        {
            type = 0;
            return type;
        }
        if(m00 * m11 - m01 * m10 < 0.0D)
            type |= 0x40;
        double dx = m00 * m00 + m10 * m10;
        double dy = m01 * m01 + m11 * m11;
        if(dx != dy)
            type |= 4;
        else
        if(dx != 1.0D)
            type |= 2;
        if(m00 == 0.0D && m11 == 0.0D || m10 == 0.0D && m01 == 0.0D && (m00 < 0.0D || m11 < 0.0D))
            type |= 8;
        else
        if(m01 != 0.0D || m10 != 0.0D)
            type |= 0x10;
        return type;
    }

    public double getScaleX()
    {
        return m00;
    }

    public double getScaleY()
    {
        return m11;
    }

    public double getShearX()
    {
        return m01;
    }

    public double getShearY()
    {
        return m10;
    }

    public double getTranslateX()
    {
        return m02;
    }

    public double getTranslateY()
    {
        return m12;
    }

    public boolean isIdentity()
    {
        return getType() == 0;
    }

    public void getMatrix(double matrix[])
    {
        matrix[0] = m00;
        matrix[1] = m10;
        matrix[2] = m01;
        matrix[3] = m11;
        if(matrix.length > 4)
        {
            matrix[4] = m02;
            matrix[5] = m12;
        }
    }

    public double getDeterminant()
    {
        return m00 * m11 - m01 * m10;
    }

    public void setTransform(double m00, double m10, double m01, double m11, double m02, double m12)
    {
        type = -1;
        this.m00 = m00;
        this.m10 = m10;
        this.m01 = m01;
        this.m11 = m11;
        this.m02 = m02;
        this.m12 = m12;
    }

    public void setTransform(AffineTransform t)
    {
        type = t.type;
        setTransform(t.m00, t.m10, t.m01, t.m11, t.m02, t.m12);
    }

    public void setToIdentity()
    {
        type = 0;
        m00 = m11 = 1.0D;
        m10 = m01 = m02 = m12 = 0.0D;
    }

    public void setToTranslation(double mx, double my)
    {
        m00 = m11 = 1.0D;
        m01 = m10 = 0.0D;
        m02 = mx;
        m12 = my;
        if(mx == 0.0D && my == 0.0D)
            type = 0;
        else
            type = 1;
    }

    public void setToScale(double scx, double scy)
    {
        m00 = scx;
        m11 = scy;
        m10 = m01 = m02 = m12 = 0.0D;
        if(scx != 1.0D || scy != 1.0D)
            type = -1;
        else
            type = 0;
    }

    public void setToShear(double shx, double shy)
    {
        m00 = m11 = 1.0D;
        m02 = m12 = 0.0D;
        m01 = shx;
        m10 = shy;
        if(shx != 0.0D || shy != 0.0D)
            type = -1;
        else
            type = 0;
    }

    public void setToRotation(double angle)
    {
        double sin = Math.sin(angle);
        double cos = Math.cos(angle);
        if(Math.abs(cos) < 1E-010D)
        {
            cos = 0.0D;
            sin = sin <= 0.0D ? -1D : 1.0D;
        } else
        if(Math.abs(sin) < 1E-010D)
        {
            sin = 0.0D;
            cos = cos <= 0.0D ? -1D : 1.0D;
        }
        m00 = m11 = cos;
        m01 = -sin;
        m10 = sin;
        m02 = m12 = 0.0D;
        type = -1;
    }

    public void setToRotation(double angle, double px, double py)
    {
        setToRotation(angle);
        m02 = px * (1.0D - m00) + py * m10;
        m12 = py * (1.0D - m00) - px * m10;
        type = -1;
    }

    public static AffineTransform getTranslateInstance(double mx, double my)
    {
        AffineTransform t = new AffineTransform();
        t.setToTranslation(mx, my);
        return t;
    }

    public static AffineTransform getScaleInstance(double scx, double scY)
    {
        AffineTransform t = new AffineTransform();
        t.setToScale(scx, scY);
        return t;
    }

    public static AffineTransform getShearInstance(double shx, double shy)
    {
        AffineTransform m = new AffineTransform();
        m.setToShear(shx, shy);
        return m;
    }

    public static AffineTransform getRotateInstance(double angle)
    {
        AffineTransform t = new AffineTransform();
        t.setToRotation(angle);
        return t;
    }

    public static AffineTransform getRotateInstance(double angle, double x, double y)
    {
        AffineTransform t = new AffineTransform();
        t.setToRotation(angle, x, y);
        return t;
    }

    public void translate(double mx, double my)
    {
        concatenate(getTranslateInstance(mx, my));
    }

    public void scale(double scx, double scy)
    {
        concatenate(getScaleInstance(scx, scy));
    }

    public void shear(double shx, double shy)
    {
        concatenate(getShearInstance(shx, shy));
    }

    public void rotate(double angle)
    {
        concatenate(getRotateInstance(angle));
    }

    public void rotate(double angle, double px, double py)
    {
        concatenate(getRotateInstance(angle, px, py));
    }

    AffineTransform multiply(AffineTransform t1, AffineTransform t2)
    {
        return new AffineTransform(t1.m00 * t2.m00 + t1.m10 * t2.m01, t1.m00 * t2.m10 + t1.m10 * t2.m11, t1.m01 * t2.m00 + t1.m11 * t2.m01, t1.m01 * t2.m10 + t1.m11 * t2.m11, t1.m02 * t2.m00 + t1.m12 * t2.m01 + t2.m02, t1.m02 * t2.m10 + t1.m12 * t2.m11 + t2.m12);
    }

    public void concatenate(AffineTransform t)
    {
        setTransform(multiply(t, this));
    }

    public void preConcatenate(AffineTransform t)
    {
        setTransform(multiply(this, t));
    }

    public AffineTransform createInverse()
        throws NoninvertibleTransformException
    {
        double det = getDeterminant();
        if(Math.abs(det) < 1E-010D)
            throw new NoninvertibleTransformException(Messages.getString("awt.204"));
        else
            return new AffineTransform(m11 / det, -m10 / det, -m01 / det, m00 / det, (m01 * m12 - m11 * m02) / det, (m10 * m02 - m00 * m12) / det);
    }

    public Point2D transform(Point2D src, Point2D dst)
    {
        if(dst == null)
            if(src instanceof Point2D.Double)
                dst = new Point2D.Double();
            else
                dst = new Point2D.Float();
        double x = src.getX();
        double y = src.getY();
        dst.setLocation(x * m00 + y * m01 + m02, x * m10 + y * m11 + m12);
        return dst;
    }

    public void transform(Point2D src[], int srcOff, Point2D dst[], int dstOff, int length)
    {
        while(--length >= 0) 
        {
            Point2D srcPoint = src[srcOff++];
            double x = srcPoint.getX();
            double y = srcPoint.getY();
            Point2D dstPoint = dst[dstOff];
            if(dstPoint == null)
                if(srcPoint instanceof Point2D.Double)
                    dstPoint = new Point2D.Double();
                else
                    dstPoint = new Point2D.Float();
            dstPoint.setLocation(x * m00 + y * m01 + m02, x * m10 + y * m11 + m12);
            dst[dstOff++] = dstPoint;
        }
    }

    public void transform(double src[], int srcOff, double dst[], int dstOff, int length)
    {
        int step = 2;
        if(src == dst && srcOff < dstOff && dstOff < srcOff + length * 2)
        {
            srcOff = (srcOff + length * 2) - 2;
            dstOff = (dstOff + length * 2) - 2;
            step = -2;
        }
        while(--length >= 0) 
        {
            double x = src[srcOff + 0];
            double y = src[srcOff + 1];
            dst[dstOff + 0] = x * m00 + y * m01 + m02;
            dst[dstOff + 1] = x * m10 + y * m11 + m12;
            srcOff += step;
            dstOff += step;
        }
    }

    public void transform(float src[], int srcOff, float dst[], int dstOff, int length)
    {
        int step = 2;
        if(src == dst && srcOff < dstOff && dstOff < srcOff + length * 2)
        {
            srcOff = (srcOff + length * 2) - 2;
            dstOff = (dstOff + length * 2) - 2;
            step = -2;
        }
        while(--length >= 0) 
        {
            float x = src[srcOff + 0];
            float y = src[srcOff + 1];
            dst[dstOff + 0] = (float)((double)x * m00 + (double)y * m01 + m02);
            dst[dstOff + 1] = (float)((double)x * m10 + (double)y * m11 + m12);
            srcOff += step;
            dstOff += step;
        }
    }

    public void transform(float src[], int srcOff, double dst[], int dstOff, int length)
    {
        while(--length >= 0) 
        {
            float x = src[srcOff++];
            float y = src[srcOff++];
            dst[dstOff++] = (double)x * m00 + (double)y * m01 + m02;
            dst[dstOff++] = (double)x * m10 + (double)y * m11 + m12;
        }
    }

    public void transform(double src[], int srcOff, float dst[], int dstOff, int length)
    {
        while(--length >= 0) 
        {
            double x = src[srcOff++];
            double y = src[srcOff++];
            dst[dstOff++] = (float)(x * m00 + y * m01 + m02);
            dst[dstOff++] = (float)(x * m10 + y * m11 + m12);
        }
    }

    public Point2D deltaTransform(Point2D src, Point2D dst)
    {
        if(dst == null)
            if(src instanceof Point2D.Double)
                dst = new Point2D.Double();
            else
                dst = new Point2D.Float();
        double x = src.getX();
        double y = src.getY();
        dst.setLocation(x * m00 + y * m01, x * m10 + y * m11);
        return dst;
    }

    public void deltaTransform(double src[], int srcOff, double dst[], int dstOff, int length)
    {
        while(--length >= 0) 
        {
            double x = src[srcOff++];
            double y = src[srcOff++];
            dst[dstOff++] = x * m00 + y * m01;
            dst[dstOff++] = x * m10 + y * m11;
        }
    }

    public Point2D inverseTransform(Point2D src, Point2D dst)
        throws NoninvertibleTransformException
    {
        double det = getDeterminant();
        if(Math.abs(det) < 1E-010D)
            throw new NoninvertibleTransformException(Messages.getString("awt.204"));
        if(dst == null)
            if(src instanceof Point2D.Double)
                dst = new Point2D.Double();
            else
                dst = new Point2D.Float();
        double x = src.getX() - m02;
        double y = src.getY() - m12;
        dst.setLocation((x * m11 - y * m01) / det, (y * m00 - x * m10) / det);
        return dst;
    }

    public void inverseTransform(double src[], int srcOff, double dst[], int dstOff, int length)
        throws NoninvertibleTransformException
    {
        double det = getDeterminant();
        if(Math.abs(det) < 1E-010D)
            throw new NoninvertibleTransformException(Messages.getString("awt.204"));
        while(--length >= 0) 
        {
            double x = src[srcOff++] - m02;
            double y = src[srcOff++] - m12;
            dst[dstOff++] = (x * m11 - y * m01) / det;
            dst[dstOff++] = (y * m00 - x * m10) / det;
        }
    }

    public void inverseTransform(float src[], int srcOff, float dst[], int dstOff, int length)
        throws NoninvertibleTransformException
    {
        float det = (float)getDeterminant();
        if((double)Math.abs(det) < 1E-010D)
            throw new NoninvertibleTransformException(Messages.getString("awt.204"));
        while(--length >= 0) 
        {
            float x = src[srcOff++] - (float)m02;
            float y = src[srcOff++] - (float)m12;
            dst[dstOff++] = (x * (float)m11 - y * (float)m01) / det;
            dst[dstOff++] = (y * (float)m00 - x * (float)m10) / det;
        }
    }

    public Shape createTransformedShape(Shape src)
    {
        if(src == null)
            return null;
        if(src instanceof GeneralPath)
        {
            return ((GeneralPath)src).createTransformedShape(this);
        } else
        {
            PathIterator path = src.getPathIterator(this);
            GeneralPath dst = new GeneralPath(path.getWindingRule());
            dst.append(path, false);
            return dst;
        }
    }

    public String toString()
    {
        return (new StringBuilder()).append(getClass().getName()).append("[[").append(m00).append(", ").append(m01).append(", ").append(m02).append("], [").append(m10).append(", ").append(m11).append(", ").append(m12).append("]]").toString();
    }

    public Object clone()
    {
        try
        {
            return super.clone();
        }
        catch(CloneNotSupportedException e)
        {
            throw new InternalError();
        }
    }

    public int hashCode()
    {
        HashCode hash = new HashCode();
        hash.append(m00);
        hash.append(m01);
        hash.append(m02);
        hash.append(m10);
        hash.append(m11);
        hash.append(m12);
        return hash.hashCode();
    }

    public boolean equals(Object obj)
    {
        if(obj == this)
            return true;
        if(obj instanceof AffineTransform)
        {
            AffineTransform t = (AffineTransform)obj;
            return m00 == t.m00 && m01 == t.m01 && m02 == t.m02 && m10 == t.m10 && m11 == t.m11 && m12 == t.m12;
        } else
        {
            return false;
        }
    }

    private void writeObject(ObjectOutputStream stream)
        throws IOException
    {
        stream.defaultWriteObject();
    }

    private void readObject(ObjectInputStream stream)
        throws IOException, ClassNotFoundException
    {
        stream.defaultReadObject();
        type = -1;
    }

    private static final long serialVersionUID = 0x127891154ad5ff62L;
    public static final int TYPE_IDENTITY = 0;
    public static final int TYPE_TRANSLATION = 1;
    public static final int TYPE_UNIFORM_SCALE = 2;
    public static final int TYPE_GENERAL_SCALE = 4;
    public static final int TYPE_QUADRANT_ROTATION = 8;
    public static final int TYPE_GENERAL_ROTATION = 16;
    public static final int TYPE_GENERAL_TRANSFORM = 32;
    public static final int TYPE_FLIP = 64;
    public static final int TYPE_MASK_SCALE = 6;
    public static final int TYPE_MASK_ROTATION = 24;
    static final int TYPE_UNKNOWN = -1;
    static final double ZERO = 1E-010D;
    double m00;
    double m10;
    double m01;
    double m11;
    double m02;
    double m12;
    transient int type;
}
