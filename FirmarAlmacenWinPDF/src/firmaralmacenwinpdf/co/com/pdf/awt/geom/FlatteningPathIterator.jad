// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   FlatteningPathIterator.java

package co.com.pdf.awt.geom;

import co.com.pdf.awt.geom.misc.Messages;
import java.util.NoSuchElementException;

// Referenced classes of package co.com.pdf.awt.geom:
//            PathIterator, QuadCurve2D, CubicCurve2D

public class FlatteningPathIterator
    implements PathIterator
{

    public FlatteningPathIterator(PathIterator path, double flatness)
    {
        this(path, flatness, 16);
    }

    public FlatteningPathIterator(PathIterator path, double flatness, int limit)
    {
        bufEmpty = true;
        coords = new double[6];
        if(flatness < 0.0D)
            throw new IllegalArgumentException(Messages.getString("awt.206"));
        if(limit < 0)
            throw new IllegalArgumentException(Messages.getString("awt.207"));
        if(path == null)
        {
            throw new NullPointerException(Messages.getString("awt.208"));
        } else
        {
            p = path;
            this.flatness = flatness;
            flatness2 = flatness * flatness;
            bufLimit = limit;
            bufSize = Math.min(bufLimit, 16);
            buf = new double[bufSize];
            bufIndex = bufSize;
            return;
        }
    }

    public double getFlatness()
    {
        return flatness;
    }

    public int getRecursionLimit()
    {
        return bufLimit;
    }

    public int getWindingRule()
    {
        return p.getWindingRule();
    }

    public boolean isDone()
    {
        return bufEmpty && p.isDone();
    }

    void evaluate()
    {
        if(bufEmpty)
            bufType = p.currentSegment(coords);
        switch(bufType)
        {
        default:
            break;

        case 0: // '\0'
        case 1: // '\001'
            px = coords[0];
            py = coords[1];
            break;

        case 2: // '\002'
            if(bufEmpty)
            {
                bufIndex -= 6;
                buf[bufIndex + 0] = px;
                buf[bufIndex + 1] = py;
                System.arraycopy(coords, 0, buf, bufIndex + 2, 4);
                bufSubdiv = 0;
            }
            for(; bufSubdiv < bufLimit && QuadCurve2D.getFlatnessSq(buf, bufIndex) >= flatness2; bufSubdiv++)
            {
                if(bufIndex <= 4)
                {
                    double tmp[] = new double[bufSize + 16];
                    System.arraycopy(buf, bufIndex, tmp, bufIndex + 16, bufSize - bufIndex);
                    buf = tmp;
                    bufSize += 16;
                    bufIndex += 16;
                }
                QuadCurve2D.subdivide(buf, bufIndex, buf, bufIndex - 4, buf, bufIndex);
                bufIndex -= 4;
            }

            bufIndex += 4;
            px = buf[bufIndex];
            py = buf[bufIndex + 1];
            bufEmpty = bufIndex == bufSize - 2;
            if(bufEmpty)
            {
                bufIndex = bufSize;
                bufType = 1;
            }
            break;

        case 3: // '\003'
            if(bufEmpty)
            {
                bufIndex -= 8;
                buf[bufIndex + 0] = px;
                buf[bufIndex + 1] = py;
                System.arraycopy(coords, 0, buf, bufIndex + 2, 6);
                bufSubdiv = 0;
            }
            for(; bufSubdiv < bufLimit && CubicCurve2D.getFlatnessSq(buf, bufIndex) >= flatness2; bufSubdiv++)
            {
                if(bufIndex <= 6)
                {
                    double tmp[] = new double[bufSize + 16];
                    System.arraycopy(buf, bufIndex, tmp, bufIndex + 16, bufSize - bufIndex);
                    buf = tmp;
                    bufSize += 16;
                    bufIndex += 16;
                }
                CubicCurve2D.subdivide(buf, bufIndex, buf, bufIndex - 6, buf, bufIndex);
                bufIndex -= 6;
            }

            bufIndex += 6;
            px = buf[bufIndex];
            py = buf[bufIndex + 1];
            bufEmpty = bufIndex == bufSize - 2;
            if(bufEmpty)
            {
                bufIndex = bufSize;
                bufType = 1;
            }
            break;
        }
    }

    public void next()
    {
        if(bufEmpty)
            p.next();
    }

    public int currentSegment(float coords[])
    {
        if(isDone())
            throw new NoSuchElementException(Messages.getString("awt.4Bx"));
        evaluate();
        int type = bufType;
        if(type != 4)
        {
            coords[0] = (float)px;
            coords[1] = (float)py;
            if(type != 0)
                type = 1;
        }
        return type;
    }

    public int currentSegment(double coords[])
    {
        if(isDone())
            throw new NoSuchElementException(Messages.getString("awt.4B"));
        evaluate();
        int type = bufType;
        if(type != 4)
        {
            coords[0] = px;
            coords[1] = py;
            if(type != 0)
                type = 1;
        }
        return type;
    }

    private static final int BUFFER_SIZE = 16;
    private static final int BUFFER_LIMIT = 16;
    private static final int BUFFER_CAPACITY = 16;
    int bufType;
    int bufLimit;
    int bufSize;
    int bufIndex;
    int bufSubdiv;
    double buf[];
    boolean bufEmpty;
    PathIterator p;
    double flatness;
    double flatness2;
    double px;
    double py;
    double coords[];
}
