// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   CubicCurve2D.java

package co.com.pdf.awt.geom;

import co.com.pdf.awt.geom.misc.Messages;
import java.util.NoSuchElementException;

// Referenced classes of package co.com.pdf.awt.geom:
//            PathIterator, CubicCurve2D, AffineTransform

class CubicCurve2D$Iterator
    implements PathIterator
{

    public int getWindingRule()
    {
        return 1;
    }

    public boolean isDone()
    {
        return index > 1;
    }

    public void next()
    {
        index++;
    }

    public int currentSegment(double coords[])
    {
        if(isDone())
            throw new NoSuchElementException(Messages.getString("awt.4B"));
        int type;
        int count;
        if(index == 0)
        {
            type = 0;
            coords[0] = c.getX1();
            coords[1] = c.getY1();
            count = 1;
        } else
        {
            type = 3;
            coords[0] = c.getCtrlX1();
            coords[1] = c.getCtrlY1();
            coords[2] = c.getCtrlX2();
            coords[3] = c.getCtrlY2();
            coords[4] = c.getX2();
            coords[5] = c.getY2();
            count = 3;
        }
        if(t != null)
            t.transform(coords, 0, coords, 0, count);
        return type;
    }

    public int currentSegment(float coords[])
    {
        if(isDone())
            throw new NoSuchElementException(Messages.getString("awt.4B"));
        int type;
        int count;
        if(index == 0)
        {
            type = 0;
            coords[0] = (float)c.getX1();
            coords[1] = (float)c.getY1();
            count = 1;
        } else
        {
            type = 3;
            coords[0] = (float)c.getCtrlX1();
            coords[1] = (float)c.getCtrlY1();
            coords[2] = (float)c.getCtrlX2();
            coords[3] = (float)c.getCtrlY2();
            coords[4] = (float)c.getX2();
            coords[5] = (float)c.getY2();
            count = 3;
        }
        if(t != null)
            t.transform(coords, 0, coords, 0, count);
        return type;
    }

    CubicCurve2D c;
    AffineTransform t;
    int index;
    final CubicCurve2D this$0;

    CubicCurve2D$Iterator(CubicCurve2D c, AffineTransform t)
    {
        this$0 = CubicCurve2D.this;
        super();
        this.c = c;
        this.t = t;
    }
}
