// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Point2D.java

package co.com.pdf.awt.geom;

import co.com.pdf.awt.geom.misc.HashCode;

public abstract class Point2D
    implements Cloneable
{
    public static class Double extends Point2D
    {

        public double getX()
        {
            return x;
        }

        public double getY()
        {
            return y;
        }

        public void setLocation(double x, double y)
        {
            this.x = x;
            this.y = y;
        }

        public String toString()
        {
            return (new StringBuilder()).append(getClass().getName()).append("[x=").append(x).append(",y=").append(y).append("]").toString();
        }

        public double x;
        public double y;

        public Double()
        {
        }

        public Double(double x, double y)
        {
            this.x = x;
            this.y = y;
        }
    }

    public static class Float extends Point2D
    {

        public double getX()
        {
            return (double)x;
        }

        public double getY()
        {
            return (double)y;
        }

        public void setLocation(float x, float y)
        {
            this.x = x;
            this.y = y;
        }

        public void setLocation(double x, double y)
        {
            this.x = (float)x;
            this.y = (float)y;
        }

        public String toString()
        {
            return (new StringBuilder()).append(getClass().getName()).append("[x=").append(x).append(",y=").append(y).append("]").toString();
        }

        public float x;
        public float y;

        public Float()
        {
        }

        public Float(float x, float y)
        {
            this.x = x;
            this.y = y;
        }
    }


    protected Point2D()
    {
    }

    public abstract double getX();

    public abstract double getY();

    public abstract void setLocation(double d, double d1);

    public void setLocation(Point2D p)
    {
        setLocation(p.getX(), p.getY());
    }

    public static double distanceSq(double x1, double y1, double x2, double y2)
    {
        x2 -= x1;
        y2 -= y1;
        return x2 * x2 + y2 * y2;
    }

    public double distanceSq(double px, double py)
    {
        return distanceSq(getX(), getY(), px, py);
    }

    public double distanceSq(Point2D p)
    {
        return distanceSq(getX(), getY(), p.getX(), p.getY());
    }

    public static double distance(double x1, double y1, double x2, double y2)
    {
        return Math.sqrt(distanceSq(x1, y1, x2, y2));
    }

    public double distance(double px, double py)
    {
        return Math.sqrt(distanceSq(px, py));
    }

    public double distance(Point2D p)
    {
        return Math.sqrt(distanceSq(p));
    }

    public Object clone()
    {
        try
        {
            return super.clone();
        }
        catch(CloneNotSupportedException e)
        {
            throw new InternalError();
        }
    }

    public int hashCode()
    {
        HashCode hash = new HashCode();
        hash.append(getX());
        hash.append(getY());
        return hash.hashCode();
    }

    public boolean equals(Object obj)
    {
        if(obj == this)
            return true;
        if(obj instanceof Point2D)
        {
            Point2D p = (Point2D)obj;
            return getX() == p.getX() && getY() == p.getY();
        } else
        {
            return false;
        }
    }
}
