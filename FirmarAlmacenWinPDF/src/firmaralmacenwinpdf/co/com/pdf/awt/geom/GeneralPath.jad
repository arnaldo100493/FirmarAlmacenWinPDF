// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   GeneralPath.java

package co.com.pdf.awt.geom;

import co.com.pdf.awt.geom.gl.Crossing;
import co.com.pdf.awt.geom.misc.Messages;
import java.util.NoSuchElementException;

// Referenced classes of package co.com.pdf.awt.geom:
//            IllegalPathStateException, FlatteningPathIterator, Shape, PathIterator, 
//            Point2D, AffineTransform, Rectangle2D, Rectangle

public final class GeneralPath
    implements Shape, Cloneable
{
    class Iterator
        implements PathIterator
    {

        public int getWindingRule()
        {
            return p.getWindingRule();
        }

        public boolean isDone()
        {
            return typeIndex >= p.typeSize;
        }

        public void next()
        {
            typeIndex++;
        }

        public int currentSegment(double coords[])
        {
            if(isDone())
                throw new NoSuchElementException(Messages.getString("awt.4B"));
            int type = p.types[typeIndex];
            int count = GeneralPath.pointShift[type];
            for(int i = 0; i < count; i++)
                coords[i] = p.points[pointIndex + i];

            if(t != null)
                t.transform(coords, 0, coords, 0, count / 2);
            pointIndex += count;
            return type;
        }

        public int currentSegment(float coords[])
        {
            if(isDone())
                throw new NoSuchElementException(Messages.getString("awt.4B"));
            int type = p.types[typeIndex];
            int count = GeneralPath.pointShift[type];
            System.arraycopy(p.points, pointIndex, coords, 0, count);
            if(t != null)
                t.transform(coords, 0, coords, 0, count / 2);
            pointIndex += count;
            return type;
        }

        int typeIndex;
        int pointIndex;
        GeneralPath p;
        AffineTransform t;
        final GeneralPath this$0;

        Iterator(GeneralPath path)
        {
            this(path, null);
        }

        Iterator(GeneralPath path, AffineTransform at)
        {
            this$0 = GeneralPath.this;
            super();
            p = path;
            t = at;
        }
    }


    public GeneralPath()
    {
        this(1, 10);
    }

    public GeneralPath(int rule)
    {
        this(rule, 10);
    }

    public GeneralPath(int rule, int initialCapacity)
    {
        setWindingRule(rule);
        types = new byte[initialCapacity];
        points = new float[initialCapacity * 2];
    }

    public GeneralPath(Shape shape)
    {
        this(1, 10);
        PathIterator p = shape.getPathIterator(null);
        setWindingRule(p.getWindingRule());
        append(p, false);
    }

    public void setWindingRule(int rule)
    {
        if(rule != 0 && rule != 1)
        {
            throw new IllegalArgumentException(Messages.getString("awt.209"));
        } else
        {
            this.rule = rule;
            return;
        }
    }

    public int getWindingRule()
    {
        return rule;
    }

    void checkBuf(int pointCount, boolean checkMove)
    {
        if(checkMove && typeSize == 0)
            throw new IllegalPathStateException(Messages.getString("awt.20A"));
        if(typeSize == types.length)
        {
            byte tmp[] = new byte[typeSize + 10];
            System.arraycopy(types, 0, tmp, 0, typeSize);
            types = tmp;
        }
        if(pointSize + pointCount > points.length)
        {
            float tmp[] = new float[pointSize + Math.max(20, pointCount)];
            System.arraycopy(points, 0, tmp, 0, pointSize);
            points = tmp;
        }
    }

    public void moveTo(float x, float y)
    {
        if(typeSize > 0 && types[typeSize - 1] == 0)
        {
            points[pointSize - 2] = x;
            points[pointSize - 1] = y;
        } else
        {
            checkBuf(2, false);
            types[typeSize++] = 0;
            points[pointSize++] = x;
            points[pointSize++] = y;
        }
    }

    public void lineTo(float x, float y)
    {
        checkBuf(2, true);
        types[typeSize++] = 1;
        points[pointSize++] = x;
        points[pointSize++] = y;
    }

    public void quadTo(float x1, float y1, float x2, float y2)
    {
        checkBuf(4, true);
        types[typeSize++] = 2;
        points[pointSize++] = x1;
        points[pointSize++] = y1;
        points[pointSize++] = x2;
        points[pointSize++] = y2;
    }

    public void curveTo(float x1, float y1, float x2, float y2, float x3, float y3)
    {
        checkBuf(6, true);
        types[typeSize++] = 3;
        points[pointSize++] = x1;
        points[pointSize++] = y1;
        points[pointSize++] = x2;
        points[pointSize++] = y2;
        points[pointSize++] = x3;
        points[pointSize++] = y3;
    }

    public void closePath()
    {
        if(typeSize == 0 || types[typeSize - 1] != 4)
        {
            checkBuf(0, true);
            types[typeSize++] = 4;
        }
    }

    public void append(Shape shape, boolean connect)
    {
        PathIterator p = shape.getPathIterator(null);
        append(p, connect);
    }

    public void append(PathIterator path, boolean connect)
    {
        while(!path.isDone()) 
        {
            float coords[] = new float[6];
            switch(path.currentSegment(coords))
            {
            default:
                break;

            case 0: // '\0'
                if(!connect || typeSize == 0)
                {
                    moveTo(coords[0], coords[1]);
                    break;
                }
                if(types[typeSize - 1] != 4 && points[pointSize - 2] == coords[0] && points[pointSize - 1] == coords[1])
                    break;
                // fall through

            case 1: // '\001'
                lineTo(coords[0], coords[1]);
                break;

            case 2: // '\002'
                quadTo(coords[0], coords[1], coords[2], coords[3]);
                break;

            case 3: // '\003'
                curveTo(coords[0], coords[1], coords[2], coords[3], coords[4], coords[5]);
                break;

            case 4: // '\004'
                closePath();
                break;
            }
            path.next();
            connect = false;
        }
    }

    public Point2D getCurrentPoint()
    {
        if(typeSize == 0)
            return null;
        int j = pointSize - 2;
        if(types[typeSize - 1] == 4)
        {
            int i = typeSize - 2;
            do
            {
                if(i <= 0)
                    break;
                int type = types[i];
                if(type == 0)
                    break;
                j -= pointShift[type];
                i--;
            } while(true);
        }
        return new Point2D.Float(points[j], points[j + 1]);
    }

    public void reset()
    {
        typeSize = 0;
        pointSize = 0;
    }

    public void transform(AffineTransform t)
    {
        t.transform(points, 0, points, 0, pointSize / 2);
    }

    public Shape createTransformedShape(AffineTransform t)
    {
        GeneralPath p = (GeneralPath)clone();
        if(t != null)
            p.transform(t);
        return p;
    }

    public Rectangle2D getBounds2D()
    {
        float rx1;
        float ry1;
        float rx2;
        float ry2;
        if(pointSize == 0)
        {
            rx1 = ry1 = rx2 = ry2 = 0.0F;
        } else
        {
            int i = pointSize - 1;
            ry1 = ry2 = points[i--];
            rx1 = rx2 = points[i--];
            do
            {
                if(i <= 0)
                    break;
                float y = points[i--];
                float x = points[i--];
                if(x < rx1)
                    rx1 = x;
                else
                if(x > rx2)
                    rx2 = x;
                if(y < ry1)
                    ry1 = y;
                else
                if(y > ry2)
                    ry2 = y;
            } while(true);
        }
        return new Rectangle2D.Float(rx1, ry1, rx2 - rx1, ry2 - ry1);
    }

    public Rectangle getBounds()
    {
        return getBounds2D().getBounds();
    }

    boolean isInside(int cross)
    {
        if(rule == 1)
            return Crossing.isInsideNonZero(cross);
        else
            return Crossing.isInsideEvenOdd(cross);
    }

    public boolean contains(double px, double py)
    {
        return isInside(Crossing.crossShape(this, px, py));
    }

    public boolean contains(double rx, double ry, double rw, double rh)
    {
        int cross = Crossing.intersectShape(this, rx, ry, rw, rh);
        return cross != 255 && isInside(cross);
    }

    public boolean intersects(double rx, double ry, double rw, double rh)
    {
        int cross = Crossing.intersectShape(this, rx, ry, rw, rh);
        return cross == 255 || isInside(cross);
    }

    public boolean contains(Point2D p)
    {
        return contains(p.getX(), p.getY());
    }

    public boolean contains(Rectangle2D r)
    {
        return contains(r.getX(), r.getY(), r.getWidth(), r.getHeight());
    }

    public boolean intersects(Rectangle2D r)
    {
        return intersects(r.getX(), r.getY(), r.getWidth(), r.getHeight());
    }

    public PathIterator getPathIterator(AffineTransform t)
    {
        return new Iterator(this, t);
    }

    public PathIterator getPathIterator(AffineTransform t, double flatness)
    {
        return new FlatteningPathIterator(getPathIterator(t), flatness);
    }

    public Object clone()
    {
        try
        {
            GeneralPath p = (GeneralPath)super.clone();
            p.types = (byte[])types.clone();
            p.points = (float[])points.clone();
            return p;
        }
        catch(CloneNotSupportedException e)
        {
            throw new InternalError();
        }
    }

    public static final int WIND_EVEN_ODD = 0;
    public static final int WIND_NON_ZERO = 1;
    private static final int BUFFER_SIZE = 10;
    private static final int BUFFER_CAPACITY = 10;
    byte types[];
    float points[];
    int typeSize;
    int pointSize;
    int rule;
    static int pointShift[] = {
        2, 2, 4, 6, 0
    };

}
