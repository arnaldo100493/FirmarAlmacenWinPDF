// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Rectangle2D.java

package co.com.pdf.awt.geom;

import co.com.pdf.awt.geom.misc.HashCode;
import co.com.pdf.awt.geom.misc.Messages;
import java.util.NoSuchElementException;

// Referenced classes of package co.com.pdf.awt.geom:
//            RectangularShape, Line2D, Point2D, AffineTransform, 
//            PathIterator

public abstract class Rectangle2D extends RectangularShape
{
    class Iterator
        implements PathIterator
    {

        public int getWindingRule()
        {
            return 1;
        }

        public boolean isDone()
        {
            return index > 5;
        }

        public void next()
        {
            index++;
        }

        public int currentSegment(double coords[])
        {
            if(isDone())
                throw new NoSuchElementException(Messages.getString("awt.4B"));
            if(index == 5)
                return 4;
            int type;
            if(index == 0)
            {
                type = 0;
                coords[0] = x;
                coords[1] = y;
            } else
            {
                type = 1;
                switch(index)
                {
                case 1: // '\001'
                    coords[0] = x + width;
                    coords[1] = y;
                    break;

                case 2: // '\002'
                    coords[0] = x + width;
                    coords[1] = y + height;
                    break;

                case 3: // '\003'
                    coords[0] = x;
                    coords[1] = y + height;
                    break;

                case 4: // '\004'
                    coords[0] = x;
                    coords[1] = y;
                    break;
                }
            }
            if(t != null)
                t.transform(coords, 0, coords, 0, 1);
            return type;
        }

        public int currentSegment(float coords[])
        {
            if(isDone())
                throw new NoSuchElementException(Messages.getString("awt.4B"));
            if(index == 5)
                return 4;
            int type;
            if(index == 0)
            {
                coords[0] = (float)x;
                coords[1] = (float)y;
                type = 0;
            } else
            {
                type = 1;
                switch(index)
                {
                case 1: // '\001'
                    coords[0] = (float)(x + width);
                    coords[1] = (float)y;
                    break;

                case 2: // '\002'
                    coords[0] = (float)(x + width);
                    coords[1] = (float)(y + height);
                    break;

                case 3: // '\003'
                    coords[0] = (float)x;
                    coords[1] = (float)(y + height);
                    break;

                case 4: // '\004'
                    coords[0] = (float)x;
                    coords[1] = (float)y;
                    break;
                }
            }
            if(t != null)
                t.transform(coords, 0, coords, 0, 1);
            return type;
        }

        double x;
        double y;
        double width;
        double height;
        AffineTransform t;
        int index;
        final Rectangle2D this$0;

        Iterator(Rectangle2D r, AffineTransform at)
        {
            this$0 = Rectangle2D.this;
            super();
            x = r.getX();
            y = r.getY();
            width = r.getWidth();
            height = r.getHeight();
            t = at;
            if(width < 0.0D || height < 0.0D)
                index = 6;
        }
    }

    public static class Double extends Rectangle2D
    {

        public double getX()
        {
            return x;
        }

        public double getY()
        {
            return y;
        }

        public double getWidth()
        {
            return width;
        }

        public double getHeight()
        {
            return height;
        }

        public boolean isEmpty()
        {
            return width <= 0.0D || height <= 0.0D;
        }

        public void setRect(double x, double y, double width, double height)
        {
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
        }

        public void setRect(Rectangle2D r)
        {
            x = r.getX();
            y = r.getY();
            width = r.getWidth();
            height = r.getHeight();
        }

        public int outcode(double px, double py)
        {
            int code = 0;
            if(width <= 0.0D)
                code |= 5;
            else
            if(px < x)
                code |= 1;
            else
            if(px > x + width)
                code |= 4;
            if(height <= 0.0D)
                code |= 0xa;
            else
            if(py < y)
                code |= 2;
            else
            if(py > y + height)
                code |= 8;
            return code;
        }

        public Rectangle2D getBounds2D()
        {
            return new Double(x, y, width, height);
        }

        public Rectangle2D createIntersection(Rectangle2D r)
        {
            Rectangle2D dst = new Double();
            Rectangle2D.intersect(this, r, dst);
            return dst;
        }

        public Rectangle2D createUnion(Rectangle2D r)
        {
            Rectangle2D dest = new Double();
            Rectangle2D.union(this, r, dest);
            return dest;
        }

        public String toString()
        {
            return (new StringBuilder()).append(getClass().getName()).append("[x=").append(x).append(",y=").append(y).append(",width=").append(width).append(",height=").append(height).append("]").toString();
        }

        public double x;
        public double y;
        public double width;
        public double height;

        public Double()
        {
        }

        public Double(double x, double y, double width, double height)
        {
            setRect(x, y, width, height);
        }
    }

    public static class Float extends Rectangle2D
    {

        public double getX()
        {
            return (double)x;
        }

        public double getY()
        {
            return (double)y;
        }

        public double getWidth()
        {
            return (double)width;
        }

        public double getHeight()
        {
            return (double)height;
        }

        public boolean isEmpty()
        {
            return width <= 0.0F || height <= 0.0F;
        }

        public void setRect(float x, float y, float width, float height)
        {
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
        }

        public void setRect(double x, double y, double width, double height)
        {
            this.x = (float)x;
            this.y = (float)y;
            this.width = (float)width;
            this.height = (float)height;
        }

        public void setRect(Rectangle2D r)
        {
            x = (float)r.getX();
            y = (float)r.getY();
            width = (float)r.getWidth();
            height = (float)r.getHeight();
        }

        public int outcode(double px, double py)
        {
            int code = 0;
            if(width <= 0.0F)
                code |= 5;
            else
            if(px < (double)x)
                code |= 1;
            else
            if(px > (double)(x + width))
                code |= 4;
            if(height <= 0.0F)
                code |= 0xa;
            else
            if(py < (double)y)
                code |= 2;
            else
            if(py > (double)(y + height))
                code |= 8;
            return code;
        }

        public Rectangle2D getBounds2D()
        {
            return new Float(x, y, width, height);
        }

        public Rectangle2D createIntersection(Rectangle2D r)
        {
            Rectangle2D dst;
            if(r instanceof Double)
                dst = new Double();
            else
                dst = new Float();
            Rectangle2D.intersect(this, r, dst);
            return dst;
        }

        public Rectangle2D createUnion(Rectangle2D r)
        {
            Rectangle2D dst;
            if(r instanceof Double)
                dst = new Double();
            else
                dst = new Float();
            Rectangle2D.union(this, r, dst);
            return dst;
        }

        public String toString()
        {
            return (new StringBuilder()).append(getClass().getName()).append("[x=").append(x).append(",y=").append(y).append(",width=").append(width).append(",height=").append(height).append("]").toString();
        }

        public float x;
        public float y;
        public float width;
        public float height;

        public Float()
        {
        }

        public Float(float x, float y, float width, float height)
        {
            setRect(x, y, width, height);
        }
    }


    protected Rectangle2D()
    {
    }

    public abstract void setRect(double d, double d1, double d2, double d3);

    public abstract int outcode(double d, double d1);

    public abstract Rectangle2D createIntersection(Rectangle2D rectangle2d);

    public abstract Rectangle2D createUnion(Rectangle2D rectangle2d);

    public void setRect(Rectangle2D r)
    {
        setRect(r.getX(), r.getY(), r.getWidth(), r.getHeight());
    }

    public void setFrame(double x, double y, double width, double height)
    {
        setRect(x, y, width, height);
    }

    public Rectangle2D getBounds2D()
    {
        return (Rectangle2D)clone();
    }

    public boolean intersectsLine(double x1, double y1, double x2, double y2)
    {
        double rx1 = getX();
        double ry1 = getY();
        double rx2 = rx1 + getWidth();
        double ry2 = ry1 + getHeight();
        return rx1 <= x1 && x1 <= rx2 && ry1 <= y1 && y1 <= ry2 || rx1 <= x2 && x2 <= rx2 && ry1 <= y2 && y2 <= ry2 || Line2D.linesIntersect(rx1, ry1, rx2, ry2, x1, y1, x2, y2) || Line2D.linesIntersect(rx2, ry1, rx1, ry2, x1, y1, x2, y2);
    }

    public boolean intersectsLine(Line2D l)
    {
        return intersectsLine(l.getX1(), l.getY1(), l.getX2(), l.getY2());
    }

    public int outcode(Point2D p)
    {
        return outcode(p.getX(), p.getY());
    }

    public boolean contains(double x, double y)
    {
        if(isEmpty())
        {
            return false;
        } else
        {
            double x1 = getX();
            double y1 = getY();
            double x2 = x1 + getWidth();
            double y2 = y1 + getHeight();
            return x1 <= x && x < x2 && y1 <= y && y < y2;
        }
    }

    public boolean intersects(double x, double y, double width, double height)
    {
        if(isEmpty() || width <= 0.0D || height <= 0.0D)
        {
            return false;
        } else
        {
            double x1 = getX();
            double y1 = getY();
            double x2 = x1 + getWidth();
            double y2 = y1 + getHeight();
            return x + width > x1 && x < x2 && y + height > y1 && y < y2;
        }
    }

    public boolean contains(double x, double y, double width, double height)
    {
        if(isEmpty() || width <= 0.0D || height <= 0.0D)
        {
            return false;
        } else
        {
            double x1 = getX();
            double y1 = getY();
            double x2 = x1 + getWidth();
            double y2 = y1 + getHeight();
            return x1 <= x && x + width <= x2 && y1 <= y && y + height <= y2;
        }
    }

    public static void intersect(Rectangle2D src1, Rectangle2D src2, Rectangle2D dst)
    {
        double x1 = Math.max(src1.getMinX(), src2.getMinX());
        double y1 = Math.max(src1.getMinY(), src2.getMinY());
        double x2 = Math.min(src1.getMaxX(), src2.getMaxX());
        double y2 = Math.min(src1.getMaxY(), src2.getMaxY());
        dst.setFrame(x1, y1, x2 - x1, y2 - y1);
    }

    public static void union(Rectangle2D src1, Rectangle2D src2, Rectangle2D dst)
    {
        double x1 = Math.min(src1.getMinX(), src2.getMinX());
        double y1 = Math.min(src1.getMinY(), src2.getMinY());
        double x2 = Math.max(src1.getMaxX(), src2.getMaxX());
        double y2 = Math.max(src1.getMaxY(), src2.getMaxY());
        dst.setFrame(x1, y1, x2 - x1, y2 - y1);
    }

    public void add(double x, double y)
    {
        double x1 = Math.min(getMinX(), x);
        double y1 = Math.min(getMinY(), y);
        double x2 = Math.max(getMaxX(), x);
        double y2 = Math.max(getMaxY(), y);
        setRect(x1, y1, x2 - x1, y2 - y1);
    }

    public void add(Point2D p)
    {
        add(p.getX(), p.getY());
    }

    public void add(Rectangle2D r)
    {
        union(this, r, this);
    }

    public PathIterator getPathIterator(AffineTransform t)
    {
        return new Iterator(this, t);
    }

    public PathIterator getPathIterator(AffineTransform t, double flatness)
    {
        return new Iterator(this, t);
    }

    public int hashCode()
    {
        HashCode hash = new HashCode();
        hash.append(getX());
        hash.append(getY());
        hash.append(getWidth());
        hash.append(getHeight());
        return hash.hashCode();
    }

    public boolean equals(Object obj)
    {
        if(obj == this)
            return true;
        if(obj instanceof Rectangle2D)
        {
            Rectangle2D r = (Rectangle2D)obj;
            return getX() == r.getX() && getY() == r.getY() && getWidth() == r.getWidth() && getHeight() == r.getHeight();
        } else
        {
            return false;
        }
    }

    public static final int OUT_LEFT = 1;
    public static final int OUT_TOP = 2;
    public static final int OUT_RIGHT = 4;
    public static final int OUT_BOTTOM = 8;
}
