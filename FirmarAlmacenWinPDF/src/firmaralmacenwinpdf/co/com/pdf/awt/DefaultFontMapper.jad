// Decompiled by DJ v3.12.12.96 Copyright 2011 Atanas Neshkov  Date: 12/12/2017 5:12:47 p. m.
// Home Page: http://members.fortunecity.com/neshkov/dj.html  http://www.neshkov.com/dj.html - Check often for new version!
// Decompiler options: packimports(3) 
// Source File Name:   DefaultFontMapper.java

package co.com.pdf.awt;

import co.com.pdf.text.ExceptionConverter;
import co.com.pdf.text.pdf.BaseFont;
import java.awt.Font;
import java.io.File;
import java.util.HashMap;

// Referenced classes of package co.com.pdf.awt:
//            FontMapper

public class DefaultFontMapper
    implements FontMapper
{
    public static class BaseFontParameters
    {

        public String fontName;
        public String encoding;
        public boolean embedded;
        public boolean cached;
        public byte ttfAfm[];
        public byte pfb[];

        public BaseFontParameters(String fontName)
        {
            this.fontName = fontName;
            encoding = "Cp1252";
            embedded = true;
            cached = true;
        }
    }


    public DefaultFontMapper()
    {
        aliases = new HashMap();
        mapper = new HashMap();
    }

    public BaseFont awtToPdf(Font font)
    {
        String fontKey;
        String logicalName;
        try
        {
            BaseFontParameters p = getBaseFontParameters(font.getFontName());
            if(p != null)
                return BaseFont.createFont(p.fontName, p.encoding, p.embedded, p.cached, p.ttfAfm, p.pfb);
        }
        catch(Exception e)
        {
            throw new ExceptionConverter(e);
        }
        fontKey = null;
        logicalName = font.getName();
        if(logicalName.equalsIgnoreCase("DialogInput") || logicalName.equalsIgnoreCase("Monospaced") || logicalName.equalsIgnoreCase("Courier"))
        {
            if(font.isItalic())
            {
                if(font.isBold())
                    fontKey = "Courier-BoldOblique";
                else
                    fontKey = "Courier-Oblique";
            } else
            if(font.isBold())
                fontKey = "Courier-Bold";
            else
                fontKey = "Courier";
        } else
        if(logicalName.equalsIgnoreCase("Serif") || logicalName.equalsIgnoreCase("TimesRoman"))
        {
            if(font.isItalic())
            {
                if(font.isBold())
                    fontKey = "Times-BoldItalic";
                else
                    fontKey = "Times-Italic";
            } else
            if(font.isBold())
                fontKey = "Times-Bold";
            else
                fontKey = "Times-Roman";
        } else
        if(font.isItalic())
        {
            if(font.isBold())
                fontKey = "Helvetica-BoldOblique";
            else
                fontKey = "Helvetica-Oblique";
        } else
        if(font.isBold())
            fontKey = "Helvetica-Bold";
        else
            fontKey = "Helvetica";
        return BaseFont.createFont(fontKey, "Cp1252", false);
    }

    public Font pdfToAwt(BaseFont font, int size)
    {
        String names[][] = font.getFullFontName();
        if(names.length == 1)
            return new Font(names[0][3], 0, size);
        String name10 = null;
        String name3x = null;
        for(int k = 0; k < names.length; k++)
        {
            String name[] = names[k];
            if(name[0].equals("1") && name[1].equals("0"))
            {
                name10 = name[3];
                continue;
            }
            if(!name[2].equals("1033"))
                continue;
            name3x = name[3];
            break;
        }

        String finalName = name3x;
        if(finalName == null)
            finalName = name10;
        if(finalName == null)
            finalName = names[0][3];
        return new Font(finalName, 0, size);
    }

    public void putName(String awtName, BaseFontParameters parameters)
    {
        mapper.put(awtName, parameters);
    }

    public void putAlias(String alias, String awtName)
    {
        aliases.put(alias, awtName);
    }

    public BaseFontParameters getBaseFontParameters(String name)
    {
        String alias = (String)aliases.get(name);
        if(alias == null)
            return (BaseFontParameters)mapper.get(name);
        BaseFontParameters p = (BaseFontParameters)mapper.get(alias);
        if(p == null)
            return (BaseFontParameters)mapper.get(name);
        else
            return p;
    }

    public void insertNames(Object allNames[], String path)
    {
        String names[][] = (String[][])(String[][])allNames[2];
        String main = null;
        int k = 0;
        do
        {
            if(k >= names.length)
                break;
            String name[] = names[k];
            if(name[2].equals("1033"))
            {
                main = name[3];
                break;
            }
            k++;
        } while(true);
        if(main == null)
            main = names[0][3];
        BaseFontParameters p = new BaseFontParameters(path);
        mapper.put(main, p);
        for(int k = 0; k < names.length; k++)
            aliases.put(names[k][3], main);

        aliases.put((String)allNames[0], main);
    }

    public int insertFile(File file)
    {
        String name = file.getPath().toLowerCase();
        if(name.endsWith(".ttf") || name.endsWith(".otf") || name.endsWith(".afm"))
        {
            Object allNames[] = BaseFont.getAllFontNames(file.getPath(), "Cp1252", null);
            insertNames(allNames, file.getPath());
            return 1;
        }
        try
        {
            if(name.endsWith(".ttc"))
            {
                String ttcs[] = BaseFont.enumerateTTCNames(file.getPath());
                for(int j = 0; j < ttcs.length; j++)
                {
                    String nt = (new StringBuilder()).append(file.getPath()).append(",").append(j).toString();
                    Object allNames[] = BaseFont.getAllFontNames(nt, "Cp1252", null);
                    insertNames(allNames, nt);
                }

                return 1;
            }
        }
        catch(Exception e) { }
        return 0;
    }

    public int insertDirectory(String dir)
    {
        File file = new File(dir);
        if(!file.exists() || !file.isDirectory())
            return 0;
        File files[] = file.listFiles();
        if(files == null)
            return 0;
        int count = 0;
        for(int k = 0; k < files.length; k++)
            count += insertFile(files[k]);

        return count;
    }

    public HashMap getMapper()
    {
        return mapper;
    }

    public HashMap getAliases()
    {
        return aliases;
    }

    private HashMap aliases;
    private HashMap mapper;
}